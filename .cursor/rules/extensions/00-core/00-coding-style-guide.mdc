---
alwaysApply: ${cursor.file.path.includes("layer/") || cursor.file.path.includes("config/") || cursor.file.path.endsWith(".yaml") || cursor.file.path.endsWith(".sh")}
---

# –ü—Ä–∞–≤–∏–ª–æ 00: –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Å—Ç–∏–ª—é –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π rpi-image-gen

## –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—â–∏–π –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π —Å—Ç–∏–ª—å –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π rpi-image-gen, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ, —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç—å –∫–æ–¥–∞.

## –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

## –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Å—Ç–∏–ª—è

### –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
```yaml
# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û - —á–µ—Ç–∫–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏
# ============================================================================
# –ó–ê–ì–û–õ–û–í–û–ö –†–ê–ó–î–ï–õ–ê
# ============================================================================

# –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
# —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è

# –ö–æ–¥ —Ä–∞–∑–¥–µ–ª–∞...
```

### –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è

#### –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è IGconf_*
```bash
# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û - –ø—Ä–µ—Ñ–∏–∫—Å + —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å + –∏–º—è
IGconf_app_service_port=8080
IGconf_device_hostname=my-rpi
IGconf_security_firewall_enabled=true

# ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û - –ø—Ä–æ–±–µ–ª—ã, –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –≤ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è—Ö
IGconf_app-Service-Port=8080
IGconf_Device_Hostname=my-rpi
```

#### –§—É–Ω–∫—Ü–∏–∏ Bash
```bash
# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û - snake_case, –ø—Ä–µ—Ñ–∏–∫—Å —Ç–∏–ø–∞
configure_nginx_proxy() { ... }
validate_service_port() { ... }
setup_systemd_service() { ... }

# ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û - camelCase, –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
configureNginxProxy() { ... }
portValidation() { ... }
systemdSetup() { ... }
```

#### –§–∞–π–ª—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
```bash
# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û - kebab-case –¥–ª—è –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
my-application-extension.yaml
hybrid-raid-layout.sh
device-optimization.conf

# ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û - camelCase –∏–ª–∏ snake_case
myApplicationExtension.yaml
hybrid_raid_layout.sh
```

## –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã Bash —Å–∫—Ä–∏–ø—Ç–æ–≤

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∫—Ä–∏–ø—Ç–∞
```bash
#!/bin/bash
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∏ –∞–≤—Ç–æ—Ä
set -euo pipefail

# Function for error handling
die() {
    echo "ERROR: $*" >&2
    exit 1
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è main()
main() {
    # –õ–æ–≥–∏–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
    echo "üîß Starting configuration..."

    # –®–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    validate_environment
    setup_components
    configure_services
    verify_configuration

    echo "‚úÖ Configuration completed successfully"
}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
validate_environment() { ... }
setup_components() { ... }
configure_services() { ... }
verify_configuration() { ... }

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
trap cleanup EXIT INT TERM

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
main "$@"
```

### –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
```bash
# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û - –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
validate_service_port() {
    local port="${IGconf_app_service_port:-8080}"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞
    if ! [[ "$port" =~ ^[0-9]+$ ]]; then
        die "service_port must be numeric: $port"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    if [[ "$port" -lt 1024 ]] || [[ "$port" -gt 65535 ]]; then
        die "service_port must be between 1024 and 65535: $port"
    fi

    echo "‚úÖ Service port validation passed: $port"
}

# –í—ã–∑–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
validate_service_port
```

### –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
```bash
# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û - –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
create_config_file() {
    local file="$1"
    local content="$2"

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    local dir
    dir=$(dirname "$file")
    mkdir -p "$dir" || die "Failed to create directory: $dir"

    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–ø–∏—Å—å —Å –±—ç–∫–∞–ø–æ–º
    if [[ -f "$file" ]] && [[ ! -f "${file}.backup" ]]; then
        cp "$file" "${file}.backup" || die "Failed to create backup: $file"
    fi

    cat > "$file" << EOF || die "Failed to write config file: $file"
$content
EOF

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    chmod 644 "$file" || die "Failed to set permissions: $file"
}

# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û - –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏
manage_systemd_service() {
    local service="$1"
    local action="$2"

    case "$action" in
        enable)
            if ! systemctl is-enabled "$service" 2>/dev/null; then
                systemctl enable "$service" || die "Failed to enable service: $service"
                echo "‚úÖ Service enabled: $service"
            fi
            ;;
        start)
            if ! systemctl is-active "$service" 2>/dev/null; then
                systemctl start "$service" || die "Failed to start service: $service"
                echo "‚úÖ Service started: $service"
            fi
            ;;
        *)
            die "Unknown action: $action"
            ;;
    esac
}
```

## –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
```yaml
# –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º
---

# ============================================================================
# –ü–ï–†–ï–ú–ï–ù–ù–´–ï –°–õ–û–ï–í (–≤—ã–Ω–µ—Å–µ–Ω—ã –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
# ============================================================================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ–æ—Ä–º–µ (–±–µ–∑ IGconf_ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤)
app_service:
  port: 8080
  host: localhost
  debug: false

security_hardening:
  apparmor_mode: enforce
  firewall_policy: deny
  audit_enabled: true

# ============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –£–°–¢–†–û–ô–°–¢–í–ê –ò –û–ë–†–ê–ó–ê
# ============================================================================

device:
  layer: pi5
  hostname: my-production-server

image:
  layer: hybrid-raid-luks
  boot_part_size: 200%
  root_part_size: 400%

# ============================================================================
# –°–õ–û–ò –°–ò–°–¢–ï–ú–´ (—Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏)
# ============================================================================

layer:
  base: bookworm-minbase
  security: apparmor-core
  monitoring: prometheus-stack
  app: my-application
```

### –°—Ç–∏–ª—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
```yaml
# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û - –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
# ============================================================================
# –ü–†–û–î–ê–ö–®–ù –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –î–õ–Ø –í–´–°–û–ö–û–ù–ê–ì–†–£–ñ–ï–ù–ù–û–ì–û –°–ï–†–í–ï–†–ê
# ============================================================================
#
# –¶–µ–ª—å: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
# –ê–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ: Raspberry Pi 5 + NVMe SSD
# –ë–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: Debian Bookworm
#
# –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:
# - Hybrid RAID1 + LUKS —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
# - –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (AppArmor + UFW + Fail2Ban)
# - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
# - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
# ============================================================================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app_service:
  port: 8080          # –ü–æ—Ä—Ç –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞ (1024-65535)
  host: 0.0.0.0       # –°–ª—É—à–∞—Ç—å –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
  debug: false        # –û—Ç–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
  workers: 4          # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ worker –ø—Ä–æ—Ü–µ—Å—Å–æ–≤

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
security_hardening:
  apparmor_mode: enforce     # –°—Ç—Ä–æ–≥—ã–π —Ä–µ–∂–∏–º AppArmor
  firewall_policy: deny      # –ü–æ–ª–∏—Ç–∏–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∑–∞–ø—Ä–µ—Ç–∏—Ç—å
  audit_enabled: true        # –í–∫–ª—é—á–∏—Ç—å –∞—É–¥–∏—Ç —Å–∏—Å—Ç–µ–º—ã
  fail2ban_maxretry: 3       # –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π

# ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
app_service:
  port: 8080          # port
  host: 0.0.0.0       # host
```

## –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–µ–≤

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ X-Env –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
```yaml
# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û - –ø–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
# METABEGIN
# X-Env-Layer-Name: my-application
# X-Env-Layer-Category: extension
# X-Env-Layer-Description: –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
# X-Env-Layer-Version: 1.2.0
# X-Env-Layer-Requires: essential,net-misc,security-basic
# X-Env-VarPrefix: app
#
# X-Env-Var-service_port: 8080
# X-Env-Var-service_port-Description: –ü–æ—Ä—Ç –¥–ª—è HTTP —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# X-Env-Var-service_port-Required: false
# X-Env-Var-service_port-Valid: int:1024-65535
#
# X-Env-Var-enable_ssl: false
# X-Env-Var-enable_ssl-Description: –í–∫–ª—é—á–∏—Ç—å HTTPS —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º
# X-Env-Var-enable_ssl-Required: false
# X-Env-Var-enable_ssl-Valid: true,false
# METAEND
```

### –°–æ–≥–ª–∞—à–µ–Ω–∏—è –ø–æ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
```yaml
# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û - —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
X-Env-Layer-Version: 1.2.3

# –ì–¥–µ:
# 1 - MAJOR: breaking changes (–Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
# 2 - MINOR: –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
# 3 - PATCH: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–≥–æ–≤ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)

# –ü—Ä–∏–º–µ—Ä—ã:
# 1.0.0 - –ø–µ—Ä–≤—ã–π —Ä–µ–ª–∏–∑
# 1.1.0 - –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# 1.1.1 - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –±–∞–≥
# 2.0.0 - breaking changes –≤ API
```

## –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

### –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
```bash
#!/bin/bash
# configure_database_connection()
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
#
# –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
#   $1 - —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (postgresql, mysql, sqlite)
#   $2 - —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
#
# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
#   0 - —É—Å–ø–µ—Ö
#   1 - –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
#
# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
#   configure_database_connection "postgresql" "host=localhost dbname=myapp"
#
# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
#   - postgresql-client –∏–ª–∏ mysql-client
#   - curl –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
#
# –ê–≤—Ç–æ—Ä: –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
# –í–µ—Ä—Å–∏—è: 1.0.0
configure_database_connection() {
    local db_type="$1"
    local connection_string="$2"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if [[ -z "$db_type" ]] || [[ -z "$connection_string" ]]; then
        echo "ERROR: db_type and connection_string are required" >&2
        return 1
    fi

    # –õ–æ–≥–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏...
}
```

### –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö—É–∫–æ–≤
```yaml
mmdebstrap:
  customize-hooks:
    - |
      #!/bin/bash
      # Hook: Application Deployment and Configuration
      #
      # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      # –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ —ç—Ç–∞–ø–µ customize –≤ mmdebstrap
      #
      # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
      #   IGconf_app_service_port - –ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–∞ (default: 8080)
      #   IGconf_app_database_url - URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (required)
      #
      # –°–æ–∑–¥–∞–µ—Ç:
      #   - –°–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è app_user
      #   - –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ Python
      #   - SystemD —Å–µ—Ä–≤–∏—Å
      #   - Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      #
      # –ê–≤—Ç–æ—Ä: –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
      # –í–µ—Ä—Å–∏—è: 1.0.0
      # –î–∞—Ç–∞: 2024-01-15

      set -euo pipefail
      # ... —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ö—É–∫–∞ ...
```

## –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏

### –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞
```bash
# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û - —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
main() {
    validate_inputs
    setup_environment
    install_dependencies
    configure_services
    enable_services
    verify_deployment
}

validate_inputs() {
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
}

setup_environment() {
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
}

install_dependencies() {
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
}

configure_services() {
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
}

enable_services() {
    # –í–∫–ª—é—á–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫
}

verify_deployment() {
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
}
```

### –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
```bash
# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û - graceful degradation
configure_optional_feature() {
    local feature_name="$1"

    if command -v required_command >/dev/null 2>&1; then
        echo "üîß Configuring $feature_name..."
        setup_feature || echo "‚ö†Ô∏è  Failed to configure $feature_name, continuing..."
    else
        echo "‚ö†Ô∏è  $feature_name not available, skipping..."
    fi
}

# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û - –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
validate_critical_component() {
    local component="$1"

    if ! check_component "$component"; then
        cat >&2 << EOF
ERROR: Critical component '$component' failed validation!

Possible causes:
- Missing dependencies
- Incorrect configuration
- Permission issues

Please check:
1. System requirements documentation
2. Configuration variables
3. System logs: journalctl -u $component

For help, see: https://rpi-image-gen.readthedocs.io/components/$component
EOF
        exit 1
    fi
}
```

### –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
```bash
# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–∏–∫–ª–æ–≤
process_items() {
    local items_file="$1"

    # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å progress indicator
    local total_count
    total_count=$(wc -l < "$items_file")
    local current=0

    while IFS= read -r item; do
        ((current++))
        echo "[$current/$total_count] Processing: $item"

        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        process_item "$item" &
        wait_for_jobs 4  # –ú–∞–∫—Å–∏–º—É–º 4 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á–∏
    done < "$items_file"
}

wait_for_jobs() {
    local max_jobs="$1"
    while [[ $(jobs -r | wc -l) -ge $max_jobs ]]; do
        sleep 0.1
    done
}
```

## –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞

### –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è
```bash
# –ü—Ä–æ–≤–µ—Ä–∫–∞ Bash —Å–∫—Ä–∏–ø—Ç–æ–≤
check_bash_style() {
    local script_file="$1"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è set -euo pipefail
    if ! head -5 "$script_file" | grep -q "set -euo pipefail"; then
        echo "ERROR: Missing 'set -euo pipefail' in $script_file"
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è die —Ñ—É–Ω–∫—Ü–∏–∏
    if ! grep -q "^die()" "$script_file"; then
        echo "ERROR: Missing die() function in $script_file"
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    if grep -q "^[a-zA-Z_][a-zA-Z0-9_]*()" "$script_file"; then
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã
        echo "INFO: Functions found, checking documentation..."
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
check_yaml_style() {
    local config_file="$1"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if ! grep -q "^layer:" "$config_file"; then
        echo "ERROR: Missing layer section in $config_file"
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    if ! grep -q "^#" "$config_file"; then
        echo "WARNING: No comments found in $config_file"
    fi
}
```

### –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
```bash
# –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π
analyze_complexity() {
    local script_file="$1"

    echo "=== Code Complexity Analysis ==="

    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞
    local lines_count
    lines_count=$(wc -l < "$script_file")
    echo "Total lines: $lines_count"

    # –ü–æ–¥—Å—á–µ—Ç —Ñ—É–Ω–∫—Ü–∏–π
    local functions_count
    functions_count=$(grep -c "^[a-zA-Z_][a-zA-Z0-9_]*()" "$script_file")
    echo "Functions: $functions_count"

    # –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏
    if [[ $functions_count -gt 0 ]]; then
        local avg_function_length=$(( lines_count / functions_count ))
        echo "Average function length: $avg_function_length lines"

        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
        if [[ $avg_function_length -gt 50 ]]; then
            echo "WARNING: Functions are too long, consider splitting"
        fi
    fi
}
```

---

## –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
- [ ] –í—Å–µ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å–ª–µ–¥—É—é—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —Å—Ç–∏–ª—é
- [ ] –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
- [ ] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∞ –≤ CI/CD
- [ ] –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –æ–±—É—á–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º —Å—Ç–∏–ª—è

### –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
- [ ] 100% –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–∏–ª—é
- [ ] –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 30 —Å—Ç—Ä–æ–∫
- [ ] –í—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –∏–º–µ—é—Ç set -euo pipefail
- [ ] –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã
- [ ] –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–µ—é—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é

### –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
- [ ] –õ–∏–Ω—Ç–∏–Ω–≥ Bash —Å–∫—Ä–∏–ø—Ç–æ–≤ (shellcheck)
- [ ] –õ–∏–Ω—Ç–∏–Ω–≥ YAML —Ñ–∞–π–ª–æ–≤ (yamllint)
- [ ] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞
- [ ] –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞

### –ò—Å—Ç–æ—á–Ω–∏–∫
–°–æ–∑–¥–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞ –≤ rpi-image-gen –ø—Ä–æ–µ–∫—Ç–µ –∏ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.