---
alwaysApply: ${cursor.file.path.includes("layer/") || cursor.file.path.includes("config/") || cursor.file.path.endsWith(".yaml") || cursor.file.path.endsWith(".sh")}
---

# –ü—Ä–∞–≤–∏–ª–æ 05: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∏–ª—è –∫–æ–¥–∞

## –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–¥–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º —Å—Ç–∏–ª—è, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –≤ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ –ø–æ —Å—Ç–∏–ª—é –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è.

## –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

## –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∏–ª—è –¥–ª—è Bash —Å–∫—Ä–∏–ø—Ç–æ–≤

### –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
```bash
# üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: set -euo pipefail –≤ –Ω–∞—á–∞–ª–µ —Å–∫—Ä–∏–ø—Ç–∞
validate_bash_safety() {
    local file="$1"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ shebang
    if ! head -1 "$file" | grep -q "^#!/bin/bash"; then
        echo "ERROR: Missing or incorrect shebang in $file"
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ set -euo pipefail –≤ –ø–µ—Ä–≤—ã—Ö 5 —Å—Ç—Ä–æ–∫–∞—Ö
    if ! head -5 "$file" | grep -q "set -euo pipefail"; then
        echo "ERROR: Missing 'set -euo pipefail' in $file"
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è die —Ñ—É–Ω–∫—Ü–∏–∏
    if ! grep -q "^die()" "$file"; then
        echo "ERROR: Missing die() function in $file"
        return 1
    fi

    echo "‚úÖ Bash safety checks passed for $file"
}

# üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
validate_igconf_usage() {
    local file="$1"

    # –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è IGconf_ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if grep -q "IGconf_" "$file"; then
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–∏—Ä—É—é—Ç—Å—è
        if ! grep -q "IGconf_[a-zA-Z_]*:?[^?]" "$file"; then
            echo "WARNING: IGconf_ variables found but may not be validated in $file"
        fi
    fi

    echo "‚úÖ IGconf usage validation passed for $file"
}
```

### –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
```bash
# üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫—Ä–∏–ø—Ç–∞
validate_bash_structure() {
    local file="$1"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è main —Ñ—É–Ω–∫—Ü–∏–∏
    if ! grep -q "^main()" "$file"; then
        echo "WARNING: No main() function found in $file"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è trap –¥–ª—è cleanup
    if ! grep -q "trap.*EXIT" "$file"; then
        echo "WARNING: No EXIT trap found in $file"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    local undocumented_functions
    undocumented_functions=$(grep -n "^[a-zA-Z_][a-zA-Z0-9_]*()" "$file" | \
        while IFS=: read -r line func; do
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            if ! sed -n "$((line-1))p" "$file" | grep -q "^#"; then
                echo "$func"
            fi
        done)

    if [[ -n "$undocumented_functions" ]]; then
        echo "WARNING: Undocumented functions in $file: $undocumented_functions"
    fi

    echo "‚úÖ Bash structure validation passed for $file"
}
```

## –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∏–ª—è –¥–ª—è YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π

### –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ YAML
```bash
# üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
validate_yaml_structure() {
    local file="$1"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
    if ! grep -q "^layer:" "$file"; then
        echo "ERROR: Missing 'layer:' section in $file"
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    if grep -q "^  [a-zA-Z_].*:" "$file" && ! grep -q "^#.*–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.*—Å–ª–æ–µ–≤" "$file"; then
        echo "WARNING: Variables found but no section comment in $file"
    fi

    echo "‚úÖ YAML structure validation passed for $file"
}

# üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
validate_yaml_comments() {
    local file="$1"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    if ! grep -q "^# ============================================================================" "$file"; then
        echo "WARNING: No section headers found in $file"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    local total_lines
    total_lines=$(wc -l < "$file")
    local comment_lines
    comment_lines=$(grep -c "^#" "$file")

    local comment_ratio=$(( comment_lines * 100 / total_lines ))
    if [[ $comment_ratio -lt 10 ]]; then
        echo "WARNING: Low comment ratio in $file: $comment_ratio%"
    fi

    echo "‚úÖ YAML comments validation passed for $file"
}
```

## –ü—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–µ–≤

### –í–∞–ª–∏–¥–∞—Ü–∏—è X-Env –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
```bash
# üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å–ª–æ—è
validate_layer_metadata() {
    local file="$1"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è METABEGIN/METAEND
    if ! grep -q "^# METABEGIN" "$file" || ! grep -q "^# METAEND" "$file"; then
        echo "ERROR: Missing METABEGIN/METAEND markers in $file"
        return 1
    fi

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    local metadata
    metadata=$(sed -n '/^# METABEGIN/,/^# METAEND/p' "$file")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    local required_fields=("X-Env-Layer-Name" "X-Env-Layer-Category" "X-Env-Layer-Version")
    for field in "${required_fields[@]}"; do
        if ! grep -q "$field:" <<< "$metadata"; then
            echo "ERROR: Missing required field '$field' in $file"
            return 1
        fi
    done

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if grep -q "X-Env-Var-" <<< "$metadata"; then
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã
        local undoc_vars
        undoc_vars=$(grep "X-Env-Var-[^:]*:" <<< "$metadata" | \
            grep -v -A 3 "Description:" | tail -1)
        if [[ -n "$undoc_vars" ]]; then
            echo "WARNING: Undocumented variables found in $file"
        fi
    fi

    echo "‚úÖ Layer metadata validation passed for $file"
}
```

## –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤

### –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
```bash
# üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
validate_file() {
    local file="$1"
    local file_type
    file_type=$(get_file_type "$file")

    echo "üîç Validating $file (type: $file_type)"

    case "$file_type" in
        "bash")
            validate_bash_safety "$file"
            validate_igconf_usage "$file"
            validate_bash_structure "$file"
            ;;
        "yaml")
            validate_yaml_structure "$file"
            validate_yaml_comments "$file"
            validate_layer_metadata "$file"
            ;;
        "mdc")
            # –ü—Ä–∞–≤–∏–ª–∞ –∏–º–µ—é—Ç —Å–≤–æ—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
            echo "‚úÖ MDC file validation skipped (rules have their own validation)"
            ;;
        *)
            echo "‚ö†Ô∏è  Unknown file type for $file"
            ;;
    esac

    echo "‚úÖ File validation completed for $file"
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
get_file_type() {
    local file="$1"

    case "$file" in
        *.sh) echo "bash" ;;
        *.yaml) echo "yaml" ;;
        *.mdc) echo "mdc" ;;
        *) echo "unknown" ;;
    esac
}
```

## –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å pre-commit —Ö—É–∫–∞–º–∏

### Pre-commit –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
```yaml
# .pre-commit-config.yaml
repos:
  - repo: local
    hooks:
      - id: rpi-image-gen-style-check
        name: rpi-image-gen style validation
        entry: ./scripts/validate-style.sh
        language: system
        files: \.(sh|yaml)$
        pass_filenames: true

  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.5
    hooks:
      - id: shellcheck
        args: [--external-sources]

  - repo: https://github.com/adrienverge/yamllint
    rev: v1.32.0
    hooks:
      - id: yamllint
        args: [--config-file=.yamllint.yaml]
```

### –°–∫—Ä–∏–ø—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∏–ª—è
```bash
#!/bin/bash
# scripts/validate-style.sh
set -euo pipefail

# Function for error handling
die() {
    echo "ERROR: $*" >&2
    exit 1
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
main() {
    local files=("$@")
    local failed_files=()

    for file in "${files[@]}"; do
        if [[ -f "$file" ]]; then
            echo "Validating: $file"
            if ! validate_file "$file"; then
                failed_files+=("$file")
            fi
        fi
    done

    if [[ ${#failed_files[@]} -gt 0 ]]; then
        echo "‚ùå Style validation failed for: ${failed_files[*]}"
        exit 1
    else
        echo "‚úÖ All files passed style validation"
    fi
}

# –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è CI)
validate_file() {
    local file="$1"
    local errors=0

    # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    if [[ ! -s "$file" ]]; then
        echo "ERROR: Empty file: $file"
        return 1
    fi

    # –¢–∏–ø-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    case "$file" in
        *.sh)
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ set -euo pipefail
            if ! head -5 "$file" | grep -q "set -euo pipefail"; then
                echo "ERROR: Missing 'set -euo pipefail' in $file"
                ((errors++))
            fi

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ die —Ñ—É–Ω–∫—Ü–∏–∏
            if ! grep -q "^die()" "$file"; then
                echo "ERROR: Missing die() function in $file"
                ((errors++))
            fi
            ;;
        *.yaml)
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è layer —Å–µ–∫—Ü–∏–∏
            if ! grep -q "^layer:" "$file"; then
                echo "ERROR: Missing 'layer:' section in $file"
                ((errors++))
            fi
            ;;
    esac

    return $errors
}

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
main "$@"
```

## –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Cursor IDE

### –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
```json
// .cursor/settings.json
{
    "editor.codeActionsOnSave": {
        "source.fixAll": true,
        "source.organizeImports": true
    },
    "editor.formatOnSave": true,
    "files.associations": {
        "*.mdc": "markdown"
    },
    "emmet.includeLanguages": {
        "mdc": "markdown"
    }
}
```

### –†–∞—Å—à–∏—Ä–µ–Ω–∏—è Cursor –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
```json
// .cursor/extensions.json
{
    "recommendations": [
        "timonwong.shellcheck",
        "redhat.vscode-yaml",
        "ms-vscode.vscode-json",
        "ms-vscode.powershell",
        "streetsidesoftware.code-spell-checker"
    ]
}
```

## –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å

### –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –æ –∫–∞—á–µ—Å—Ç–≤–µ
```bash
# scripts/generate-quality-report.sh
#!/bin/bash
set -euo pipefail

generate_quality_report() {
    local output_file="${1:-quality-report.md}"

    cat > "$output_file" << 'EOF'
# –û—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–¥–∞ rpi-image-gen

## –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

EOF

    # –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤
    local bash_files
    bash_files=$(find . -name "*.sh" -type f | wc -l)
    local yaml_files
    yaml_files=$(find . -name "*.yaml" -type f | wc -l)

    echo "- Bash —Å–∫—Ä–∏–ø—Ç–æ–≤: $bash_files" >> "$output_file"
    echo "- YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: $yaml_files" >> "$output_file"
    echo "" >> "$output_file"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è
    echo "## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∏–ª—è" >> "$output_file"
    echo "" >> "$output_file"

    local style_errors=0
    local style_warnings=0

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Bash —Ñ–∞–π–ª–æ–≤
    while IFS= read -r file; do
        if ! validate_bash_style "$file" 2>/dev/null; then
            ((style_errors++))
        fi
    done < <(find . -name "*.sh" -type f)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ YAML —Ñ–∞–π–ª–æ–≤
    while IFS= read -r file; do
        if ! validate_yaml_style "$file" 2>/dev/null; then
            ((style_errors++))
        fi
    done < <(find . -name "*.yaml" -type f)

    echo "- –û—à–∏–±–æ–∫ —Å—Ç–∏–ª—è: $style_errors" >> "$output_file"
    echo "- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π —Å—Ç–∏–ª—è: $style_warnings" >> "$output_file"
    echo "" >> "$output_file"

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    echo "## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏" >> "$output_file"
    echo "" >> "$output_file"

    if [[ $style_errors -gt 0 ]]; then
        echo "- –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ —Å—Ç–∏–ª—è –≤ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Ñ–∞–π–ª–∞—Ö" >> "$output_file"
    fi

    echo "- –†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∏–ª—è" >> "$output_file"
    echo "- –û–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Å—Ç–∏–ª—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã" >> "$output_file"

    echo "‚úÖ –û—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: $output_file"
}
```

---

## –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
- [ ] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞ –≤ CI/CD –ø–∞–π–ø–ª–∞–π–Ω
- [ ] Pre-commit —Ö—É–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
- [ ] –ü—Ä–∞–≤–∏–ª–∞ —Å—Ç–∏–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã
- [ ] –ù–∞—Ä—É—à–µ–Ω–∏—è —Å—Ç–∏–ª—è –±–ª–æ–∫–∏—Ä—É—é—Ç –º–µ—Ä–¥–∂ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –≤–µ—Ç–∫—É

### –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
- [ ] 0 –æ—à–∏–±–æ–∫ —Å—Ç–∏–ª—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ—Ç–∫–µ
- [ ] –í—Å–µ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å—Ç–∏–ª—è
- [ ] –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∏–ª—è < 30 —Å–µ–∫—É–Ω–¥
- [ ] –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –æ –∫–∞—á–µ—Å—Ç–≤–µ

### –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
- [ ] –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∫–æ–º–º–∏—Ç–µ
- [ ] –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ pull request
- [ ] –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ –∫–∞—á–µ—Å—Ç–≤–µ
- [ ] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–µ–Ω–¥–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞

### –ò—Å—Ç–æ—á–Ω–∏–∫
–°–æ–∑–¥–∞–Ω–æ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ –≤ rpi-image-gen –ø—Ä–æ–µ–∫—Ç–µ.