---
alwaysApply: ${cursor.file.path.includes("test/") || cursor.file.path.includes("spec/")}
---


# –ü—Ä–∞–≤–∏–ª–æ 03: –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π

## –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π rpi-image-gen.

## –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### 1. –ú–æ–¥—É–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï
```bash
# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–ª–æ—è
rpi-image-gen layer --describe your-layer-name

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
rpi-image-gen layer --list --depends your-layer-name

# –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
rpi-image-gen metadata --lint layer/your-layer.yaml

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
bash -n hook-script.sh

# –í–∞–ª–∏–¥–∞—Ü–∏—è YAML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
python3 -c "import yaml; yaml.safe_load(open('layer.yaml'))"
```

**–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:**
- [ ] –°–∏–Ω—Ç–∞–∫—Å–∏—Å –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏
- [ ] –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å YAML –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
- [ ] –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å–ª–æ–µ–≤
- [ ] –ù–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
- [ ] –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤

### 2. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï
```bash
# –¢–µ—Å—Ç–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
rpi-image-gen build --dry-run -c test-config.yaml

# –ü–æ–ª–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
rpi-image-gen build -c test-config.yaml \
  -- IGconf_extension_test_mode=true \
  -- IGconf_extension_debug=true

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
rpi-image-gen build -c config-variants.yaml --variant minimal
rpi-image-gen build -c config-variants.yaml --variant full
```

**–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:**
- [ ] –°–±–æ—Ä–∫–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
- [ ] –°–±–æ—Ä–∫–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
- [ ] –°–±–æ—Ä–∫–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫)
- [ ] –°–±–æ—Ä–∫–∞ —Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
- [ ] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É —Å–ª–æ—è–º–∏

### 3. –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï
```bash
# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏
time rpi-image-gen build -c config.yaml

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –æ–±—Ä–∞–∑–∞
du -h work/image-*/image-*.img

# –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
rpi-image-gen build -c config.yaml --perf-report

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
/usr/bin/time -v rpi-image-gen build -c config.yaml
```

**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–µ—Ç—Ä–∏–∫–∏:**
- [ ] –í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏ (–Ω–µ –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç –¥–ª—è —Ç–∏–ø–∏—á–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
- [ ] –†–∞–∑–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ –æ–±—Ä–∞–∑–∞
- [ ] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU –∏ –ø–∞–º—è—Ç–∏
- [ ] –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–±–æ—Ä–∫–∏ (100%)
- [ ] –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

```
tests/
‚îú‚îÄ‚îÄ unit/
‚îÇ   ‚îú‚îÄ‚îÄ test_layer_validation.py      # –í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–µ–≤
‚îÇ   ‚îú‚îÄ‚îÄ test_variable_expansion.py    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
‚îÇ   ‚îî‚îÄ‚îÄ test_dependency_resolution.py # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
‚îú‚îÄ‚îÄ integration/
‚îÇ   ‚îú‚îÄ‚îÄ test_full_build.py           # –ü–æ–ª–Ω–∞—è —Å–±–æ—Ä–∫–∞
‚îÇ   ‚îú‚îÄ‚îÄ test_custom_hooks.py         # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö—É–∫–æ–≤
‚îÇ   ‚îî‚îÄ‚îÄ test_image_boot.py           # –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–∞
‚îî‚îÄ‚îÄ fixtures/
    ‚îú‚îÄ‚îÄ test_configs/                # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    ‚îÇ   ‚îú‚îÄ‚îÄ minimal-config.yaml
    ‚îÇ   ‚îú‚îÄ‚îÄ full-config.yaml
    ‚îÇ   ‚îî‚îÄ‚îÄ invalid-config.yaml
    ‚îî‚îÄ‚îÄ expected_outputs/            # –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        ‚îú‚îÄ‚îÄ layer-metadata.json
        ‚îî‚îÄ‚îÄ build-artifacts/
```

## –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –®–∞–±–ª–æ–Ω —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
```python
#!/usr/bin/env python3
import subprocess
import sys
import os
import tempfile
import shutil

class ExtensionTestSuite:
    def __init__(self, extension_path):
        self.extension_path = extension_path
        self.test_results = []

    def run_test(self, test_name, test_func):
        """–ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        print(f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
        try:
            result = test_func()
            self.test_results.append((test_name, result, None))
            print(f"‚úì {test_name}: {'–ü–†–û–ô–î–ï–ù' if result else '–ü–†–û–í–ê–õ–ï–ù'}")
            return result
        except Exception as e:
            self.test_results.append((test_name, False, str(e)))
            print(f"‚úó {test_name}: –û–®–ò–ë–ö–ê - {e}")
            return False

    def test_extension_build(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"""
        cmd = [
            'rpi-image-gen', 'build',
            '-c', 'tests/fixtures/test-config.yaml',
            '--dry-run'
        ]

        result = subprocess.run(cmd, capture_output=True, text=True)

        if result.returncode != 0:
            print(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {result.stderr}")
            return False

        return True

    def test_layer_validation(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–ª–æ—è"""
        cmd = ['rpi-image-gen', 'metadata', '--lint', f'{self.extension_path}/layer.yaml']
        result = subprocess.run(cmd, capture_output=True, text=True)
        return result.returncode == 0

    def test_dependency_resolution(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        cmd = ['rpi-image-gen', 'layer', '--list', '--depends', 'your-extension-name']
        result = subprocess.run(cmd, capture_output=True, text=True)
        return result.returncode == 0

    def test_variable_expansion(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        test_env = {
            'IGconf_test_var1': 'value1',
            'IGconf_test_var2': 'value2'
        }

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω–∞—Ö
        template = "${IGconf_test_var1}/${IGconf_test_var2}"
        expanded = os.path.expandvars(template)

        return expanded == "value1/value2"

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        tests = [
            ("–°–±–æ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è", self.test_extension_build),
            ("–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ª–æ—è", self.test_layer_validation),
            ("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", self.test_dependency_resolution),
            ("–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö", self.test_variable_expansion),
        ]

        passed = 0
        total = len(tests)

        for test_name, test_func in tests:
            if self.run_test(test_name, test_func):
                passed += 1

        print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        self.generate_report()

        return passed == total

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        report_file = "/tmp/extension-test-report.txt"

        with open(report_file, 'w') as f:
            f.write("–û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è\n")
            f.write("=" * 40 + "\n\n")

            for test_name, result, error in self.test_results:
                status = "–ü–†–û–ô–î–ï–ù" if result else "–ü–†–û–í–ê–õ–ï–ù"
                f.write(f"{test_name}: {status}\n")
                if error:
                    f.write(f"  –û—à–∏–±–∫–∞: {error}\n")
                f.write("\n")

        print(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")

def main():
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 test_extension.py <–ø—É—Ç—å_–∫_—Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é>")
        sys.exit(1)

    extension_path = sys.argv[1]

    if not os.path.exists(extension_path):
        print(f"–ü—É—Ç—å –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {extension_path}")
        sys.exit(1)

    test_suite = ExtensionTestSuite(extension_path)
    success = test_suite.run_all_tests()

    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
```

## –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CI/CD üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### GitHub Actions Workflow
```yaml
name: Build and Test Extension
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y qemu-user-static binfmt-support

    - name: Lint extension
      run: |
        rpi-image-gen metadata --lint layer/*.yaml
        rpi-image-gen layer --lint layer/*.yaml

    - name: Run unit tests
      run: |
        python3 -m pytest tests/unit/ -v

    - name: Build test image
      run: |
        rpi-image-gen build -c tests/test-config.yaml --dry-run

    - name: Generate SBOM
      run: |
        rpi-image-gen build -c config.yaml --sbom
```

### GitLab CI Pipeline
```yaml
stages:
  - validate
  - test
  - build
  - deploy

validate_extension:
  stage: validate
  script:
    - rpi-image-gen metadata --lint layer/*.yaml
    - rpi-image-gen layer --describe $CI_EXTENSION_LAYER

test_extension:
  stage: test
  script:
    - python3 -m pytest tests/ --junitxml=report.xml
  artifacts:
    reports:
      junit: report.xml

build_image:
  stage: build
  script:
    - rpi-image-gen build -c config.yaml
  artifacts:
    paths:
      - work/image-*/image-*.img
    expire_in: 1 week

security_scan:
  stage: build
  script:
    - rpi-image-gen build -c config.yaml --sbom --cve-check
  allow_failure: true
```

## –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
- [ ] –í—Å–µ –º–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç (100% —É—Å–ø–µ—Ö)
- [ ] –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ
- [ ] –°–±–æ—Ä–∫–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –±–µ–∑ –æ—à–∏–±–æ–∫
- [ ] –†–∞–∑–º–µ—Ä –æ–±—Ä–∞–∑–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
- [ ] –í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏ –ø—Ä–∏–µ–º–ª–µ–º–æ–µ

### –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
- [ ] –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞–º–∏ > 80%
- [ ] –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
- [ ] –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
- [ ] –ù–∞–ª–∏—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
- [ ] –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤

### –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
- [ ] –¢–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ CI/CD
- [ ] –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–∞ –∫–∞–∂–¥–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
- [ ] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- [ ] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
- [ ] –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫

## –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ ‚ùå –ó–ê–ü–†–ï–©–ï–ù–´

### –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ "—Å—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –ø—É—Ç–∏"
- –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ edge cases
- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫
- –†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏

### –ù–∞—Ä—É—à–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
- –ü—Ä–æ–ø—É—Å–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤
- –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –ø—Ä–æ–µ–∫—Ç–∞

## –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞
- [ ] –ù–∞–ª–∏—á–∏–µ –ø–æ–ª–Ω–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
- [ ] –†–µ–≥—É–ª—è—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
- [ ] –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
- [ ] –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CI/CD —Å–∏—Å—Ç–µ–º–∞–º–∏
- [ ] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞