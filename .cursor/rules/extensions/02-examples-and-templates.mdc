---
alwaysApply: ${cursor.file.path.includes("examples/") || cursor.file.path.includes("templates/")}
---


# Правило 02: Примеры и шаблоны расширений

## Назначение правила
Предоставляет проверенные шаблоны и примеры для различных типов расширений.

## Обязательные шаблоны расширений 🔴 ОВЯЗАТЕЛЬНЫЕ

### Шаблон: Веб-киоск 🔴 ОВЯЗАТЕЛЬНЫЕ
```yaml
# METABEGIN
# X-Env-Layer-Name: web-kiosk
# X-Env-Layer-Category: extension
# X-Env-Layer-Description: Настройка устройства как веб-киоска
# X-Env-Layer-Version: 1.0.0
# X-Env-Layer-Requires: essential,x11-misc
# X-Env-VarPrefix: kiosk
#
# X-Env-Var-url: https://example.com
# X-Env-Var-url-Description: URL для отображения в киоске
# X-Env-Var-url-Required: true
# X-Env-Var-autostart: true
# X-Env-Var-autostart-Description: Автозапуск киоска при загрузке
# X-Env-Var-autostart-Required: false
# X-Env-Var-autostart-Valid: true,false
# METAEND
---
mmdebstrap:
  packages:
    - chromium-browser
    - unclutter
    - x11-xserver-utils
  setup-hooks:
    - echo "Настройка веб-киоска"
  customize-hooks:
    - |
      # Создание скрипта автозапуска
      cat > /usr/local/bin/start-kiosk.sh << 'EOF'
      #!/bin/bash
      xset s off
      xset s noblank
      xset -dpms
      unclutter -idle 0.5 -root &
      sed -i 's/"exited_cleanly":false/"exited_cleanly":true/' ~/.config/chromium/Default/Preferences
      chromium-browser --noerrdialogs --disable-infobars --kiosk ${IGconf_kiosk_url}
      EOF
      chmod +x /usr/local/bin/start-kiosk.sh
    - |
      # Настройка автозапуска
      if [ "${IGconf_kiosk_autostart}" = "true" ]; then
        mkdir -p /home/${IGconf_device_user}/.config/autostart
        cat > /home/${IGconf_device_user}/.config/autostart/kiosk.desktop << EOF
        [Desktop Entry]
        Type=Application
        Name=Web Kiosk
        Exec=/usr/local/bin/start-kiosk.sh
        EOF
        chown -R ${IGconf_device_user}:${IGconf_device_user} /home/${IGconf_device_user}/.config
      fi
```

### Шаблон: IoT Датчик 🔴 ОВЯЗАТЕЛЬНЫЕ
```yaml
# METABEGIN
# X-Env-Layer-Name: iot-sensor
# X-Env-Layer-Category: extension
# X-Env-Layer-Description: Сбор и отправка данных датчиков
# X-Env-Layer-Version: 1.0.0
# X-Env-Layer-Requires: essential,net-misc
# X-Env-VarPrefix: sensor
#
# X-Env-Var-server_url: https://api.example.com/data
# X-Env-Var-server_url-Description: URL сервера для отправки данных
# X-Env-Var-server_url-Required: true
# X-Env-Var-interval: 60
# X-Env-Var-interval-Description: Интервал сбора данных (секунды)
# X-Env-Var-interval-Required: false
# X-Env-Var-interval-Valid: int:10-3600
# X-Env-Var-enable_tls: true
# X-Env-Var-enable_tls-Description: Использовать TLS для соединений
# X-Env-Var-enable_tls-Required: false
# X-Env-Var-enable_tls-Valid: true,false
# METAEND
---
mmdebstrap:
  packages:
    - python3
    - python3-pip
    - python3-rpi.gpio
    - curl
    - ca-certificates
  setup-hooks:
    - pip3 install requests adafruit-circuitpython-dht paho-mqtt
  customize-hooks:
    - |
      # Создание сервиса сбора данных с поддержкой TLS
      cat > /usr/local/bin/sensor-collector.py << 'EOF'
      #!/usr/bin/env python3
      import time
      import json
      import ssl
      import requests
      import paho.mqtt.client as mqtt
      import adafruit_dht
      import board

      SENSOR_PIN = board.D4
      SERVER_URL = "${IGconf_sensor_server_url}"
      INTERVAL = ${IGconf_sensor_interval}

      def collect_data():
          try:
              dht_device = adafruit_dht.DHT22(SENSOR_PIN)
              temperature = dht_device.temperature
              humidity = dht_device.humidity

              data = {
                  "temperature": temperature,
                  "humidity": humidity,
                  "timestamp": time.time()
              }

              response = requests.post(SERVER_URL, json=data)
              print(f"Данные отправлены: {response.status_code}")
          except Exception as e:
              print(f"Ошибка сбора данных: {e}")

      while True:
          collect_data()
          time.sleep(INTERVAL)
      EOF
      chmod +x /usr/local/bin/sensor-collector.py
    - |
      # Создание systemd сервиса
      cat > /etc/systemd/system/sensor-collector.service << EOF
      [Unit]
      Description=IoT Sensor Data Collector
      After=network.target

      [Service]
      ExecStart=/usr/local/bin/sensor-collector.py
      Restart=always
      User=${IGconf_device_user}

      [Install]
      WantedBy=multi-user.target
      EOF
      systemctl enable sensor-collector.service
```

## Рекомендуемые шаблоны ⚠️ РЕКОМЕНДУЕМЫЕ

### Шаблон: Система мониторинга
```yaml
# METABEGIN
# X-Env-Layer-Name: monitoring-system
# X-Env-Layer-Category: extension
# X-Env-Layer-Description: Комплексная система мониторинга с Grafana и Prometheus
# X-Env-Layer-Version: 1.0.0
# X-Env-Layer-Requires: essential,net-misc
# X-Env-VarPrefix: monitoring
#
# X-Env-Var-retention_days: 30
# X-Env-Var-retention_days-Description: Количество дней хранения метрик
# X-Env-Var-retention_days-Required: false
# X-Env-Var-retention_days-Valid: int:1-365
# X-Env-Var-grafana_port: 3000
# X-Env-Var-grafana_port-Description: Порт Grafana веб-интерфейса
# X-Env-Var-grafana_port-Required: false
# X-Env-Var-grafana_port-Valid: int:1024-65535
# METAEND
---
mmdebstrap:
  packages:
    - prometheus
    - grafana
    - node-exporter
    - prometheus-node-exporter
    - curl
    - wget
  setup-hooks:
    - |
      # Создание пользователя для мониторинга
      useradd --system --shell /bin/false prometheus
      useradd --system --shell /bin/false grafana
  customize-hooks:
    - |
      # Настройка Prometheus
      mkdir -p /etc/prometheus /var/lib/prometheus
      chown prometheus:prometheus /etc/prometheus /var/lib/prometheus

      cat > /etc/prometheus/prometheus.yml << EOF
      global:
        scrape_interval: 15s
        evaluation_interval: 15s

      rule_files:
        # - "first_rules.yml"
        # - "second_rules.yml"

      scrape_configs:
        - job_name: 'prometheus'
          static_configs:
            - targets: ['localhost:9090']

        - job_name: 'node'
          static_configs:
            - targets: ['localhost:9100']

        - job_name: 'rpi-image-gen'
          static_configs:
            - targets: ['localhost:9091']
      EOF
      chown prometheus:prometheus /etc/prometheus/prometheus.yml

    - |
      # Настройка Grafana
      mkdir -p /etc/grafana /var/lib/grafana
      chown grafana:grafana /etc/grafana /var/lib/grafana

      cat > /etc/grafana/grafana.ini << EOF
      [server]
      http_port = ${IGconf_monitoring_grafana_port}

      [database]
      type = sqlite3

      [session]
      provider = file

      [analytics]
      check_for_updates = false
      EOF
      chown grafana:grafana /etc/grafana/grafana.ini

    - |
      # Создание systemd сервисов
      cat > /etc/systemd/system/prometheus.service << EOF
      [Unit]
      Description=Prometheus
      Wants=network-online.target
      After=network-online.target

      [Service]
      User=prometheus
      Group=prometheus
      Type=simple
      ExecStart=/usr/bin/prometheus \
          --config.file /etc/prometheus/prometheus.yml \
          --storage.tsdb.path /var/lib/prometheus/ \
          --web.console.templates=/etc/prometheus/consoles \
          --web.console.libraries=/etc/prometheus/console_libraries \
          --storage.tsdb.retention.time=${IGconf_monitoring_retention_days}d \
          --web.listen-address="0.0.0.0:9090"

      [Install]
      WantedBy=multi-user.target
      EOF

      cat > /etc/systemd/system/grafana-server.service << EOF
      [Unit]
      Description=Grafana Server
      Wants=network-online.target
      After=network-online.target

      [Service]
      User=grafana
      Group=grafana
      Type=simple
      ExecStart=/usr/sbin/grafana-server \
          --config=/etc/grafana/grafana.ini \
          --homepath=/usr/share/grafana \
          --packaging=deb \
          cfg:default.paths.logs=/var/log/grafana \
          cfg:default.paths.data=/var/lib/grafana \
          cfg:default.paths.plugins=/var/lib/grafana/plugins

      [Install]
      WantedBy=multi-user.target
      EOF

      systemctl daemon-reload
      systemctl enable prometheus grafana-server node-exporter
```

### Шаблон: Домашний сервер
```yaml
# METABEGIN
# X-Env-Layer-Name: home-server
# X-Env-Layer-Category: suite
# X-Env-Layer-Description: Комплексное решение для домашнего сервера
# X-Env-Layer-Version: 1.0.0
# X-Env-Layer-Requires: essential,net-misc
# X-Env-VarPrefix: homeserver
#
# X-Env-Var-media_path: /media/storage
# X-Env-Var-media_path-Description: Путь к медиа хранилищу
# X-Env-Var-media_path-Required: false
# X-Env-Var-backup_schedule: daily
# X-Env-Var-backup_schedule-Description: Расписание резервного копирования
# X-Env-Var-backup_schedule-Required: false
# X-Env-Var-backup_schedule-Valid: hourly,daily,weekly,monthly
# METAEND
---
mmdebstrap:
  packages:
    - samba
    - nfs-kernel-server
    - minidlna
    - transmission-daemon
    - rsnapshot
    - nginx
    - php-fpm
    - sqlite3
    - curl
    - wget
  customize-hooks:
    - |
      # Настройка Samba для общих папок
      mkdir -p ${IGconf_homeserver_media_path}
      chmod 755 ${IGconf_homeserver_media_path}

      cat > /etc/samba/smb.conf << EOF
      [global]
      workgroup = WORKGROUP
      server string = %h server
      dns proxy = no
      log file = /var/log/samba/log.%m
      max log size = 1000
      syslog = 0
      panic action = /usr/share/samba/panic-action %d

      [media]
      path = ${IGconf_homeserver_media_path}
      browseable = yes
      writable = yes
      guest ok = no
      valid users = ${IGconf_device_user}
      EOF

    - |
      # Настройка Nextcloud-like интерфейса
      mkdir -p /var/www/html /var/nextcloud/data
      chown -R www-data:www-data /var/www/html /var/nextcloud

      # Создание простого веб-интерфейса для управления файлами
      cat > /var/www/html/index.php << 'EOF'
      <?php
      $media_path = getenv('IGconf_homeserver_media_path') ?: '/media/storage';
      $current_dir = $_GET['dir'] ?? '';
      $path = $media_path . '/' . $current_dir;

      if (isset($_GET['download'])) {
          $file = $media_path . '/' . $_GET['download'];
          if (file_exists($file)) {
              header('Content-Type: application/octet-stream');
              header('Content-Disposition: attachment; filename="' . basename($file) . '"');
              readfile($file);
              exit;
          }
      }
      ?>
      <!DOCTYPE html>
      <html>
      <head>
          <title>Домашний сервер - Файлы</title>
          <meta charset="UTF-8">
          <style>
              body { font-family: Arial, sans-serif; margin: 20px; }
              .file { margin: 5px 0; padding: 10px; background: #f5f5f5; border-radius: 3px; }
              .folder { font-weight: bold; color: #0066cc; }
              .file-size { float: right; color: #666; }
          </style>
      </head>
      <body>
          <h1>Файловый менеджер</h1>
          <div>Текущая директория: <?= htmlspecialchars($current_dir ?: '/') ?></div>

          <?php if ($current_dir): ?>
              <div class="file folder">
                  <a href="?dir=<?= urlencode(dirname($current_dir)) ?>">📁 ..</a>
              </div>
          <?php endif; ?>

          <?php
          if (is_dir($path) && $handle = opendir($path)) {
              while (false !== ($entry = readdir($handle))) {
                  if ($entry != "." && $entry != "..") {
                      $entry_path = $path . '/' . $entry;
                      $is_dir = is_dir($entry_path);
                      $size = $is_dir ? '' : ' (' . formatFileSize(filesize($entry_path)) . ')';

                      echo '<div class="file ' . ($is_dir ? 'folder' : 'file') . '">';
                      if ($is_dir) {
                          echo '<a href="?dir=' . urlencode($current_dir . '/' . $entry) . '">📁 ' . htmlspecialchars($entry) . '</a>';
                      } else {
                          echo '<a href="?download=' . urlencode($current_dir . '/' . $entry) . '">📄 ' . htmlspecialchars($entry) . '</a>';
                          echo '<span class="file-size">' . $size . '</span>';
                      }
                      echo '</div>';
                  }
              }
              closedir($handle);
          }

          function formatFileSize($bytes) {
              $units = ['B', 'KB', 'MB', 'GB', 'TB'];
              $i = 0;
              while ($bytes >= 1024 && $i < 4) {
                  $bytes /= 1024;
                  $i++;
              }
              return round($bytes, 2) . ' ' . $units[$i];
          }
          ?>
      </body>
      </html>
      EOF

    - |
      # Настройка резервного копирования
      mkdir -p /var/backups /etc/cron.${IGconf_homeserver_backup_schedule}

      cat > /usr/local/bin/backup-script.sh << 'EOF'
      #!/bin/bash
      BACKUP_DIR="/var/backups"
      MEDIA_PATH="${IGconf_homeserver_media_path}"
      DATE=$(date +%Y%m%d_%H%M%S)

      # Создание инкрементного бэкапа
      if [ -d "$MEDIA_PATH" ]; then
          echo "Создание резервной копии медиа файлов..."
          rsnapshot -c /etc/rsnapshot.conf ${IGconf_homeserver_backup_schedule}
      fi

      # Очистка старых бэкапов (старше 30 дней)
      find "$BACKUP_DIR" -type f -mtime +30 -delete

      echo "Резервное копирование завершено: $(date)"
      EOF
      chmod +x /usr/local/bin/backup-script.sh

      # Добавление в cron
      echo "0 2 * * * root /usr/local/bin/backup-script.sh" >> /etc/crontab

    - |
      # Настройка сервисов
      systemctl enable smbd nmbd minidlna transmission-daemon nginx php8.2-fpm
      systemctl start smbd nmbd minidlna transmission-daemon nginx php8.2-fpm

  cleanup-hooks:
    - rm -f /etc/samba/smb.conf.bak /etc/grafana/grafana.ini.bak
```

### Шаблон: Debian Trixie Development Environment 🆕 НОВОЕ
```yaml
# METABEGIN
# X-Env-Layer-Name: debian-trixie-dev
# X-Env-Layer-Category: extension
# X-Env-Layer-Description: Среда разработки на базе Debian Trixie
# X-Env-Layer-Version: 1.0.0
# X-Env-Layer-Requires: essential
# X-Env-VarPrefix: trixie_dev
#
# X-Env-Var-enable_rust: true
# X-Env-Var-enable_rust-Description: Установить Rust toolchain
# X-Env-Var-enable_rust-Required: false
# X-Env-Var-enable_rust-Valid: true,false
# X-Env-Var-enable_go: false
# X-Env-Var-enable_go-Description: Установить Go toolchain
# X-Env-Var-enable_go-Required: false
# X-Env-Var-enable_go-Valid: true,false
# METAEND
---
mmdebstrap:
  suite: trixie
  packages:
    - build-essential
    - git
    - vim
    - curl
    - wget
    - python3-dev
    - nodejs
    - npm
  customize-hooks:
    - |
      # Настройка среды разработки для Debian Trixie
      setup_dev_environment() {
        local enable_rust="${IGconf_trixie_dev_enable_rust:-true}"
        local enable_go="${IGconf_trixie_dev_enable_go:-false}"

        # Установка Rust если требуется
        if [[ "$enable_rust" = "true" ]]; then
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          rustup component add rustfmt clippy
        fi

        # Установка Go если требуется
        if [[ "$enable_go" = "true" ]]; then
          wget -O go.tar.gz "https://golang.org/dl/go1.21.0.linux-arm64.tar.gz"
          tar -C /usr/local -xzf go.tar.gz
          echo 'export PATH=$PATH:/usr/local/go/bin' >> /etc/profile
        fi

        # Настройка Python virtualenv wrapper
        pip3 install virtualenvwrapper --break-system-packages
        echo "export WORKON_HOME=/opt/virtualenvs" >> /etc/profile
        echo "source /usr/local/bin/virtualenvwrapper.sh" >> /etc/profile
      }

      setup_dev_environment
```

### Шаблон: A/B Boot System 🆕 НОВОЕ
```yaml
# METABEGIN
# X-Env-Layer-Name: ab-boot-system
# X-Env-Layer-Category: extension
# X-Env-Layer-Description: Система A/B обновлений с tryboot
# X-Env-Layer-Version: 1.0.0
# X-Env-Layer-Requires: essential,rpi-bootloader
# X-Env-VarPrefix: ab_boot
#
# X-Env-Var-tryboot_timeout: 10
# X-Env-Var-tryboot_timeout-Description: Таймаут для tryboot (секунды)
# X-Env-Var-tryboot_timeout-Required: false
# X-Env-Var-tryboot_timeout-Valid: int:5-60
# X-Env-Var-enable_fallback: true
# X-Env-Var-enable_fallback-Description: Включить fallback на предыдущий слот
# X-Env-Var-enable_fallback-Required: false
# X-Env-Var-enable_fallback-Valid: true,false
# METAEND
---
mmdebstrap:
  packages:
    - raspberrypi-bootloader
    - rpi-eeprom
    - u-boot-tools
  customize-hooks:
    - |
      # Настройка A/B boot системы
      setup_ab_boot() {
        local tryboot_timeout="${IGconf_ab_boot_tryboot_timeout:-10}"
        local enable_fallback="${IGconf_ab_boot_enable_fallback:-true}"

        # Создание конфигурации tryboot
        cat > /boot/tryboot.txt << EOF
[all]
boot_delay=0
dtoverlay=vc4-fkms-v3d
kernel=kernel8.img
initramfs initrd.img followkernel
EOF

        # Настройка EEPROM для A/B
        rpi-eeprom-config --edit << EOF
BOOT_ORDER=0xf21
TFTP_PREFIX=tryboot
BOOT_DELAY=0
TFTP_ENABLED=1
EOF

        # Настройка systemd для обновлений
        cat > /etc/systemd/system/rpi-ab-update.service << EOF
[Unit]
Description=Raspberry Pi A/B Update Service
After=network.target

[Service]
Type=oneshot
ExecStart=/usr/local/bin/rpi-ab-update.sh
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF

        chmod +x /etc/systemd/system/rpi-ab-update.service
        systemctl enable rpi-ab-update
      }

      setup_ab_boot
    - |
      # Создание скрипта обновления
      cat > /usr/local/bin/rpi-ab-update.sh << 'EOF'
#!/bin/bash
set -euo pipefail

# Определение текущего и целевого слота
CURRENT_SLOT=$(rpi-eeprom-config | grep -o "BOOT_ORDER=.*" | cut -d= -f2)
TARGET_SLOT=""

if [[ "$CURRENT_SLOT" == "0xf21" ]]; then
    TARGET_SLOT="0xf12"
else
    TARGET_SLOT="0xf21"
fi

echo "Переключение на слот: $TARGET_SLOT"

# Логика переключения слотов
rpi-eeprom-config --edit "BOOT_ORDER=$TARGET_SLOT"

# Перезагрузка для применения
shutdown -r now
EOF
      chmod +x /usr/local/bin/rpi-ab-update.sh
```

### Шаблон: Modern IoT Gateway 🆕 НОВОЕ
```yaml
# METABEGIN
# X-Env-Layer-Name: iot-gateway-modern
# X-Env-Layer-Category: extension
# X-Env-Layer-Description: Современный IoT шлюз с MQTT и TLS
# X-Env-Layer-Version: 1.0.0
# X-Env-Layer-Requires: essential,net-misc
# X-Env-VarPrefix: iot_gw
#
# X-Env-Var-mqtt_broker: mqtt.example.com
# X-Env-Var-mqtt_broker-Description: MQTT брокер для подключения
# X-Env-Var-mqtt_broker-Required: true
# X-Env-Var-mqtt_port: 8883
# X-Env-Var-mqtt_port-Description: Порт MQTT брокера
# X-Env-Var-mqtt_port-Required: false
# X-Env-Var-mqtt_port-Valid: int:1883,8883
# X-Env-Var-enable_tls: true
# X-Env-Var-enable_tls-Description: Использовать TLS для MQTT
# X-Env-Var-enable_tls-Required: false
# X-Env-Var-enable_tls-Valid: true,false
# METAEND
---
mmdebstrap:
  packages:
    - mosquitto-clients
    - python3-paho-mqtt
    - python3-cryptography
    - ca-certificates
    - curl
    - jq
  customize-hooks:
    - |
      # Настройка IoT шлюза
      setup_iot_gateway() {
        local mqtt_broker="${IGconf_iot_gw_mqtt_broker}"
        local mqtt_port="${IGconf_iot_gw_mqtt_port:-8883}"
        local enable_tls="${IGconf_iot_gw_enable_tls:-true}"

        # Создание MQTT клиента с TLS
        cat > /usr/local/bin/iot-gateway.py << EOF
#!/usr/bin/env python3
import paho.mqtt.client as mqtt
import ssl
import json
import time
import subprocess

def on_connect(client, userdata, flags, rc):
    print(f"Connected to MQTT broker with result code {rc}")
    client.subscribe("iot/devices/+/status")

def on_message(client, userdata, msg):
    print(f"Received message: {msg.topic} {msg.payload}")
    # Обработка входящих сообщений от устройств

def main():
    client = mqtt.Client()
    client.on_connect = on_connect
    client.on_message = on_message

    if "${enable_tls}" == "true":
        client.tls_set(ca_certs=None, certfile=None, keyfile=None,
                      cert_reqs=ssl.CERT_REQUIRED,
                      tls_version=ssl.PROTOCOL_TLS, ciphers=None)
        client.tls_insecure_set(False)

    client.connect("${mqtt_broker}", ${mqtt_port}, 60)
    client.loop_forever()

if __name__ == "__main__":
    main()
EOF

        chmod +x /usr/local/bin/iot-gateway.py

        # Создание systemd сервиса
        cat > /etc/systemd/system/iot-gateway.service << EOF
[Unit]
Description=IoT Gateway Service
After=network.target

[Service]
ExecStart=/usr/local/bin/iot-gateway.py
Restart=always
User=iot-gateway

[Install]
WantedBy=multi-user.target
EOF

        # Создание пользователя для сервиса
        useradd --system --shell /bin/false --home /var/lib/iot-gateway iot-gateway
        systemctl enable iot-gateway
      }

      setup_iot_gateway
```

## Правила использования шаблонов 🔴 ОВЯЗАТЕЛЬНЫЕ

### Адаптация шаблонов
1. **Изменение метаданных**: Обновите название, описание, версию
2. **Настройка переменных**: Добавьте специфичные для вашего случая переменные
3. **Валидация зависимостей**: Убедитесь, что все зависимости доступны
4. **Тестирование**: Проверьте работу на тестовом окружении

### Запрещенные модификации
- Удаление обязательных полей из METABEGIN блока
- Изменение префиксов переменных без обновления кода
- Игнорирование требований к зависимостям
- Нарушение структуры mmdebstrap секции

## Метрики качества шаблонов
- [ ] Полная документация всех переменных
- [ ] Обработка ошибок и edge cases
- [ ] Безопасная работа с переменными окружения
- [ ] Соответствие стандартам категории
- [ ] Наличие примеров использования