---
alwaysApply: ${cursor.file.path.includes("layer/device/") ? "device" : cursor.file.path.includes("layer/image/") ? "image" : "general"}
---


# Правило 05: Лучшие практики для типов расширений

## Назначение правила
Определяет специфические рекомендации для разработки различных типов расширений rpi-image-gen.

## Расширения устройств (Device Extensions) 🔴 ОВЯЗАТЕЛЬНЫЕ

### Основные принципы
1. **Минимизация драйверов** - включать только необходимые модули ядра
2. **Версионная совместимость** - поддерживать несколько версий устройств
3. **Тестирование на hardware** - обязательное тестирование на целевых устройствах

### Структура расширения устройства
```
device/{device_name}/
├── device.yaml                    # Основная конфигурация устройства
├── device.adoc                    # Документация устройства
├── bdebstrap/                     # Хуки этапов сборки
│   ├── setup*                    # Настройка специфичных пакетов
│   ├── customize*                # Конфигурация устройства
│   └── cleanup*                  # Очистка
├── initramfs-tools/              # Специфичные настройки initramfs
└── rootfs-overlay/               # Оверлеи файловой системы
```

### Пример расширения для Raspberry Pi 5
```yaml
# METABEGIN
# X-Env-Layer-Name: rpi5
# X-Env-Layer-Category: device
# X-Env-Layer-Description: Специфическая поддержка Raspberry Pi 5
# X-Env-Layer-Version: 1.0.0
# X-Env-Layer-Requires: essential,rpi-base
# X-Env-VarPrefix: rpi5
#
# X-Env-Var-firmware_version: latest
# X-Env-Var-firmware_version-Description: Версия firmware для загрузки
# X-Env-Var-firmware_version-Required: false
# X-Env-Var-firmware_version-Valid: latest,stable,beta
# METAEND
---
mmdebstrap:
  packages:
    - raspberrypi-bootloader
    - raspberrypi-kernel
    - linux-firmware-raspi
  customize-hooks:
    - |
      # Настройка специфичных для Pi 5 параметров
      echo "Настройка Raspberry Pi 5"

      # Активация специфичных модулей ядра
      cat >> /etc/modules << 'EOF'
      bcm2712_wdt
      bcm2712_thermal
      EOF

      # Настройка firmware
      if [[ "${IGconf_rpi5_firmware_version}" = "latest" ]]; then
        rpi-eeprom-update -a
      fi

      # Оптимизация производительности
      cat > /etc/sysctl.d/99-rpi5-performance.conf << 'EOF'
      # Оптимизации для Raspberry Pi 5
      vm.swappiness=10
      vm.vfs_cache_pressure=50
      net.core.rmem_max=262144
      net.core.wmem_max=262144
      EOF
```

### Требования к тестированию устройств
- [ ] Тестирование на целевом hardware
- [ ] Проверка совместимости с разными версиями ОС
- [ ] Валидация производительности
- [ ] Тестирование энергопотребления
- [ ] Проверка температурных режимов

## Расширения приложений (Application Extensions) 🔴 ОВЯЗАТЕЛЬНЫЕ

### Основные принципы
1. **Контейнеризация** - использовать Docker для изоляции приложений
2. **Конфигурационные файлы** - выносить настройки в переменные окружения
3. **Логирование** - настраивать ротацию логов и уровни детализации

### Структура расширения приложения
```
application/{app_name}/
├── app.yaml                       # Метаданные приложения
├── docker/                        # Docker конфигурация
│   ├── Dockerfile
│   ├── docker-compose.yml
│   └── .env.template
├── config/                        # Конфигурационные файлы
├── logs/                          # Настройки логирования
└── scripts/                       # Скрипты управления
```

### Пример расширения веб-приложения
```yaml
# METABEGIN
# X-Env-Layer-Name: web-application
# X-Env-Layer-Category: extension
# X-Env-Layer-Description: Универсальное веб-приложение
# X-Env-Layer-Version: 1.0.0
# X-Env-Layer-Requires: essential,net-misc,docker
# X-Env-VarPrefix: webapp
#
# X-Env-Var-app_port: 8080
# X-Env-Var-app_port-Description: Порт веб-приложения
# X-Env-Var-app_port-Required: false
# X-Env-Var-app_port-Valid: int:1024-65535
#
# X-Env-Var-db_type: sqlite
# X-Env-Var-db_type-Description: Тип базы данных
# X-Env-Var-db_type-Required: false
# X-Env-Var-db_type-Valid: sqlite,postgresql,mysql
# METAEND
---
mmdebstrap:
  packages:
    - docker.io
    - docker-compose
    - nginx
    - certbot
  setup-hooks:
    - systemctl enable docker
  customize-hooks:
    - |
      # Создание директорий приложения
      mkdir -p /opt/webapp /var/log/webapp /var/lib/webapp/data

      # Настройка Docker Compose
      cat > /opt/webapp/docker-compose.yml << EOF
      version: '3.8'
      services:
        webapp:
          build: .
          ports:
            - "${IGconf_webapp_app_port}:8080"
          environment:
            - DB_TYPE=${IGconf_webapp_db_type}
          volumes:
            - /var/lib/webapp/data:/app/data
          restart: unless-stopped
      EOF

      # Настройка Nginx как reverse proxy
      cat > /etc/nginx/sites-available/webapp << EOF
      server {
          listen 80;
          server_name localhost;

          location / {
              proxy_pass http://localhost:${IGconf_webapp_app_port};
              proxy_set_header Host \$host;
              proxy_set_header X-Real-IP \$remote_addr;
          }
      }
      EOF
      ln -sf /etc/nginx/sites-available/webapp /etc/nginx/sites-enabled/

      # Настройка логирования
      cat > /etc/logrotate.d/webapp << EOF
      /var/log/webapp/*.log {
          daily
          missingok
          rotate 7
          compress
          notifempty
          create 0644 www-data www-data
          postrotate
              systemctl reload nginx
          endscript
      }
      EOF

    - |
      # Создание systemd сервиса для управления приложением
      cat > /etc/systemd/system/webapp.service << EOF
      [Unit]
      Description=Web Application Service
      After=docker.service
      Requires=docker.service

      [Service]
      Type=oneshot
      RemainAfterExit=yes
      WorkingDirectory=/opt/webapp
      ExecStart=/usr/bin/docker-compose up -d
      ExecStop=/usr/bin/docker-compose down
      ExecReload=/usr/bin/docker-compose restart

      [Install]
      WantedBy=multi-user.target
      EOF

      systemctl enable webapp
```

### Требования к приложениям
- [ ] Контейнеризация для изоляции
- [ ] Настраиваемое логирование
- [ ] Управление конфигурацией через переменные
- [ ] Автоматические обновления
- [ ] Мониторинг здоровья приложения

## Расширения инфраструктуры (Infrastructure Extensions) 🔴 ОВЯЗАТЕЛЬНЫЕ

### Основные принципы
1. **Идемпотентность** - скрипты должны выполняться многократно без ошибок
2. **Восстановление после сбоев** - автоматический перезапуск сервисов
3. **Мониторинг** - интеграция с системами мониторинга (Prometheus, Grafana)

### Структура инфраструктурного расширения
```
infrastructure/{infra_name}/
├── infra.yaml                     # Метаданные инфраструктуры
├── monitoring/                    # Системы мониторинга
│   ├── prometheus/
│   ├── grafana/
│   └── exporters/
├── networking/                    # Сетевая конфигурация
├── security/                      # Безопасность
└── backup/                        # Резервное копирование
```

### Пример инфраструктурного расширения
```yaml
# METABEGIN
# X-Env-Layer-Name: production-infrastructure
# X-Env-Layer-Category: suite
# X-Env-Layer-Description: Полная инфраструктура для продакшена
# X-Env-Layer-Version: 2.0.0
# X-Env-Layer-Requires: essential,net-misc,monitoring
# X-Env-VarPrefix: infra
#
# X-Env-Var-monitoring_retention: 30d
# X-Env-Var-monitoring_retention-Description: Период хранения метрик
# X-Env-Var-monitoring_retention-Required: false
# X-Env-Var-monitoring_retention-Valid: regex:^\d+[dhm]$
#
# X-Env-Var-backup_schedule: daily
# X-Env-Var-backup_schedule-Description: Расписание резервного копирования
# X-Env-Var-backup_schedule-Required: false
# X-Env-Var-backup_schedule-Valid: hourly,daily,weekly
# METAEND
---
mmdebstrap:
  packages:
    - prometheus
    - prometheus-node-exporter
    - grafana
    - rsnapshot
    - fail2ban
    - unattended-upgrades
    - logrotate
  customize-hooks:
    - |
      # Настройка Prometheus (идемпотентная)
      mkdir -p /etc/prometheus /var/lib/prometheus
      chown prometheus:prometheus /etc/prometheus /var/lib/prometheus

      # Создание конфигурации только если не существует
      if [[ ! -f /etc/prometheus/prometheus.yml ]]; then
        cat > /etc/prometheus/prometheus.yml << EOF
        global:
          scrape_interval: 15s
          evaluation_interval: 15s

        scrape_configs:
          - job_name: 'node'
            static_configs:
              - targets: ['localhost:9100']
        EOF
        chown prometheus:prometheus /etc/prometheus/prometheus.yml
      fi

    - |
      # Настройка Grafana
      mkdir -p /etc/grafana /var/lib/grafana
      chown grafana:grafana /etc/grafana /var/lib/grafana

      # Идемпотентная настройка
      if [[ ! -f /etc/grafana/grafana.ini ]]; then
        cat > /etc/grafana/grafana.ini << EOF
        [server]
        http_port = 3000
        [database]
        type = sqlite3
        [analytics]
        check_for_updates = false
        EOF
        chown grafana:grafana /etc/grafana/grafana.ini
      fi

    - |
      # Настройка резервного копирования
      mkdir -p /var/backups

      cat > /usr/local/bin/infrastructure-backup.sh << 'EOF'
      #!/bin/bash
      set -eu

      BACKUP_DIR="/var/backups"
      DATE=$(date +%Y%m%d_%H%M%S)

      # Создание бэкапа системных конфигураций
      tar -czf "${BACKUP_DIR}/system-config-${DATE}.tar.gz" \
        /etc/prometheus \
        /etc/grafana \
        /etc/fail2ban \
        /etc/logrotate.d

      # Очистка старых бэкапов (старше 30 дней)
      find "$BACKUP_DIR" -name "*.tar.gz" -mtime +30 -delete

      echo "Infrastructure backup completed: $DATE"
      EOF
      chmod +x /usr/local/bin/infrastructure-backup.sh

    - |
      # Настройка расписания резервного копирования
      case "${IGconf_infra_backup_schedule}" in
        hourly)
          cron_schedule="0 * * * *"
          ;;
        daily)
          cron_schedule="0 2 * * *"
          ;;
        weekly)
          cron_schedule="0 2 * * 0"
          ;;
        *)
          cron_schedule="0 2 * * *"
          ;;
      esac

      echo "$cron_schedule root /usr/local/bin/infrastructure-backup.sh" > /etc/cron.d/infrastructure-backup

    - |
      # Создание сервисов с автоматическим восстановлением
      cat > /etc/systemd/system/infrastructure-monitor.service << EOF
      [Unit]
      Description=Infrastructure Monitoring Service
      After=network.target

      [Service]
      Type=simple
      ExecStart=/usr/local/bin/infrastructure-monitor.sh
      Restart=always
      RestartSec=10
      StartLimitInterval=300
      StartLimitBurst=3

      [Install]
      WantedBy=multi-user.target
      EOF

      # Скрипт мониторинга инфраструктуры
      cat > /usr/local/bin/infrastructure-monitor.sh << 'EOF'
      #!/bin/bash
      while true; do
        # Проверка критических сервисов
        for service in prometheus grafana fail2ban; do
          if ! systemctl is-active --quiet "$service"; then
            echo "$(date): Service $service is down, restarting..."
            systemctl restart "$service"
          fi
        done

        # Проверка дискового пространства
        disk_usage=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
        if [[ $disk_usage -gt 90 ]]; then
          echo "$(date): Disk usage critical: ${disk_usage}%, cleaning up..."
          journalctl --vacuum-time=7d
          apt-get autoremove -y
          apt-get autoclean -y
        fi

        sleep 300
      done
      EOF
      chmod +x /usr/local/bin/infrastructure-monitor.sh

      systemctl daemon-reload
      systemctl enable prometheus grafana prometheus-node-exporter infrastructure-monitor
```

### Требования к инфраструктуре
- [ ] Идемпотентность всех операций
- [ ] Автоматическое восстановление сервисов
- [ ] Комплексный мониторинг
- [ ] Регулярное резервное копирование
- [ ] Управление ресурсами системы

## Расширения образов (Image Extensions) 🔴 ОВЯЗАТЕЛЬНЫЕ

### Основные принципы
1. **Стандартизация структуры** - следовать определенным шаблонам
2. **Поддержка нескольких ФС** - ext4, btrfs, f2fs
3. **Гибкость конфигурации** - параметризация размеров и типов

### Структура расширения образа
```
image/{partition_scheme}/{image_name}/
├── image.yaml                    # Метаданные слоя
├── genimage.cfg.in.ext4         # Шаблон для ext4
├── genimage.cfg.in.btrfs        # Шаблон для btrfs
├── pre-image.sh                 # Подготовка образа
├── setup.sh                     # Настройка разделов
├── mke2fs.conf                  # Конфигурация ext4
└── device/                      # Специфичные настройки
    ├── provisionmap-*.json      # Карты предоставления
    └── *.rules                  # Правила udev
```

### Требования к образам
- [ ] Поддержка нескольких типов разделов (MBR/GPT)
- [ ] Гибкая настройка размеров разделов
- [ ] Валидация совместимости оборудования
- [ ] Оптимизация для конкретных сценариев использования

## Общие требования для всех типов 🔴 ОВЯЗАТЕЛЬНЫЕ

### Качество кода
- [ ] Статический анализ кода (shellcheck, pylint)
- [ ] Автоматизированные тесты
- [ ] Документация API и интерфейсов
- [ ] Обработка ошибок и edge cases

### Безопасность
- [ ] Минимизация привилегий
- [ ] Валидация входных данных
- [ ] Безопасное хранение секретов
- [ ] Регулярные обновления зависимостей

### Производительность
- [ ] Оптимизация времени сборки
- [ ] Эффективное использование ресурсов
- [ ] Масштабируемость решений
- [ ] Мониторинг производительности

### Поддерживаемость
- [ ] Четкая модульная структура
- [ ] Исчерпывающая документация
- [ ] Автоматизированное тестирование
- [ ] Простота внесения изменений

## Специфические паттерны для типов расширений

### Паттерн для устройств: Hardware Abstraction
```bash
# Абстракция hardware-specific операций
device_specific_operation() {
    local device_type="$1"
    local operation="$2"

    case "$device_type" in
        rpi4)
            rpi4_"$operation"
            ;;
        rpi5)
            rpi5_"$operation"
            ;;
        *)
            generic_"$operation"
            ;;
    esac
}

rpi5_configure_firmware() {
    # Специфичная для Pi 5 конфигурация
    rpi-eeprom-update -a
    configure_pcie_device_tree
}

rpi4_configure_firmware() {
    # Специфичная для Pi 4 конфигурация
    rpi-eeprom-update -d /lib/firmware/raspberrypi/bootloader/stable
}
```

### Паттерн для приложений: Configuration Management
```bash
# Управление конфигурацией приложений
manage_app_config() {
    local app_name="$1"
    local config_template="$2"
    local config_output="$3"

    # Загрузка переменных окружения
    load_environment_variables "$app_name"

    # Применение шаблона
    envsubst < "$config_template" > "$config_output"

    # Валидация конфигурации
    validate_config "$config_output"
}

# Пример использования
manage_app_config "webapp" "config.template" "/etc/webapp/config.yml"
```

### Паттерн для инфраструктуры: Service Orchestration
```bash
# Оркестрация сервисов инфраструктуры
orchestrate_infrastructure() {
    local services=("$@")

    # Проверка зависимостей
    check_service_dependencies "${services[@]}"

    # Последовательный запуск сервисов
    for service in "${services[@]}"; do
        start_service_with_retry "$service"
        wait_for_service_health "$service"
    done

    # Проверка целостности инфраструктуры
    verify_infrastructure_integrity
}

# Пример использования
orchestrate_infrastructure prometheus grafana node-exporter
```

## Метрики соблюдения правила 🔴 ОВЯЗАТЕЛЬНЫЕ

### Для каждого типа расширения
- [ ] Соблюдение специфических принципов типа
- [ ] Корректная структура каталогов
- [ ] Наличие всех обязательных компонентов
- [ ] Тестирование на целевых платформах
- [ ] Документация специфических особенностей

### Общие метрики качества
- [ ] Прохождение всех автоматических тестов
- [ ] Соответствие стандартам безопасности
- [ ] Оптимальная производительность
- [ ] Высокая поддерживаемость кода
- [ ] Полная документированность