---
alwaysApply: ${cursor.file.path.includes("ansible/") || cursor.file.path.includes("terraform/")}
---


# –ü—Ä–∞–≤–∏–ª–æ 07: –ü—Ä–æ—Ü–µ–¥—É—Ä—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π

## –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π rpi-image-gen.

## –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï
```bash
#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

prepare_extension_for_release() {
    local extension_name="$1"
    local version="$2"

    echo "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è $extension_name –∫ —Ä–µ–ª–∏–∑—É $version"

    # 1. –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    echo "–ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤..."
    if ! run_comprehensive_tests "$extension_name"; then
        echo "–û–®–ò–ë–ö–ê: –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã"
        exit 1
    fi

    # 2. –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."
    if ! validate_documentation "$extension_name"; then
        echo "–û–®–ò–ë–ö–ê: –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è"
        exit 1
    fi

    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Ä–µ–ª–∏–∑–∞
    echo "–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Ä–µ–ª–∏–∑–∞..."
    create_release_archive "$extension_name" "$version"

    # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å—É–º–º
    echo "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å—É–º–º..."
    generate_checksums "$extension_name" "$version"

    # 5. –°–æ–∑–¥–∞–Ω–∏–µ CHANGELOG
    echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CHANGELOG..."
    update_changelog "$extension_name" "$version"

    echo "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

run_comprehensive_tests() {
    local extension_name="$1"

    # –ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    python3 -m pytest tests/unit/ -v --tb=short

    # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    rpi-image-gen build -c tests/integration-config.yaml --dry-run

    # –¢–µ—Å—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    test_compatibility_matrix "$extension_name"

    # –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    test_performance_regression "$extension_name"
}

validate_documentation() {
    local extension_name="$1"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    local required_files=("README.md" "CHANGELOG.md" "LICENSE" "layer/${extension_name}.yaml")

    for file in "${required_files[@]}"; do
        if [[ ! -f "$file" ]]; then
            echo "–û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª: $file"
            return 1
        fi
    done

    # –í–∞–ª–∏–¥–∞—Ü–∏—è README.md
    if ! grep -q "## –£—Å—Ç–∞–Ω–æ–≤–∫–∞" README.md; then
        echo "–û–®–ò–ë–ö–ê: README.md –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–¥–µ–ª —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    if command -v markdown-link-check >/dev/null 2>&1; then
        markdown-link-check README.md
    fi

    return 0
}

create_release_archive() {
    local extension_name="$1"
    local version="$2"

    local archive_name="${extension_name}-${version}.tar.gz"
    local temp_dir="/tmp/release-${extension_name}"

    mkdir -p "$temp_dir"

    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Ä–µ–ª–∏–∑–∞
    cp -r layer/ "$temp_dir/"
    cp -r config/ "$temp_dir/"
    cp -r tests/ "$temp_dir/"
    cp README.md CHANGELOG.md LICENSE "$temp_dir/"

    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
    tar -czf "$archive_name" -C "$temp_dir" .

    # –û—á–∏—Å—Ç–∫–∞
    rm -rf "$temp_dir"

    echo "–ê—Ä—Ö–∏–≤ —Ä–µ–ª–∏–∑–∞ —Å–æ–∑–¥–∞–Ω: $archive_name"
}

generate_checksums() {
    local extension_name="$1"
    local version="$2"

    local archive_name="${extension_name}-${version}.tar.gz"
    local checksum_file="${archive_name}.sha256"

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SHA256 –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
    sha256sum "$archive_name" > "$checksum_file"

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å—É–º–º
    md5sum "$archive_name" > "${archive_name}.md5"
    sha1sum "$archive_name" > "${archive_name}.sha1"

    echo "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã"
}
```

### 2. –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï
```markdown
# –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
MAJOR.MINOR.PATCH

- **MAJOR**: –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è API, –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
- **MINOR**: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏, –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
- **PATCH**: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫, –º–µ–ª–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è

## –ü—Ä–∏–º–µ—Ä—ã –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

### –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:
- `1.0.0` ‚Üí `1.1.0` (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏)
- `1.1.0` ‚Üí `1.1.1` (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏)
- `1.1.0` ‚Üí `2.0.0` (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)

### –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:
- `1.0.0` ‚Üí `1.0.1` (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ–ª—å—à–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏)
- `1.0.0` ‚Üí `1.1.0` (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
- `1.0.0` ‚Üí `2.0.0` (–º–µ–ª–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
```

### –°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏
```bash
#!/bin/bash
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏—è–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

manage_extension_version() {
    local action="$1"
    local extension_name="$2"

    case "$action" in
        "bump-major")
            bump_version "$extension_name" "major"
            ;;
        "bump-minor")
            bump_version "$extension_name" "minor"
            ;;
        "bump-patch")
            bump_version "$extension_name" "patch"
            ;;
        "get")
            get_current_version "$extension_name"
            ;;
        "validate")
            validate_version_consistency "$extension_name"
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {bump-major|bump-minor|bump-patch|get|validate} extension-name"
            exit 1
            ;;
    esac
}

bump_version() {
    local extension_name="$1"
    local bump_type="$2"

    local current_version=$(get_current_version "$extension_name")
    local new_version=$(increment_version "$current_version" "$bump_type")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    sed -i "s/X-Env-Layer-Version:.*/X-Env-Layer-Version: ${new_version}/" "layer/${extension_name}.yaml"

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CHANGELOG.md
    update_changelog_entry "$new_version"

    # –°–æ–∑–¥–∞–Ω–∏–µ git —Ç–µ–≥–∞
    git add "layer/${extension_name}.yaml" CHANGELOG.md
    git commit -m "Bump version to ${new_version}"
    git tag -a "v${new_version}" -m "Release version ${new_version}"

    echo "–í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: $current_version ‚Üí $new_version"
}

increment_version() {
    local version="$1"
    local bump_type="$2"

    IFS='.' read -ra VERSION_PARTS <<< "$version"
    local major=${VERSION_PARTS[0]}
    local minor=${VERSION_PARTS[1]}
    local patch=${VERSION_PARTS[2]}

    case "$bump_type" in
        "major")
            echo "$((major + 1)).0.0"
            ;;
        "minor")
            echo "${major}.$((minor + 1)).0"
            ;;
        "patch")
            echo "${major}.${minor}.$((patch + 1))"
            ;;
    esac
}

get_current_version() {
    local extension_name="$1"

    grep "X-Env-Layer-Version:" "layer/${extension_name}.yaml" | sed 's/.*: //' | tr -d ' '
}

validate_version_consistency() {
    local extension_name="$1"

    local metadata_version=$(get_current_version "$extension_name")
    local git_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")

    if [[ "$git_tag" != "v$metadata_version" && "$git_tag" != "none" ]]; then
        echo "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–µ—Ä—Å–∏–π"
        echo "  –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: $metadata_version"
        echo "  Git tag: $git_tag"
        return 1
    fi

    echo "–í–µ—Ä—Å–∏–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã: $metadata_version"
}
```

### 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–æ–≤ üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï
```bash
#!/bin/bash
# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

create_extension_release() {
    local extension_name="$1"
    local version="$2"
    local release_notes="$3"

    echo "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ $extension_name –≤–µ—Ä—Å–∏–∏ $version"

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    prepare_extension_for_release "$extension_name" "$version"

    # –°–æ–∑–¥–∞–Ω–∏–µ git —Ç–µ–≥–∞
    git tag -a "v$version" -m "Release version $version"

    # Push —Ç–µ–≥–∞
    git push origin "v$version"

    # –°–æ–∑–¥–∞–Ω–∏–µ GitHub —Ä–µ–ª–∏–∑–∞
    if command -v gh >/dev/null 2>&1; then
        gh release create "v$version" \
            --title "Release v$version" \
            --notes-file "$release_notes" \
            --latest
    fi

    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ —Ä–µ–µ—Å—Ç—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    if [[ -n "${REGISTRY_URL:-}" ]]; then
        publish_to_registry "$extension_name" "$version"
    fi

    echo "–†–µ–ª–∏–∑ $version —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"
}

publish_to_registry() {
    local extension_name="$1"
    local version="$2"

    local archive="${extension_name}-${version}.tar.gz"
    local checksum="${archive}.sha256"

    # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ —Ä–µ–µ—Å—Ç—Ä
    curl -X POST "${REGISTRY_URL}/api/extensions" \
        -H "Authorization: Bearer ${REGISTRY_TOKEN}" \
        -F "extension=@${archive}" \
        -F "checksum=@${checksum}" \
        -F "metadata=$(cat layer/${extension_name}.yaml)"

    echo "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ —Ä–µ–µ—Å—Ç—Ä–µ: ${extension_name}@${version}"
}
```

## –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –°–ø–æ—Å–æ–±—ã —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è
- **–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥**: Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ (GitHub, GitLab, Bitbucket)
- **–ë–∏–Ω–∞—Ä–Ω—ã–µ –ø–∞–∫–µ—Ç—ã**: DEB/RPM –ø–∞–∫–µ—Ç—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–æ–≤
- **–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã**: Docker –æ–±—Ä–∞–∑—ã –¥–ª—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
- **–†–µ–µ—Å—Ç—Ä—ã**: –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–µ—Å—Ç—Ä—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π rpi-image-gen

### –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è
```bash
#!/bin/bash
# –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

distribute_extension() {
    local extension_name="$1"
    local version="$2"
    local distribution_method="$3"

    case "$distribution_method" in
        "source")
            distribute_source_code "$extension_name" "$version"
            ;;
        "packages")
            create_binary_packages "$extension_name" "$version"
            ;;
        "docker")
            create_docker_images "$extension_name" "$version"
            ;;
        "registry")
            publish_to_extension_registry "$extension_name" "$version"
            ;;
        "all")
            distribute_source_code "$extension_name" "$version"
            create_binary_packages "$extension_name" "$version"
            create_docker_images "$extension_name" "$version"
            publish_to_extension_registry "$extension_name" "$version"
            ;;
        *)
            echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è: $distribution_method"
            echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã: source, packages, docker, registry, all"
            exit 1
            ;;
    esac
}

distribute_source_code() {
    local extension_name="$1"
    local version="$2"

    echo "–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞..."

    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤
    git archive --format=tar.gz --prefix="${extension_name}-${version}/" \
        -o "${extension_name}-${version}-source.tar.gz" "v$version"

    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ GitHub Releases
    gh release upload "v$version" "${extension_name}-${version}-source.tar.gz"
}

create_binary_packages() {
    local extension_name="$1"
    local version="$2"

    echo "–°–æ–∑–¥–∞–Ω–∏–µ –±–∏–Ω–∞—Ä–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤..."

    # –°–æ–∑–¥–∞–Ω–∏–µ DEB –ø–∞–∫–µ—Ç–∞
    create_deb_package "$extension_name" "$version"

    # –°–æ–∑–¥–∞–Ω–∏–µ RPM –ø–∞–∫–µ—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    create_rpm_package "$extension_name" "$version"
}

create_docker_images() {
    local extension_name="$1"
    local version="$2"

    echo "–°–æ–∑–¥–∞–Ω–∏–µ Docker –æ–±—Ä–∞–∑–æ–≤..."

    # –°–æ–∑–¥–∞–Ω–∏–µ Dockerfile
    cat > Dockerfile << EOF
FROM debian:bookworm-slim

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN apt-get update && apt-get install -y \\
    rpi-image-gen \\
    && rm -rf /var/lib/apt/lists/*

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
COPY layer/${extension_name}.yaml /opt/rpi-image-gen/layer/
COPY config/ /opt/rpi-image-gen/config/

# –ú–µ—Ç–∫–∏
LABEL maintainer="Your Name <your.email@example.com>"
LABEL version="${version}"
LABEL extension="${extension_name}"

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
ENTRYPOINT ["rpi-image-gen", "build"]
CMD ["-c", "/opt/rpi-image-gen/config/default.yaml"]
EOF

    # –°–±–æ—Ä–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—Ä–∞–∑–∞
    docker build -t "${extension_name}:${version}" .
    docker tag "${extension_name}:${version}" "your-registry/${extension_name}:${version}"
    docker push "your-registry/${extension_name}:${version}"
}

publish_to_extension_registry() {
    local extension_name="$1"
    local version="$2"

    echo "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ —Ä–µ–µ—Å—Ç—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π..."

    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ API —Ä–µ–µ—Å—Ç—Ä–∞
    rpi-image-gen extension publish \
        --registry "${EXTENSION_REGISTRY_URL}" \
        --extension "layer/${extension_name}.yaml" \
        --version "$version"
}
```

## –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –®–∞–±–ª–æ–Ω README.md
```markdown
# –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

[![License](https://img.shields.io/badge/License-MIT-blue.svg)](LICENSE)
[![Version](https://img.shields.io/badge/Version-1.0.0-green.svg)](https://github.com/user/extension/releases)
[![CI](https://github.com/user/extension/actions/workflows/ci.yml/badge.svg)](https://github.com/user/extension/actions/workflows/ci.yml)

## –û–ø–∏—Å–∞–Ω–∏–µ

–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è. –û–±—ä—è—Å–Ω–∏—Ç–µ, –∫–∞–∫—É—é –ø—Ä–æ–±–ª–µ–º—É –æ–Ω–æ —Ä–µ—à–∞–µ—Ç –∏ –¥–ª—è –∫–∞–∫–∏—Ö —Å–ª—É—á–∞–µ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ.

## –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏

- **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å 1**: –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
- **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å 2**: –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
- **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å 3**: –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ

## –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

- **rpi-image-gen**: –≤–µ—Ä—Å–∏—è 1.0.0 –∏–ª–∏ –≤—ã—à–µ
- **–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞**: Debian 11/12 (Bullseye/Bookworm)
- **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞**: arm64, armhf
- **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏**: —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤

## –£—Å—Ç–∞–Ω–æ–≤–∫–∞

### –ò–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
```bash
# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
git clone https://github.com/user/extension.git
cd extension

# –°–±–æ—Ä–∫–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
rpi-image-gen build -c config/extension-config.yaml
```

### –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞
```bash
# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞
wget https://github.com/user/extension/releases/download/v1.0.0/extension-image.img

# –ó–∞–ø–∏—Å—å –Ω–∞ SD –∫–∞—Ä—Ç—É
sudo dd if=extension-image.img of=/dev/mmcblk0 bs=4M status=progress

# –ò–ª–∏ —á–µ—Ä–µ–∑ Raspberry Pi Imager
# –í—ã–±–µ—Ä–∏—Ç–µ "Custom" –∏ —É–∫–∞–∂–∏—Ç–µ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
```

### –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ —Ä–µ–µ—Å—Ç—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
```bash
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
rpi-image-gen extension install user/extension

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
rpi-image-gen build -c config.yaml --extension user/extension
```

## –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

### –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

| –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è | –û–ø–∏—Å–∞–Ω–∏–µ | –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é | –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ |
|------------|----------|----------------------|-------------|
| `IGconf_extension_setting1` | –ù–∞—Å—Ç—Ä–æ–π–∫–∞ 1 | `value1` | –î–∞ |
| `IGconf_extension_setting2` | –ù–∞—Å—Ç—Ä–æ–π–∫–∞ 2 | `value2` | –ù–µ—Ç |

### –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
```yaml
# –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
device:
  layer: pi5
  hostname: my-device

image:
  layer: image-rpios
  boot_part_size: 200M
  root_part_size: 100%

layer:
  base: bookworm-minbase
  extension: your-extension-name

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
extension:
  layer: your-extension-name
  setting1: custom-value
  setting2: another-value
```

### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

#### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∏
```yaml
extension:
  network:
    interface: eth0
    mode: dhcp
    static_ip: 192.168.1.100
    gateway: 192.168.1.1
    dns: 8.8.8.8,8.8.4.4
```

#### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
```yaml
extension:
  security:
    firewall: enabled
    ssh_keys_only: true
    fail2ban: enabled
    auto_updates: enabled
```

## –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

### –ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
```bash
# –ü—Ä–æ—Å—Ç–∞—è —Å–±–æ—Ä–∫–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
rpi-image-gen build -c examples/basic-config.yaml
```

### –ü—Ä–∏–º–µ—Ä 2: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
```bash
# –°–±–æ—Ä–∫–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
rpi-image-gen build -c examples/advanced-config.yaml \
  -- IGconf_extension_setting1=value1 \
  -- IGconf_extension_setting2=value2
```

### –ü—Ä–∏–º–µ—Ä 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CI/CD
```yaml
# GitHub Actions workflow
name: Build with Extension
on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Build image
      run: |
        rpi-image-gen build -c config.yaml
    - name: Test image
      run: |
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞
```

## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

```bash
# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
python3 -m pytest tests/ -v

# –õ–∏–Ω—Ç–∏–Ω–≥ –∫–æ–¥–∞
shellcheck scripts/*.sh
yamllint layer/*.yaml

# –¢–µ—Å—Ç–æ–≤–∞—è —Å–±–æ—Ä–∫–∞
rpi-image-gen build -c test-config.yaml --dry-run
```

## –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
```
extension/
‚îú‚îÄ‚îÄ layer/                    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–ª–æ–µ–≤
‚îÇ   ‚îî‚îÄ‚îÄ extension.yaml       # –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
‚îú‚îÄ‚îÄ config/                  # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–±–æ—Ä–∫–∏
‚îú‚îÄ‚îÄ scripts/                 # –°–∫—Ä–∏–ø—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏
‚îú‚îÄ‚îÄ tests/                   # –¢–µ—Å—Ç—ã
‚îú‚îÄ‚îÄ examples/                # –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚îú‚îÄ‚îÄ docs/                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
‚îî‚îÄ‚îÄ README.md               # –≠—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
```

### –í–Ω–µ—Å–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∞
1. –§–æ—Ä–∫–Ω–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
2. –°–æ–∑–¥–∞–π—Ç–µ –≤–µ—Ç–∫—É –¥–ª—è –≤–∞—à–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (`git checkout -b feature/amazing-feature`)
3. –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (`git commit -m 'Add amazing feature'`)
4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –≤–µ—Ç–∫—É (`git push origin feature/amazing-feature`)
5. –°–æ–∑–¥–∞–π—Ç–µ Pull Request

## –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π

### –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã

#### –ü—Ä–æ–±–ª–µ–º–∞: –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —Å –æ—à–∏–±–∫–æ–π
```
–û—à–∏–±–∫–∞: Layer not found
```
**–†–µ—à–µ–Ω–∏–µ:**
```bash
# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
rpi-image-gen layer --describe your-extension --deps

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–æ–≤—ã–µ —Å–ª–æ–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
rpi-image-gen layer --list
```

#### –ü—Ä–æ–±–ª–µ–º–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
```
IGconf_extension_setting1: command not found
```
**–†–µ—à–µ–Ω–∏–µ:**
```bash
# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
rpi-image-gen metadata --lint layer/extension.yaml

# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
echo "IGconf_extension_setting1=${IGconf_extension_setting1}"
```

### –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–º–æ—â–∏
- [–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è](https://github.com/user/extension/wiki)
- [Issues](https://github.com/user/extension/issues)
- [Discussions](https://github.com/user/extension/discussions)

## –õ–∏—Ü–µ–Ω–∑–∏—è

MIT License - —Å–º. —Ñ–∞–π–ª [LICENSE](LICENSE)

## –ê–≤—Ç–æ—Ä—ã

- **–ò–º—è –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞** - *–†–æ–ª—å* - [GitHub](https://github.com/username)

## Changelog

–ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ [CHANGELOG.md](CHANGELOG.md)
```

## –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è ‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï

### Pipeline —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
```yaml
# .github/workflows/release.yml
name: Release Extension

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Prepare release
      run: ./scripts/prepare-release.sh ${{ github.ref_name }}

    - name: Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Release ${{ github.ref }}

          ## Changes
          - List of changes here

    - name: Publish to registry
      run: ./scripts/publish-to-registry.sh ${{ github.ref_name }}
      env:
        REGISTRY_TOKEN: ${{ secrets.REGISTRY_TOKEN }}
```

### –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–ª–∏–∑–æ–≤
```bash
#!/bin/bash
# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–ª–∏–∑–æ–≤

monitor_release_adoption() {
    local extension_name="$1"

    echo "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–ª–∏–∑–æ–≤ –¥–ª—è $extension_name"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≥—Ä—É–∑–æ–∫
    get_download_stats "$extension_name"

    # –ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    analyze_user_feedback "$extension_name"

    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    monitor_production_errors "$extension_name"

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    generate_adoption_report "$extension_name"
}

get_download_stats() {
    local extension_name="$1"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç GitHub API
    curl -H "Authorization: token $GITHUB_TOKEN" \
        "https://api.github.com/repos/user/$extension_name/releases" | \
        jq -r '.[] | "\(.tag_name): \(.assets[0].download_count) downloads"'
}

analyze_user_feedback() {
    local extension_name="$1"

    # –ê–Ω–∞–ª–∏–∑ issues –∏ discussions
    echo "–ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."

    # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
    positive_feedback=$(gh issue list --repo "user/$extension_name" --label "enhancement" --limit 10)

    # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (–±–∞–≥–∏)
    bug_reports=$(gh issue list --repo "user/$extension_name" --label "bug" --limit 10)

    # Feature requests
    feature_requests=$(gh issue list --repo "user/$extension_name" --label "feature-request" --limit 10)
}
```

## –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ä–µ–ª–∏–∑–∞
- [ ] –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω
- [ ] –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –≤–∞–ª–∏–¥–Ω–∞
- [ ] –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–º–∞–Ω—Ç–∏–∫–µ
- [ ] –ê—Ä—Ö–∏–≤ —Ä–µ–ª–∏–∑–∞ —Å–æ–∑–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- [ ] –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã

### –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è
- [ ] –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è
- [ ] –ß–µ—Ç–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
- [ ] –ê–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
- [ ] –ë—ã—Å—Ç—Ä–æ–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
- [ ] –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

### –ö–∞—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
- [ ] –ü–æ–ª–Ω–∞—è README.md
- [ ] –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
- [ ] –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π
- [ ] –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- [ ] –õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è