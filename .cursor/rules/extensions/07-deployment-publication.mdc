---
alwaysApply: ${cursor.file.path.includes("ansible/") || cursor.file.path.includes("terraform/")}
---


# –ü—Ä–∞–≤–∏–ª–æ 07-1: –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π

## –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π rpi-image-gen.

## –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï
```bash
#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

prepare_extension_for_release() {
    local extension_name="$1"
    local version="$2"

    echo "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è $extension_name –∫ —Ä–µ–ª–∏–∑—É $version"

    # 1. –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    echo "–ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤..."
    if ! run_comprehensive_tests "$extension_name"; then
        echo "–û–®–ò–ë–ö–ê: –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã"
        exit 1
    fi

    # 2. –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."
    if ! validate_documentation "$extension_name"; then
        echo "–û–®–ò–ë–ö–ê: –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è"
        exit 1
    fi

    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Ä–µ–ª–∏–∑–∞
    echo "–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Ä–µ–ª–∏–∑–∞..."
    create_release_archive "$extension_name" "$version"

    # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å—É–º–º
    echo "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å—É–º–º..."
    generate_checksums "$extension_name" "$version"

    # 5. –°–æ–∑–¥–∞–Ω–∏–µ CHANGELOG
    echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CHANGELOG..."
    update_changelog "$extension_name" "$version"

    echo "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

run_comprehensive_tests() {
    local extension_name="$1"

    # –ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    python3 -m pytest tests/unit/ -v --tb=short

    # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    rpi-image-gen build -c tests/integration-config.yaml --dry-run

    # –¢–µ—Å—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    test_compatibility_matrix "$extension_name"

    # –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    test_performance_regression "$extension_name"
}

validate_documentation() {
    local extension_name="$1"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    local required_files=("README.md" "CHANGELOG.md" "LICENSE" "layer/${extension_name}.yaml")

    for file in "${required_files[@]}"; do
        if [[ ! -f "$file" ]]; then
            echo "–û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª: $file"
            return 1
        fi
    done

    # –í–∞–ª–∏–¥–∞—Ü–∏—è README.md
    if ! grep -q "## –£—Å—Ç–∞–Ω–æ–≤–∫–∞" README.md; then
        echo "–û–®–ò–ë–ö–ê: README.md –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–¥–µ–ª —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    if command -v markdown-link-check >/dev/null 2>&1; then
        markdown-link-check README.md
    fi

    return 0
}

create_release_archive() {
    local extension_name="$1"
    local version="$2"

    local archive_name="${extension_name}-${version}.tar.gz"
    local temp_dir="/tmp/release-${extension_name}"

    mkdir -p "$temp_dir"

    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Ä–µ–ª–∏–∑–∞
    cp -r layer/ "$temp_dir/"
    cp -r config/ "$temp_dir/"
    cp -r tests/ "$temp_dir/"
    cp README.md CHANGELOG.md LICENSE "$temp_dir/"

    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
    tar -czf "$archive_name" -C "$temp_dir" .

    # –û—á–∏—Å—Ç–∫–∞
    rm -rf "$temp_dir"

    echo "–ê—Ä—Ö–∏–≤ —Ä–µ–ª–∏–∑–∞ —Å–æ–∑–¥–∞–Ω: $archive_name"
}

generate_checksums() {
    local extension_name="$1"
    local version="$2"

    local archive_name="${extension_name}-${version}.tar.gz"
    local checksum_file="${archive_name}.sha256"

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SHA256 –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
    sha256sum "$archive_name" > "$checksum_file"

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å—É–º–º
    md5sum "$archive_name" > "${archive_name}.md5"
    sha1sum "$archive_name" > "${archive_name}.sha1"

    echo "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã"
}
```

### 2. –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï
```markdown
# –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
MAJOR.MINOR.PATCH

- **MAJOR**: –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è API, –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
- **MINOR**: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏, –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
- **PATCH**: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫, –º–µ–ª–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è

## –ü—Ä–∏–º–µ—Ä—ã –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

### –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:
- `1.0.0` ‚Üí `1.1.0` (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏)
- `1.1.0` ‚Üí `1.1.1` (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏)
- `1.1.0` ‚Üí `2.0.0` (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)

### –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:
- `1.0.0` ‚Üí `1.0.1` (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ–ª—å—à–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏)
- `1.0.0` ‚Üí `1.1.0` (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
- `1.0.0` ‚Üí `2.0.0` (–º–µ–ª–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
```

### –°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏
```bash
#!/bin/bash
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏—è–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

manage_extension_version() {
    local action="$1"
    local extension_name="$2"

    case "$action" in
        "bump-major")
            bump_version "$extension_name" "major"
            ;;
        "bump-minor")
            bump_version "$extension_name" "minor"
            ;;
        "bump-patch")
            bump_version "$extension_name" "patch"
            ;;
        "get")
            get_current_version "$extension_name"
            ;;
        "validate")
            validate_version_consistency "$extension_name"
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {bump-major|bump-minor|bump-patch|get|validate} extension-name"
            exit 1
            ;;
    esac
}

bump_version() {
    local extension_name="$1"
    local bump_type="$2"

    local current_version=$(get_current_version "$extension_name")
    local new_version=$(increment_version "$current_version" "$bump_type")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    sed -i "s/X-Env-Layer-Version:.*/X-Env-Layer-Version: ${new_version}/" "layer/${extension_name}.yaml"

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CHANGELOG.md
    update_changelog_entry "$new_version"

    # –°–æ–∑–¥–∞–Ω–∏–µ git —Ç–µ–≥–∞
    git add "layer/${extension_name}.yaml" CHANGELOG.md
    git commit -m "Bump version to ${new_version}"
    git tag -a "v${new_version}" -m "Release version ${new_version}"

    echo "–í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: $current_version ‚Üí $new_version"
}

increment_version() {
    local version="$1"
    local bump_type="$2"

    IFS='.' read -ra VERSION_PARTS <<< "$version"
    local major=${VERSION_PARTS[0]}
    local minor=${VERSION_PARTS[1]}
    local patch=${VERSION_PARTS[2]}

    case "$bump_type" in
        "major")
            echo "$((major + 1)).0.0"
            ;;
        "minor")
            echo "${major}.$((minor + 1)).0"
            ;;
        "patch")
            echo "${major}.${minor}.$((patch + 1))"
            ;;
    esac
}

get_current_version() {
    local extension_name="$1"

    grep "X-Env-Layer-Version:" "layer/${extension_name}.yaml" | sed 's/.*: //' | tr -d ' '
}

validate_version_consistency() {
    local extension_name="$1"

    local metadata_version=$(get_current_version "$extension_name")
    local git_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")

    if [[ "$git_tag" != "v$metadata_version" && "$git_tag" != "none" ]]; then
        echo "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–µ—Ä—Å–∏–π"
        echo "  –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: $metadata_version"
        echo "  Git tag: $git_tag"
        return 1
    fi

    echo "–í–µ—Ä—Å–∏–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã: $metadata_version"
}
```

### 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–æ–≤ üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï
```bash
#!/bin/bash
# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

create_extension_release() {
    local extension_name="$1"
    local version="$2"
    local release_notes="$3"

    echo "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ $extension_name –≤–µ—Ä—Å–∏–∏ $version"

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    prepare_extension_for_release "$extension_name" "$version"

    # –°–æ–∑–¥–∞–Ω–∏–µ git —Ç–µ–≥–∞
    git tag -a "v$version" -m "Release version $version"

    # Push —Ç–µ–≥–∞
    git push origin "v$version"

    # –°–æ–∑–¥–∞–Ω–∏–µ GitHub —Ä–µ–ª–∏–∑–∞
    if command -v gh >/dev/null 2>&1; then
        gh release create "v$version" \
            --title "Release v$version" \
            --notes-file "$release_notes" \
            --latest
    fi

    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ —Ä–µ–µ—Å—Ç—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    if [[ -n "${REGISTRY_URL:-}" ]]; then
        publish_to_registry "$extension_name" "$version"
    fi

    echo "–†–µ–ª–∏–∑ $version —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"
}

publish_to_registry() {
    local extension_name="$1"
    local version="$2"

    local archive="${extension_name}-${version}.tar.gz"
    local checksum="${archive}.sha256"

    # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ —Ä–µ–µ—Å—Ç—Ä
    curl -X POST "${REGISTRY_URL}/api/extensions" \
        -H "Authorization: Bearer ${REGISTRY_TOKEN}" \
        -F "extension=@${archive}" \
        -F "checksum=@${checksum}" \
        -F "metadata=$(cat layer/${extension_name}.yaml)"

    echo "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ —Ä–µ–µ—Å—Ç—Ä–µ: ${extension_name}@${version}"
}
```

