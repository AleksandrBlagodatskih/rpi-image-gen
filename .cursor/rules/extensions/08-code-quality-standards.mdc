---
alwaysApply: ${cursor.file.path.match(/\.(yaml|sh|py|md)$/) && !cursor.file.path.includes("test/")}
---


# –ü—Ä–∞–≤–∏–ª–æ 08: –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π

## –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–¥–µ–∂–Ω—ã—Ö –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π rpi-image-gen.

## –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### 1. –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï
```bash
#!/bin/bash
# –û–ø–∏—Å–∞–Ω–∏–µ: –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –î–ª—è —á–µ–≥–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç
# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
#   $1 - –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä (—Ç–∏–ø: string, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
#   $2 - –≤—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä (—Ç–∏–ø: integer, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 60)
# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
#   0 - —É—Å–ø–µ—Ö, –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
#   1 - –æ—à–∏–±–∫–∞, –ø—Ä–æ–±–ª–µ–º—ã —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
#   2 - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, —á–∞—Å—Ç–∏—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
# –ü—Ä–∏–º–µ—Ä—ã:
#   script.sh "–ø–∞—Ä–∞–º–µ—Ç—Ä1" 30
# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: curl, jq
# –ê–≤—Ç–æ—Ä: –ò–º—è –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
# –í–µ—Ä—Å–∏—è: 1.0.0
# –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2024-01-01

set -euo pipefail

SCRIPT_NAME="$(basename "${BASH_SOURCE[0]}")"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SCRIPT_VERSION="1.0.0"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
readonly MAX_RETRIES=3
readonly TIMEOUT=30

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—Ä–æ–≤–Ω—è–º–∏
log_info() { echo "[$SCRIPT_NAME] INFO: $*" >&2; }
log_warn() { echo "[$SCRIPT_NAME] WARN: $*" >&2; }
log_error() { echo "[$SCRIPT_NAME] ERROR: $*" >&2; }
log_debug() { [[ "${DEBUG:-false}" = "true" ]] && echo "[$SCRIPT_NAME] DEBUG: $*" >&2; }

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    cat << EOF
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $SCRIPT_NAME [–û–ü–¶–ò–ò] –ê–†–ì–£–ú–ï–ù–¢–´

–û–ü–¶–ò–ò:
    -h, --help          –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
    -v, --version       –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é
    --debug             –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
    --dry-run           –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

–ê–†–ì–£–ú–ï–ù–¢–´:
    PARAM1              –ü–µ—Ä–≤—ã–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    PARAM2              –í—Ç–æ—Ä–æ–π –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä

–ü–†–ò–ú–ï–†–´:
    $SCRIPT_NAME --debug "value1" 42
    $SCRIPT_NAME --dry-run "test"

EOF
}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
show_version() {
    echo "$SCRIPT_NAME –≤–µ—Ä—Å–∏—è $SCRIPT_VERSION"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–æ–ª–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
main() {
    local param1=""
    local param2=""
    local debug=false
    local dry_run=false

    # –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -v|--version)
                show_version
                exit 0
                ;;
            --debug)
                debug=true
                shift
                ;;
            --dry-run)
                dry_run=true
                shift
                ;;
            -*)
                log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
                show_help
                exit 1
                ;;
            *)
                if [[ -z "$param1" ]]; then
                    param1="$1"
                elif [[ -z "$param2" ]]; then
                    param2="$1"
                else
                    log_error "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"
                    show_help
                    exit 1
                fi
                shift
                ;;
        esac
    done

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    [[ -n "$param1" ]] || {
        log_error "–ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
        show_help
        exit 1
    }

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–ª–∞–¥–∫–∏
    if [[ "$debug" = "true" ]]; then
        export DEBUG=true
        set -x
    fi

    log_info "–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞"
    log_debug "Param1: $param1, Param2: ${param2:-'–Ω–µ –∑–∞–¥–∞–Ω'}"

    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏
    if [[ "$dry_run" = "true" ]]; then
        log_info "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
        return 0
    fi

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
    if execute_operations "$param1" "$param2"; then
        log_info "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
        return 0
    else
        log_error "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
execute_operations() {
    local param1="$1"
    local param2="$2"

    log_debug "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: $param1, ${param2:-'default'}"

    # –≠—Ç–∞–ø 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    prepare_environment || return 1

    # –≠—Ç–∞–ø 2: –í–∞–ª–∏–¥–∞—Ü–∏—è
    validate_parameters "$param1" "$param2" || return 1

    # –≠—Ç–∞–ø 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    perform_main_operation "$param1" "$param2" || return 1

    # –≠—Ç–∞–ø 4: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
    verify_results || return 1

    # –≠—Ç–∞–ø 5: –û—á–∏—Å—Ç–∫–∞
    cleanup_resources || return 1

    return 0
}

# –ü–æ–¥—Ä–æ–±–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
prepare_environment() {
    # –û–ø–∏—Å–∞–Ω–∏–µ: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: 0 –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, 1 –ø—Ä–∏ –æ—à–∏–±–∫–µ
    log_debug "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    if ! mkdir -p "/tmp/${SCRIPT_NAME}"; then
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    local deps=("curl" "jq")
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" >/dev/null 2>&1; then
            log_error "–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: $dep"
            return 1
        fi
    done

    return 0
}

validate_parameters() {
    local param1="$1"
    local param2="$2"

    # –í–∞–ª–∏–¥–∞—Ü–∏—è param1
    if [[ ! "$param1" =~ ^[a-zA-Z0-9_-]+$ ]]; then
        log_error "Param1 –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è"
        return 1
    fi

    # –í–∞–ª–∏–¥–∞—Ü–∏—è param2 (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
    if [[ -n "$param2" ]] && [[ ! "$param2" =~ ^[0-9]+$ ]]; then
        log_error "Param2 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º"
        return 1
    fi

    return 0
}

perform_main_operation() {
    local param1="$1"
    local param2="$2"

    log_info "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"

    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    log_debug "–û–±—Ä–∞–±–æ—Ç–∫–∞: $param1"

    # –ò–º–∏—Ç–∞—Ü–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    for i in {1..10}; do
        log_debug "–ü—Ä–æ–≥—Ä–µ—Å—Å: $i/10"
        sleep 0.1
    done

    log_debug "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    return 0
}

verify_results() {
    log_debug "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if [[ -f "/tmp/${SCRIPT_NAME}/result" ]]; then
        log_debug "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–π–¥–µ–Ω"
        return 0
    else
        log_error "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
}

cleanup_resources() {
    log_debug "–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if [[ -d "/tmp/${SCRIPT_NAME}" ]]; then
        rm -rf "/tmp/${SCRIPT_NAME}"
        log_debug "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã"
    fi

    return 0
}

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
cleanup_on_exit() {
    local exit_code=$?

    log_debug "–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ (–∫–æ–¥: $exit_code)"

    # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    if [[ -d "/tmp/${SCRIPT_NAME}" ]]; then
        rm -rf "/tmp/${SCRIPT_NAME}"
    fi

    exit "$exit_code"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
trap cleanup_on_exit EXIT
trap 'log_error "–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT"; exit 130' INT
trap 'log_error "–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM"; exit 143' TERM

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
```

### 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï
```bash
#!/bin/bash
set -euo pipefail

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
readonly MAX_RETRIES=3
readonly RETRY_DELAY=5

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
die() {
    # –û–ø–∏—Å–∞–Ω–∏–µ: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: $1 - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    log_error "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: $1"
    exit 1
}

warn() {
    # –û–ø–∏—Å–∞–Ω–∏–µ: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: $1 - —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    log_warn "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: $1"
}

error_exit() {
    # –û–ø–∏—Å–∞–Ω–∏–µ: –ì—Ä–∞–º–æ—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: $1 - —Å–æ–æ–±—â–µ–Ω–∏–µ, $2 - –∫–æ–¥ –æ—à–∏–±–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
    local message="$1"
    local code="${2:-1}"

    log_error "$message"
    exit "$code"
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
retry_operation() {
    # –û–ø–∏—Å–∞–Ω–∏–µ: –ü–æ–≤—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: $1 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –∫–æ–º–∞–Ω–¥–∞
    local max_attempts="$1"
    shift

    local attempt=1
    while [[ $attempt -le $max_attempts ]]; do
        log_debug "–ü–æ–ø—ã—Ç–∫–∞ $attempt –∏–∑ $max_attempts"

        if "$@"; then
            log_debug "–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ —Å –ø–æ–ø—ã—Ç–∫–∏ $attempt"
            return 0
        else
            log_warn "–ü–æ–ø—ã—Ç–∫–∞ $attempt –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –Ω–µ—É–¥–∞—á–µ–π"

            if [[ $attempt -lt $max_attempts ]]; then
                log_info "–ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ $RETRY_DELAY —Å–µ–∫—É–Ω–¥..."
                sleep $RETRY_DELAY
            fi
        fi

        ((attempt++))
    done

    log_error "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –Ω–µ—É–¥–∞—á–µ–π –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫"
    return 1
}

# –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
validate_or_die() {
    # –û–ø–∏—Å–∞–Ω–∏–µ: –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ª–æ–≤–∏—è —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: $1 - —É—Å–ª–æ–≤–∏–µ, $2 - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    local condition="$1"
    local error_message="$2"

    if ! eval "$condition"; then
        die "$error_message"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–±–æ–µ–≤
handle_partial_failure() {
    # –û–ø–∏—Å–∞–Ω–∏–µ: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–π, –∫–æ–≥–¥–∞ —á–∞—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π —É—Å–ø–µ—à–Ω–∞
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: $1 - –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞, $2 - —Å–æ–æ–±—â–µ–Ω–∏–µ
    local exit_code="$1"
    local message="$2"

    case "$exit_code" in
        0)
            log_info "–û–ø–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —É—Å–ø–µ—à–Ω–∞"
            ;;
        1)
            warn "$message: —á–∞—Å—Ç–∏—á–Ω–∞—è –Ω–µ—É–¥–∞—á–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º"
            ;;
        2)
            error_exit "$message: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞"
            ;;
        *)
            error_exit "$message: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ (–∫–æ–¥: $exit_code)"
            ;;
    esac
}

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
safe_execute() {
    # –û–ø–∏—Å–∞–Ω–∏–µ: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –∫–æ–º–∞–Ω–¥–∞ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    local command_output
    local command_error

    log_debug "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: $*"

    if command_output=$( "$@" 2>&1 ); then
        log_debug "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
        echo "$command_output"
        return 0
    else
        local exit_code=$?
        log_error "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –∫–æ–¥–æ–º $exit_code: $*"
        log_error "–í—ã–≤–æ–¥: $command_output"
        return $exit_code
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
check_dependencies() {
    # –û–ø–∏—Å–∞–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    local missing_deps=()

    for dep in "$@"; do
        if ! command -v "$dep" >/dev/null 2>&1; then
            missing_deps+=("$dep")
        fi
    done

    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        error_exit "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missing_deps[*]}"
    fi
}

# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
validate_system() {
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    validate_or_die '[[ -w /tmp ]] ' "–ù–µ—Ç –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏ –≤ /tmp"
    validate_or_die '[[ $(id -u) -eq 0 ]]' "–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ root"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    check_dependencies curl jq wget

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
    if ! safe_execute mkdir -p /opt/extension; then
        handle_partial_failure $? "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"
    fi

    return 0
}
```

### 3. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï
```bash
#!/bin/bash
set -euo pipefail

# –§—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
safe_chroot() {
    # –û–ø–∏—Å–∞–Ω–∏–µ: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ chroot –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: $1 - –ø—É—Ç—å –∫ chroot, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –∫–æ–º–∞–Ω–¥–∞
    local chroot_path="$1"
    shift

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Ç–∏ chroot
    [[ -d "$chroot_path" ]] || die "Chroot –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $chroot_path"
    [[ -r "$chroot_path" ]] || die "–ù–µ—Ç –ø—Ä–∞–≤ —á—Ç–µ–Ω–∏—è chroot –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"

    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ uchroot –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    uchroot "$chroot_path" sh -c "$*"
}

secure_file_operations() {
    # –û–ø–∏—Å–∞–Ω–∏–µ: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏
    local file_path="$1"
    local operation="$2"

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Ç–∏
    if [[ "$file_path" =~ \.\. ]]; then
        die "–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å: $file_path"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    case "$operation" in
        read)
            [[ -r "$file_path" ]] || die "–ù–µ—Ç –ø—Ä–∞–≤ —á—Ç–µ–Ω–∏—è: $file_path"
            ;;
        write)
            [[ -w "$(dirname "$file_path")" ]] || die "–ù–µ—Ç –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: $(dirname "$file_path")"
            ;;
        execute)
            [[ -x "$file_path" ]] || die "–§–∞–π–ª –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π: $file_path"
            ;;
    esac
}

# –ó–∞—â–∏—Ç–∞ –æ—Ç –∏–Ω—ä–µ–∫—Ü–∏–π –∫–æ–º–∞–Ω–¥
sanitize_input() {
    # –û–ø–∏—Å–∞–Ω–∏–µ: –û—á–∏—Å—Ç–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: $1 - –≤—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    local input="$1"

    # –£–¥–∞–ª–µ–Ω–∏–µ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    input=$(printf '%s\n' "$input" | sed 's/[;&|`$()<>]//g')

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
    input=$(printf '%.100s' "$input")

    echo "$input"
}

secure_variable_expansion() {
    # –û–ø–∏—Å–∞–Ω–∏–µ: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    local var_name="$1"
    local default_value="${2:-}"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    if [[ ! "$var_name" =~ ^[A-Z_][A-Z0-9_]*$ ]]; then
        die "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: $var_name"
    fi

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    local value="${!var_name:-$default_value}"

    # –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
    sanitize_input "$value"
}

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏
drop_privileges() {
    # –û–ø–∏—Å–∞–Ω–∏–µ: –°–±—Ä–æ—Å –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π –¥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
    local target_user="${1:-nobody}"
    local target_group="${2:-nogroup}"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if [[ $(id -u) -eq 0 ]]; then
        log_info "–°–±—Ä–æ—Å –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π –¥–æ $target_user:$target_group"

        # –°–º–µ–Ω–∞ –≥—Ä—É–ø–ø—ã
        if ! sg "$target_group" -c "true"; then
            warn "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É –Ω–∞ $target_group"
        fi

        # –°–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if ! su -s /bin/sh "$target_user"; then
            warn "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ $target_user"
        fi
    else
        warn "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π"
    fi
}

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
create_secure_temp() {
    # –û–ø–∏—Å–∞–Ω–∏–µ: –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    local type="$1"  # file –∏–ª–∏ directory
    local template="${2:-tempXXXXXX}"

    local temp_path

    case "$type" in
        file)
            temp_path=$(mktemp "/tmp/${template}")
            ;;
        directory)
            temp_path=$(mktemp -d "/tmp/${template}")
            ;;
        *)
            die "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø: $type. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'file' –∏–ª–∏ 'directory'"
            ;;
    esac

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø—Ä–∞–≤
    chmod 600 "$temp_path" 2>/dev/null || true

    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    trap "rm -rf '$temp_path'" EXIT

    echo "$temp_path"
}

# –í–∞–ª–∏–¥–∞—Ü–∏—è SSL/TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
validate_certificate() {
    # –û–ø–∏—Å–∞–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    local cert_file="$1"
    local key_file="$2"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    [[ -f "$cert_file" ]] || die "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: $cert_file"
    [[ -f "$key_file" ]] || die "–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: $key_file"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    [[ -r "$cert_file" ]] || die "–ù–µ—Ç –ø—Ä–∞–≤ —á—Ç–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"
    [[ -r "$key_file" ]] || die "–ù–µ—Ç –ø—Ä–∞–≤ —á—Ç–µ–Ω–∏—è –∫–ª—é—á–∞"

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é openssl
    if ! openssl x509 -in "$cert_file" -text -noout >/dev/null 2>&1; then
        die "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: $cert_file"
    fi

    if ! openssl rsa -in "$key_file" -check >/dev/null 2>&1; then
        die "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á: $key_file"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    local cert_modulus
    local key_modulus

    cert_modulus=$(openssl x509 -in "$cert_file" -modulus -noout | openssl md5)
    key_modulus=$(openssl rsa -in "$key_file" -modulus -noout | openssl md5)

    if [[ "$cert_modulus" != "$key_modulus" ]]; then
        die "–ö–ª—é—á –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É"
    fi

    log_info "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ –∫–ª—é—á –≤–∞–ª–∏–¥–Ω—ã"
}

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
security_audit() {
    # –û–ø–∏—Å–∞–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
    log_info "–ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤
    local open_ports
    open_ports=$(netstat -tln 2>/dev/null | grep LISTEN | wc -l)
    if [[ $open_ports -gt 10 ]]; then
        warn "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ $open_ports –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
    local critical_files=("/etc/passwd" "/etc/shadow" "/etc/sudoers")
    for file in "${critical_files[@]}"; do
        if [[ -f "$file" ]] && [[ $(stat -c %a "$file") != "600" ]]; then
            warn "–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∞–≤–∞ –Ω–∞ $file: $(stat -c %a "$file")"
        fi
    done

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ root
    local root_processes
    root_processes=$(ps -U root -u root u | wc -l)
    if [[ $root_processes -gt 20 ]]; then
        warn "–ú–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ –æ—Ç root: $root_processes"
    fi

    log_info "–ê—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# –ü—Ä–∏–º–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–¥–∞
secure_example() {
    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    local user_input
    read -r user_input

    # –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è
    local safe_input
    safe_input=$(sanitize_input "$user_input")

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥–µ
    printf '%s\n' "$safe_input" | grep "pattern"

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    local temp_file
    temp_file=$(create_secure_temp file)

    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–ø–∏—Å—å
    printf '%s\n' "$safe_input" > "$temp_file"

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ chroot
    safe_chroot "/chroot/path" "command with args"

    # –°–±—Ä–æ—Å –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π
    drop_privileges "appuser" "appgroup"
}
```

### 4. –ü–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç—å üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï
```bash
#!/bin/bash

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
detect_platform() {
    # –û–ø–∏—Å–∞–Ω–∏–µ: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    local os_name
    local os_version
    local arch

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –û–°
    if [[ -f /etc/os-release ]]; then
        os_name=$(grep '^ID=' /etc/os-release | cut -d= -f2 | tr -d '"')
        os_version=$(grep '^VERSION_ID=' /etc/os-release | cut -d= -f2 | tr -d '"')
    elif [[ -f /etc/redhat-release ]]; then
        os_name="rhel"
        os_version=$(rpm -q --qf '%{VERSION}' redhat-release)
    elif [[ -f /etc/debian_version ]]; then
        os_name="debian"
        os_version=$(cat /etc/debian_version)
    else
        os_name="unknown"
        os_version="unknown"
    fi

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    case $(uname -m) in
        x86_64)
            arch="amd64"
            ;;
        aarch64)
            arch="arm64"
            ;;
        armv7l)
            arch="armhf"
            ;;
        *)
            arch=$(uname -m)
            ;;
    esac

    echo "PLATFORM_OS=$os_name"
    echo "PLATFORM_VERSION=$os_version"
    echo "PLATFORM_ARCH=$arch"
}

# –ö—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
cross_platform_tools() {
    # –ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥ –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
    find_command() {
        local cmd="$1"
        local alternatives=("${@:2}")

        if command -v "$cmd" >/dev/null 2>&1; then
            echo "$cmd"
            return 0
        fi

        for alt in "${alternatives[@]}"; do
            if command -v "$alt" >/dev/null 2>&1; then
                echo "$alt"
                return 0
            fi
        done

        return 1
    }

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–∫–µ—Ç–æ–≤
    detect_package_manager() {
        if command -v apt-get >/dev/null 2>&1; then
            echo "apt"
        elif command -v yum >/dev/null 2>&1; then
            echo "yum"
        elif command -v dnf >/dev/null 2>&1; then
            echo "dnf"
        elif command -v pacman >/dev/null 2>&1; then
            echo "pacman"
        else
            echo "unknown"
        fi
    }

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤
    install_package() {
        local package="$1"
        local pkg_manager
        pkg_manager=$(detect_package_manager)

        case "$pkg_manager" in
            apt)
                apt-get update && apt-get install -y "$package"
                ;;
            yum)
                yum install -y "$package"
                ;;
            dnf)
                dnf install -y "$package"
                ;;
            pacman)
                pacman -S --noconfirm "$package"
                ;;
            *)
                die "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–∫–µ—Ç–æ–≤: $pkg_manager"
                ;;
        esac
    }

    # –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    export -f find_command
    export -f detect_package_manager
    export -f install_package
}

# –ü–ª–∞—Ç—Ñ–æ—Ä–º–æ-–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –ø—É—Ç–∏
platform_independent_paths() {
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    get_config_dir() {
        if [[ -n "${XDG_CONFIG_HOME:-}" ]]; then
            echo "$XDG_CONFIG_HOME"
        elif [[ -n "${HOME:-}" ]]; then
            echo "$HOME/.config"
        else
            echo "/etc"
        fi
    }

    get_cache_dir() {
        if [[ -n "${XDG_CACHE_HOME:-}" ]]; then
            echo "$XDG_CACHE_HOME"
        elif [[ -n "${HOME:-}" ]]; then
            echo "$HOME/.cache"
        else
            echo "/tmp"
        fi
    }

    get_data_dir() {
        if [[ -n "${XDG_DATA_HOME:-}" ]]; then
            echo "$XDG_DATA_HOME"
        elif [[ -n "${HOME:-}" ]]; then
            echo "$HOME/.local/share"
        else
            echo "/usr/local/share"
        fi
    }

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–µ–π
    normalize_path() {
        local path="$1"

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
        if [[ "$path" != /* ]]; then
            path="$(cd "$(dirname "$path")" && pwd)/$(basename "$path")"
        fi

        # –£–¥–∞–ª–µ–Ω–∏–µ –¥–≤–æ–π–Ω—ã—Ö —Å–ª—ç—à–µ–π –∏ ./
        path=$(echo "$path" | sed 's|//|/|g; s|^\./||')

        echo "$path"
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—É—Ç–∏ —Å —É—á–µ—Ç–æ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    path_exists() {
        local path="$1"

        if [[ -e "$path" ]] || [[ -h "$path" ]]; then
            return 0
        else
            return 1
        fi
    }
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–¥–∏—Ä–æ–≤–æ–∫
handle_text_encoding() {
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–∞
    detect_encoding() {
        local file="$1"

        if command -v file >/dev/null 2>&1; then
            file --mime-type "$file" | cut -d= -f2 | tr -d ' '
        elif command -v uchardet >/dev/null 2>&1; then
            uchardet "$file"
        else
            echo "unknown"
        fi
    }

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ UTF-8
    convert_to_utf8() {
        local input_file="$1"
        local output_file="$2"
        local source_encoding
        source_encoding=$(detect_encoding "$input_file")

        case "$source_encoding" in
            "text/plain; charset=iso-8859-1"|"iso-8859-1")
                iconv -f iso-8859-1 -t utf-8 "$input_file" > "$output_file"
                ;;
            "text/plain; charset=windows-1251"|"windows-1251")
                iconv -f windows-1251 -t utf-8 "$input_file" > "$output_file"
                ;;
            "utf-8"|"text/plain; charset=utf-8")
                cp "$input_file" "$output_file"
                ;;
            *)
                warn "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞ $source_encoding, –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –µ—Å—Ç—å"
                cp "$input_file" "$output_file"
                ;;
        esac
    }

    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    safe_read_file() {
        local file="$1"
        local encoding
        encoding=$(detect_encoding "$file")

        if [[ "$encoding" != "utf-8" ]] && [[ "$encoding" != "text/plain; charset=utf-8" ]]; then
            local temp_file
            temp_file=$(mktemp)
            convert_to_utf8 "$file" "$temp_file"
            cat "$temp_file"
            rm -f "$temp_file"
        else
            cat "$file"
        fi
    }
}

# –ê—Ç–æ–º–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏
atomic_file_operations() {
    # –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞
    atomic_write() {
        local file="$1"
        local content="$2"

        local temp_file
        temp_file=$(mktemp "$(dirname "$file")/tmp.XXXXXX")

        printf '%s\n' "$content" > "$temp_file"

        if mv "$temp_file" "$file"; then
            return 0
        else
            rm -f "$temp_file"
            return 1
        fi
    }

    # –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    atomic_update() {
        local file="$1"
        local update_function="$2"

        local temp_file
        temp_file=$(mktemp "$(dirname "$file")/tmp.XXXXXX")

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if "$update_function" "$file" > "$temp_file"; then
            if mv "$temp_file" "$file"; then
                return 0
            fi
        fi

        rm -f "$temp_file"
        return 1
    }
}

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å —É—á–µ—Ç–æ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
platform_aware_monitoring() {
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏
    get_memory_info() {
        if command -v free >/dev/null 2>&1; then
            free -h
        elif [[ -f /proc/meminfo ]]; then
            grep -E "(MemTotal|MemFree|Buffers|Cached)" /proc/meminfo
        else
            echo "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        fi
    }

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–∞—Ö
    get_disk_info() {
        if command -v df >/dev/null 2>&1; then
            df -h
        else
            echo "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        fi
    }

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    get_system_load() {
        if [[ -f /proc/loadavg ]]; then
            cat /proc/loadavg
        elif command -v uptime >/dev/null 2>&1; then
            uptime
        else
            echo "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        fi
    }
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
init_cross_platform() {
    log_info "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    eval "$(detect_platform)"

    log_info "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: $PLATFORM_OS $PLATFORM_VERSION ($PLATFORM_ARCH)"

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    cross_platform_tools

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
    platform_independent_paths

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
    handle_text_encoding

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    atomic_file_operations

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    platform_aware_monitoring

    log_info "–ö—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ"
}
```

## –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ ‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï

### 1. –ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π
```bash
# –ü—Ä–∏–Ω—Ü–∏–ø—ã –º–æ–¥—É–ª—å–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
modular_design_principles() {
    # –ï–¥–∏–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
    single_responsibility() {
        # –ö–∞–∂–¥–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–ª–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –≤–µ—â—å
        validate_input() { ... }
        process_data() { ... }
        save_results() { ... }
    }

    # –ü—Ä–∏–Ω—Ü–∏–ø –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç–∏/–∑–∞–∫—Ä—ã—Ç–æ—Å—Ç–∏
    open_closed_principle() {
        # –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –∑–∞–∫—Ä—ã—Ç—ã –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        generic_processor() {
            local processor_type="$1"
            shift

            case "$processor_type" in
                json)
                    process_json "$@"
                    ;;
                xml)
                    process_xml "$@"
                    ;;
                yaml)
                    process_yaml "$@"
                    ;;
                *)
                    die "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: $processor_type"
                    ;;
            esac
        }
    }

    # –ü—Ä–∏–Ω—Ü–∏–ø –∏–Ω–≤–µ—Ä—Å–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    dependency_injection() {
        # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∏–∑–≤–Ω–µ
        process_with_dependencies() {
            local logger="${1:-log_info}"
            local validator="${2:-validate_input}"
            local processor="${3:-process_data}"

            "$logger" "–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏"

            if "$validator" "$input_data"; then
                "$processor" "$input_data"
                "$logger" "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            else
                "$logger" "–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –Ω–µ—É–¥–∞—á–µ–π"
                return 1
            fi
        }
    }
}

# –®–∞–±–ª–æ–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è bash
design_patterns() {
    # –®–∞–±–ª–æ–Ω "–§–∞–±—Ä–∏–∫–∞"
    create_object_factory() {
        create_logger() {
            local type="$1"

            case "$type" in
                file)
                    file_logger "$@"
                    ;;
                syslog)
                    syslog_logger "$@"
                    ;;
                console)
                    console_logger "$@"
                    ;;
            esac
        }

        create_validator() {
            local type="$1"

            case "$type" in
                email)
                    validate_email "$@"
                    ;;
                url)
                    validate_url "$@"
                    ;;
                json)
                    validate_json "$@"
                    ;;
            esac
        }
    }

    # –®–∞–±–ª–æ–Ω "–°—Ç—Ä–∞—Ç–µ–≥–∏—è"
    strategy_pattern() {
        define_backup_strategy() {
            local strategy="$1"

            case "$strategy" in
                full)
                    perform_full_backup "$@"
                    ;;
                incremental)
                    perform_incremental_backup "$@"
                    ;;
                differential)
                    perform_differential_backup "$@"
                    ;;
            esac
        }
    }

    # –®–∞–±–ª–æ–Ω "–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å"
    observer_pattern() {
        add_event_listener() {
            local event="$1"
            local callback="$2"

            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è
            eval "event_${event}_handlers+=('$callback')"
        }

        trigger_event() {
            local event="$1"
            shift

            # –í—ã–∑–æ–≤ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏—è
            local handlers_var="event_${event}_handlers[@]"
            local handlers=("${!handlers_var}")

            for handler in "${handlers[@]}"; do
                "$handler" "$@"
            done
        }
    }
}

# –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–≥–∏–Ω–æ–≤
plugin_system() {
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤
    load_plugins() {
        local plugin_dir="$1"

        for plugin in "$plugin_dir"/*.sh; do
            if [[ -f "$plugin" ]]; then
                log_info "–ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–≥–∏–Ω–∞: $(basename "$plugin")"
                source "$plugin"
            fi
        done
    }

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—É–∫–æ–≤ –ø–ª–∞–≥–∏–Ω–æ–≤
    register_plugin_hooks() {
        local hook_name="$1"
        local hook_function="$2"

        eval "${hook_name}_hooks+=('$hook_function')"
    }

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö—É–∫–æ–≤
    execute_hooks() {
        local hook_name="$1"
        shift

        local hooks_var="${hook_name}_hooks[@]"
        local hooks=("${!hooks_var}")

        for hook in "${hooks[@]}"; do
            if command -v "$hook" >/dev/null 2>&1; then
                "$hook" "$@"
            fi
        done
    }
}
```

### 2. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
```bash
# –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
advanced_validation() {
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    validate_type() {
        local value="$1"
        local expected_type="$2"

        case "$expected_type" in
            string)
                [[ -n "$value" ]] || return 1
                ;;
            integer)
                [[ "$value" =~ ^-?[0-9]+$ ]] || return 1
                ;;
            float)
                [[ "$value" =~ ^-?[0-9]*\.?[0-9]+$ ]] || return 1
                ;;
            boolean)
                [[ "$value" =~ ^(true|false|0|1|yes|no)$ ]] || return 1
                ;;
            email)
                [[ "$value" =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$ ]] || return 1
                ;;
            url)
                [[ "$value" =~ ^https?:// ]] || return 1
                ;;
            ip)
                [[ "$value" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]] || return 1
                ;;
            json)
                echo "$value" | jq . >/dev/null 2>&1 || return 1
                ;;
            yaml)
                echo "$value" | python3 -c "import yaml, sys; yaml.safe_load(sys.stdin)" >/dev/null 2>&1 || return 1
                ;;
        esac
    }

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
    validate_range() {
        local value="$1"
        local min_val="$2"
        local max_val="$3"

        if [[ "$value" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
            awk -v val="$value" -v min="$min_val" -v max="$max_val" \
                'BEGIN { if (val >= min && val <= max) exit 0; else exit 1 }'
        else
            return 1
        fi
    }

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã
    validate_length() {
        local value="$1"
        local min_len="$2"
        local max_len="${3:-}"

        local length=${#value}

        if [[ -n "$max_len" ]]; then
            [[ $length -ge $min_len ]] && [[ $length -le $max_len ]]
        else
            [[ $length -ge $min_len ]]
        fi
    }

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤
    validate_in_list() {
        local value="$1"
        shift
        local allowed_values=("$@")

        for allowed in "${allowed_values[@]}"; do
            if [[ "$value" = "$allowed" ]]; then
                return 0
            fi
        done

        return 1
    }

    # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    validate_complex() {
        local value="$1"
        local rules="$2"  # JSON —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏

        # –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–∞–≤–∏–ª –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        local type
        type=$(echo "$rules" | jq -r '.type // "string"')

        if ! validate_type "$value" "$type"; then
            return 1
        fi

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        local min_val max_val
        min_val=$(echo "$rules" | jq -r '.min // empty')
        max_val=$(echo "$rules" | jq -r '.max // empty')

        if [[ -n "$min_val" ]] && ! validate_range "$value" "$min_val" "$max_val"; then
            return 1
        fi

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã
        local min_len max_len
        min_len=$(echo "$rules" | jq -r '.minLength // empty')
        max_len=$(echo "$rules" | jq -r '.maxLength // empty')

        if [[ -n "$min_len" ]] && ! validate_length "$value" "$min_len" "$max_len"; then
            return 1
        fi

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        local allowed
        allowed=$(echo "$rules" | jq -r '.enum[] // empty' 2>/dev/null)
        if [[ -n "$allowed" ]]; then
            local allowed_array=($allowed)
            if ! validate_in_list "$value" "${allowed_array[@]}"; then
                return 1
            fi
        fi

        return 0
    }
}

# –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
validation_error_handling() {
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
    validation_error() {
        local field="$1"
        local value="$2"
        local error_type="$3"
        local expected="$4"

        case "$error_type" in
            type)
                log_error "–ü–æ–ª–µ '$field' –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø. –û–∂–∏–¥–∞–ª–æ—Å—å: $expected, –ø–æ–ª—É—á–µ–Ω–æ: $value"
                ;;
            range)
                log_error "–ü–æ–ª–µ '$field' –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –û–∂–∏–¥–∞–ª–æ—Å—å: $expected, –ø–æ–ª—É—á–µ–Ω–æ: $value"
                ;;
            length)
                log_error "–ü–æ–ª–µ '$field' –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–ª–∏–Ω—É. –û–∂–∏–¥–∞–ª–æ—Å—å: $expected, –ø–æ–ª—É—á–µ–Ω–æ: ${#value} —Å–∏–º–≤–æ–ª–æ–≤"
                ;;
            enum)
                log_error "–ü–æ–ª–µ '$field' —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: $expected, –ø–æ–ª—É—á–µ–Ω–æ: $value"
                ;;
            required)
                log_error "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ '$field' –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                ;;
            *)
                log_error "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—è '$field': $error_type"
                ;;
        esac
    }

    # –°–±–æ—Ä –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    collect_validation_errors() {
        local errors=()

        # –ü—Ä–∏–º–µ—Ä —Å–±–æ—Ä–∞ –æ—à–∏–±–æ–∫
        if ! validate_type "$input1" "string"; then
            errors+=("input1:type:string")
        fi

        if ! validate_range "$input2" 1 100; then
            errors+=("input2:range:1-100")
        fi

        # –í–æ–∑–≤—Ä–∞—Ç –º–∞—Å—Å–∏–≤–∞ –æ—à–∏–±–æ–∫
        printf '%s\n' "${errors[@]}"
    }

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –æ—à–∏–±–æ–∫
    display_validation_errors() {
        local errors=("$@")

        if [[ ${#errors[@]} -gt 0 ]]; then
            log_error "–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:"

            for error in "${errors[@]}"; do
                IFS=':' read -r field type expected <<< "$error"
                validation_error "$field" "${!field}" "$type" "$expected"
            done

            return 1
        fi

        return 0
    }
}
```

## –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –°–∏—Å—Ç–µ–º–∞ –ª–∏–Ω—Ç–∏–Ω–≥–∞
```bash
#!/bin/bash
# –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–∏–Ω—Ç–µ—Ä –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π

extension_linter() {
    local extension_path="$1"
    local lint_errors=0

    log_info "–ó–∞–ø—É—Å–∫ –ª–∏–Ω—Ç–µ—Ä–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: $extension_path"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ shell —Å–∫—Ä–∏–ø—Ç–æ–≤
    while IFS= read -r -d '' script; do
        log_debug "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞: $script"

        # –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if ! bash -n "$script"; then
            log_error "–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ $script"
            ((lint_errors++))
        fi

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å shellcheck (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
        if command -v shellcheck >/dev/null 2>&1; then
            if ! shellcheck -x "$script"; then
                log_warn "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è shellcheck –≤ $script"
            fi
        fi

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if ! grep -q "^# –û–ø–∏—Å–∞–Ω–∏–µ:" "$script"; then
            log_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≤ $script"
            ((lint_errors++))
        fi

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        if ! grep -q "set -euo pipefail" "$script"; then
            log_warn "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'set -euo pipefail' –≤ $script"
        fi

    done < <(find "$extension_path" -name "*.sh" -print0)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ YAML —Ñ–∞–π–ª–æ–≤
    while IFS= read -r -d '' yaml_file; do
        log_debug "–ü—Ä–æ–≤–µ—Ä–∫–∞ YAML: $yaml_file"

        if command -v yamllint >/dev/null 2>&1; then
            if ! yamllint "$yaml_file"; then
                log_error "–û—à–∏–±–∫–∞ yamllint –≤ $yaml_file"
                ((lint_errors++))
            fi
        fi

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ YAML
        if ! python3 -c "import yaml; yaml.safe_load(open('$yaml_file'))" 2>/dev/null; then
            log_error "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π YAML —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤ $yaml_file"
            ((lint_errors++))
        fi

    done < <(find "$extension_path" -name "*.yaml" -print0)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    check_project_structure "$extension_path" || ((lint_errors++))

    if [[ $lint_errors -gt 0 ]]; then
        log_error "–ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫ –ª–∏–Ω—Ç–µ—Ä–∞: $lint_errors"
        return 1
    else
        log_info "–õ–∏–Ω—Ç–µ—Ä –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ"
        return 0
    fi
}

check_project_structure() {
    local extension_path="$1"

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    local required_files=("layer/extension.yaml" "README.md")

    for file in "${required_files[@]}"; do
        if [[ ! -f "$extension_path/$file" ]]; then
            log_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª: $file"
            return 1
        fi
    done

    # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    local recommended_dirs=("tests" "scripts" "config")

    for dir in "${recommended_dirs[@]}"; do
        if [[ ! -d "$extension_path/$dir" ]]; then
            log_warn "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: $dir"
        fi
    done

    return 0
}
```

### –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
```bash
#!/bin/bash
# –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞

collect_quality_metrics() {
    local extension_path="$1"
    local metrics_file="/tmp/quality-metrics.json"

    log_info "–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è: $extension_path"

    # –ú–µ—Ç—Ä–∏–∫–∏ —Ñ–∞–π–ª–æ–≤
    local file_count
    file_count=$(find "$extension_path" -type f | wc -l)

    local script_count
    script_count=$(find "$extension_path" -name "*.sh" | wc -l)

    local yaml_count
    yaml_count=$(find "$extension_path" -name "*.yaml" | wc -l)

    # –ú–µ—Ç—Ä–∏–∫–∏ –∫–æ–¥–∞
    local total_lines
    total_lines=$(find "$extension_path" -name "*.sh" -exec wc -l {} \; | awk '{sum += $1} END {print sum}')

    local avg_lines_per_script
    avg_lines_per_script=$((total_lines / script_count))

    # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    local documented_functions
    documented_functions=$(grep -r "^# –û–ø–∏—Å–∞–Ω–∏–µ:" "$extension_path" | wc -l)

    local error_handling_count
    error_handling_count=$(grep -r "set -euo pipefail\|die\|error_exit" "$extension_path" | wc -l)

    local function_count
    function_count=$(grep -r "^[a-zA-Z_][a-zA-Z0-9_]*()" "$extension_path" | wc -l)

    # –ú–µ—Ç—Ä–∏–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    local complexity_score
    complexity_score=$(calculate_complexity "$extension_path")

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    cat > "$metrics_file" << EOF
    {
        "extension": "$(basename "$extension_path")",
        "timestamp": "$(date -Iseconds)",
        "files": {
            "total": $file_count,
            "scripts": $script_count,
            "yaml": $yaml_count
        },
        "code": {
            "total_lines": $total_lines,
            "avg_lines_per_script": $avg_lines_per_script,
            "functions": $function_count,
            "documented_functions": $documented_functions
        },
        "quality": {
            "error_handling": $error_handling_count,
            "complexity_score": $complexity_score,
            "documentation_ratio": $((documented_functions * 100 / function_count))
        }
    }
EOF

    log_info "–ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: $metrics_file"
    cat "$metrics_file"
}

calculate_complexity() {
    local extension_path="$1"
    local complexity=0

    # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–µ—Ç–≤–ª–µ–Ω–∏–π
    while IFS= read -r -d '' script; do
        local if_count
        local case_count
        local loop_count

        if_count=$(grep -c "^[[:space:]]*if " "$script")
        case_count=$(grep -c "^[[:space:]]*case " "$script")
        loop_count=$(grep -c "^[[:space:]]*\(for\|while\) " "$script")

        complexity=$((complexity + if_count + case_count + loop_count))
    done < <(find "$extension_path" -name "*.sh" -print0)

    echo "$complexity"
}
```

## –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞
- [ ] –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ —Å–∫—Ä–∏–ø—Ç–æ–≤
- [ ] –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–æ –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
- [ ] –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
- [ ] –ü–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç—å –∫–æ–¥–∞ –º–µ–∂–¥—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
- [ ] –ú–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –µ–¥–∏–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é

### –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
- [ ] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- [ ] –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- [ ] –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞
- [ ] –°–±–æ—Ä –∏ –∞–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
- [ ] –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞

### –ü–æ—Ä–æ–≥–∏ –∫–∞—á–µ—Å—Ç–≤–∞
- **–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å**: > 90% —Ñ—É–Ω–∫—Ü–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã
- **–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫**: > 95% —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
- **–°–ª–æ–∂–Ω–æ—Å—Ç—å**: –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π < 10
- **–õ–∏–Ω—Ç–µ—Ä**: 0 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫, < 5 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
- **–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ**: > 80% –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã