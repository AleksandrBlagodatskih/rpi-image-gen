---
alwaysApply: ${cursor.file.path.includes("monitoring/") || cursor.file.path.includes("metrics/")}
---


# –ü—Ä–∞–≤–∏–ª–æ 09: –ú–µ—Ç—Ä–∏–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π

## –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º—É –º–µ—Ç—Ä–∏–∫, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π rpi-image-gen.

## –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### 1. –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
```bash
#!/bin/bash
# –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

collect_development_metrics() {
    local extension_path="$1"
    local metrics_file="/tmp/dev-metrics-${extension_name}.json"

    echo "–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: $(basename "$extension_path")"

    # –í—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–¥–Ω–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –∫–æ–º–º–∏—Ç–∞)
    local development_time
    development_time=$(calculate_development_time "$extension_path")

    # –°–ª–æ–∂–Ω–æ—Å—Ç—å –∫–æ–¥–∞ (—Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å)
    local code_complexity
    code_complexity=$(calculate_code_complexity "$extension_path")

    # –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏
    local test_coverage
    test_coverage=$(calculate_test_coverage "$extension_path")

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –Ω–∞ 1000 —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞
    local defects_per_kiloc
    defects_per_kiloc=$(calculate_defects_per_kilo_lines "$extension_path")

    # –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º–æ—Å—Ç–∏
    local maintainability_index
    maintainability_index=$(calculate_maintainability_index "$extension_path")

    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    local commit_frequency
    commit_frequency=$(calculate_commit_frequency "$extension_path")

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    cat > "$metrics_file" << EOF
    {
        "extension": "$(basename "$extension_path")",
        "timestamp": "$(date -Iseconds)",
        "development_metrics": {
            "development_time_days": $development_time,
            "code_complexity": $code_complexity,
            "test_coverage_percent": $test_coverage,
            "defects_per_1000_lines": $defects_per_kiloc,
            "maintainability_index": $maintainability_index,
            "commits_per_week": $commit_frequency
        }
    }
EOF

    echo "–ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: $metrics_file"
    cat "$metrics_file"
}

calculate_development_time() {
    local extension_path="$1"

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ git –∏—Å—Ç–æ—Ä–∏–∏
    if [[ -d "$extension_path/.git" ]]; then
        local first_commit
        local last_commit

        first_commit=$(git -C "$extension_path" log --reverse --pretty=format:%ct | head -1)
        last_commit=$(git -C "$extension_path" log -1 --pretty=format:%ct)

        if [[ -n "$first_commit" && -n "$last_commit" ]]; then
            echo $(( (last_commit - first_commit) / 86400 ))  # –¥–Ω–µ–π
        else
            echo "0"
        fi
    else
        echo "0"
    fi
}

calculate_code_complexity() {
    local extension_path="$1"
    local complexity=0

    # –†–∞—Å—á–µ—Ç —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    while IFS= read -r -d '' script; do
        # –ü–æ–¥—Å—á–µ—Ç –ø—Ä–µ–¥–∏–∫–∞—Ç–æ–≤ (if, case, while, for, &&, ||)
        local predicates
        predicates=$(grep -c -E "(if |case |while |for |\$\$|\|)" "$script")
        complexity=$((complexity + predicates))
    done < <(find "$extension_path" -name "*.sh" -print0)

    echo "$complexity"
}

calculate_test_coverage() {
    local extension_path="$1"

    # –†–∞—Å—á–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∞–º–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    if [[ -d "$extension_path/tests" ]]; then
        local test_files
        local script_files
        local coverage

        test_files=$(find "$extension_path/tests" -name "*.sh" | wc -l)
        script_files=$(find "$extension_path" -name "*.sh" | wc -l)

        if [[ $script_files -gt 0 ]]; then
            coverage=$((test_files * 100 / script_files))
            echo "$coverage"
        else
            echo "0"
        fi
    else
        echo "0"
    fi
}

calculate_defects_per_kilo_lines() {
    local extension_path="$1"

    # –ü–æ–¥—Å—á–µ—Ç –¥–µ—Ñ–µ–∫—Ç–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ TODO –∏ FIXME)
    local total_lines
    local defect_markers

    total_lines=$(find "$extension_path" -name "*.sh" -exec wc -l {} \; | awk '{sum += $1} END {print sum}')
    defect_markers=$(grep -r -c -E "(TODO|FIXME|XXX|HACK)" "$extension_path" 2>/dev/null | awk -F: '{sum += $2} END {print sum}')

    if [[ $total_lines -gt 0 ]]; then
        echo $((defect_markers * 1000 / total_lines))
    else
        echo "0"
    fi
}

calculate_maintainability_index() {
    local extension_path="$1"

    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∏–Ω–¥–µ–∫—Å–∞ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º–æ—Å—Ç–∏
    # –û—Å–Ω–æ–≤–∞–Ω –Ω–∞: —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–∏, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

    local complexity
    local duplication
    local documentation

    complexity=$(calculate_code_complexity "$extension_path")
    duplication=$(calculate_code_duplication "$extension_path")
    documentation=$(calculate_documentation_ratio "$extension_path")

    # –§–æ—Ä–º—É–ª–∞: MI = 171 - 5.2*ln(V) - 0.23*G - 16.2*ln(L) + 50*sin(sqrt(2.4*CM))
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
    local mi=$((171 - complexity - duplication + documentation))

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 0-171
    if [[ $mi -lt 0 ]]; then
        echo "0"
    elif [[ $mi -gt 171 ]]; then
        echo "171"
    else
        echo "$mi"
    fi
}

calculate_commit_frequency() {
    local extension_path="$1"

    if [[ -d "$extension_path/.git" ]]; then
        local weeks
        local commits

        weeks=$(git -C "$extension_path" log --pretty=format:%ct | awk '
            function weeks_since_epoch(t) {
                return int(t / 604800)
            }
            {
                weeks[weeks_since_epoch($1)]++
            }
            END {
                print length(weeks)
            }
        ')

        commits=$(git -C "$extension_path" rev-list --count HEAD)

        if [[ $weeks -gt 0 ]]; then
            echo $((commits / weeks))
        else
            echo "0"
        fi
    else
        echo "0"
    fi
}
```

### 2. –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
```bash
#!/bin/bash
# –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

collect_performance_metrics() {
    local extension_name="$1"
    local metrics_file="/tmp/perf-metrics-${extension_name}.json"

    echo "–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: $extension_name"

    # –í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–∞
    local build_time
    build_time=$(measure_build_time "$extension_name")

    # –†–∞–∑–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ –æ–±—Ä–∞–∑–∞
    local image_size
    image_size=$(measure_image_size "$extension_name")

    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏
    local memory_usage
    memory_usage=$(measure_memory_usage "$extension_name")

    # –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    local boot_time
    boot_time=$(measure_boot_time "$extension_name")

    # CPU –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    local cpu_usage
    cpu_usage=$(measure_cpu_usage "$extension_name")

    # I/O –æ–ø–µ—Ä–∞—Ü–∏–∏
    local io_operations
    io_operations=$(measure_io_operations "$extension_name")

    # –°–µ—Ç–µ–≤–æ–π —Ç—Ä–∞—Ñ–∏–∫
    local network_traffic
    network_traffic=$(measure_network_traffic "$extension_name")

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    cat > "$metrics_file" << EOF
    {
        "extension": "$extension_name",
        "timestamp": "$(date -Iseconds)",
        "performance_metrics": {
            "build_time_seconds": $build_time,
            "image_size_mb": $image_size,
            "memory_usage_mb": $memory_usage,
            "boot_time_seconds": $boot_time,
            "cpu_usage_percent": $cpu_usage,
            "io_operations_per_second": $io_operations,
            "network_traffic_mb": $network_traffic
        }
    }
EOF

    echo "–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: $metrics_file"
    cat "$metrics_file"
}

measure_build_time() {
    local extension_name="$1"

    # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–±–æ—Ä–∫–∏
    local start_time
    local end_time

    start_time=$(date +%s)
    if rpi-image-gen build -c "config/${extension_name}.yaml" --dry-run >/dev/null 2>&1; then
        end_time=$(date +%s)
        echo $((end_time - start_time))
    else
        echo "0"
    fi
}

measure_image_size() {
    local extension_name="$1"

    # –ò–∑–º–µ—Ä–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–±—Ä–∞–∑–∞
    if [[ -f "work/image-*/image-*.img" ]]; then
        local size_bytes
        size_bytes=$(stat -f%z "work/image-*/image-*.img" 2>/dev/null || stat -c%s "work/image-*/image-*.img" 2>/dev/null || echo "0")
        echo $((size_bytes / 1024 / 1024))  # MB
    else
        echo "0"
    fi
}

measure_memory_usage() {
    local extension_name="$1"

    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏
    local max_memory=0

    # –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏ –≤ —Ñ–æ–Ω–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    rpi-image-gen build -c "config/${extension_name}.yaml" --dry-run >/dev/null 2>&1 &
    local build_pid=$!

    while kill -0 $build_pid 2>/dev/null; do
        local current_mem
        current_mem=$(ps -o rss= -p $build_pid 2>/dev/null || echo "0")
        current_mem=$((current_mem / 1024))  # MB

        if [[ $current_mem -gt $max_memory ]]; then
            max_memory=$current_mem
        fi

        sleep 1
    done

    echo "$max_memory"
}

measure_boot_time() {
    local extension_name="$1"

    # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–±—É–µ—Ç —ç–º—É–ª—è—Ü–∏–∏ –∏–ª–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    echo "30"  # –ó–∞–≥–ª—É—à–∫–∞
}

measure_cpu_usage() {
    local extension_name="$1"

    # –ò–∑–º–µ—Ä–µ–Ω–∏–µ CPU –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏
    local total_cpu=0
    local samples=0

    rpi-image-gen build -c "config/${extension_name}.yaml" --dry-run >/dev/null 2>&1 &
    local build_pid=$!

    while kill -0 $build_pid 2>/dev/null; do
        local current_cpu
        current_cpu=$(ps -o pcpu= -p $build_pid 2>/dev/null || echo "0.0")

        total_cpu=$(echo "$total_cpu + $current_cpu" | bc 2>/dev/null || echo "$total_cpu")
        ((samples++))

        sleep 1
    done

    if [[ $samples -gt 0 ]]; then
        echo "scale=2; $total_cpu / $samples" | bc 2>/dev/null || echo "0"
    else
        echo "0"
    fi
}

measure_io_operations() {
    local extension_name="$1"

    # –ò–∑–º–µ—Ä–µ–Ω–∏–µ I/O –æ–ø–µ—Ä–∞—Ü–∏–π (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    if command -v iotop >/dev/null 2>&1; then
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        echo "100"  # –ó–∞–≥–ª—É—à–∫–∞
    else
        echo "0"
    fi
}

measure_network_traffic() {
    local extension_name="$1"

    # –ò–∑–º–µ—Ä–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏
    local interface="eth0"
    local rx_before
    local tx_before
    local rx_after
    local tx_after

    if [[ -f "/sys/class/net/$interface/statistics/rx_bytes" ]]; then
        rx_before=$(cat "/sys/class/net/$interface/statistics/rx_bytes")
        tx_before=$(cat "/sys/class/net/$interface/statistics/tx_bytes")

        rpi-image-gen build -c "config/${extension_name}.yaml" --dry-run >/dev/null 2>&1

        rx_after=$(cat "/sys/class/net/$interface/statistics/rx_bytes")
        tx_after=$(cat "/sys/class/net/$interface/statistics/tx_bytes")

        local total_traffic=$(( (rx_after - rx_before + tx_after - tx_before) / 1024 / 1024 ))
        echo "$total_traffic"
    else
        echo "0"
    fi
}
```

### 3. –ú–µ—Ç—Ä–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
```bash
#!/bin/bash
# –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

collect_security_metrics() {
    local extension_path="$1"
    local metrics_file="/tmp/security-metrics-${extension_name}.json"

    echo "–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: $(basename "$extension_path")"

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π (CVE)
    local cve_count
    cve_count=$(count_cve_vulnerabilities "$extension_path")

    # –†–µ–π—Ç–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ SBOM
    local sbom_security_score
    sbom_security_score=$(calculate_sbom_security_score "$extension_path")

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —É—è–∑–≤–∏–º–æ—Å—Ç—è–º–∏
    local vulnerable_packages
    vulnerable_packages=$(count_vulnerable_packages "$extension_path")

    # –í—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    local security_update_time
    security_update_time=$(measure_security_update_response "$extension_path")

    # –ú–µ—Ç—Ä–∏–∫–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    local security_issues
    security_issues=$(analyze_security_issues "$extension_path")

    # –û—Ü–µ–Ω–∫–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏
    local attack_surface
    attack_surface=$(calculate_attack_surface "$extension_path")

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    cat > "$metrics_file" << EOF
    {
        "extension": "$(basename "$extension_path")",
        "timestamp": "$(date -Iseconds)",
        "security_metrics": {
            "cve_count": $cve_count,
            "sbom_security_score": $sbom_security_score,
            "vulnerable_packages": $vulnerable_packages,
            "security_update_response_days": $security_update_time,
            "security_issues_count": $security_issues,
            "attack_surface_score": $attack_surface
        }
    }
EOF

    echo "–ú–µ—Ç—Ä–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: $metrics_file"
    cat "$metrics_file"
}

count_cve_vulnerabilities() {
    local extension_path="$1"

    # –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ CVE
    if [[ -f "$extension_path/sbom-report.json" ]]; then
        jq '.vulnerabilities | length' "$extension_path/sbom-report.json" 2>/dev/null || echo "0"
    else
        echo "0"
    fi
}

calculate_sbom_security_score() {
    local extension_path="$1"

    # –†–∞—Å—á–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ SBOM
    if [[ -f "$extension_path/sbom-report.json" ]]; then
        local critical
        local high
        local medium
        local low

        critical=$(jq '.vulnerabilities | map(select(.severity == "CRITICAL")) | length' "$extension_path/sbom-report.json" 2>/dev/null || echo "0")
        high=$(jq '.vulnerabilities | map(select(.severity == "HIGH")) | length' "$extension_path/sbom-report.json" 2>/dev/null || echo "0")
        medium=$(jq '.vulnerabilities | map(select(.severity == "MEDIUM")) | length' "$extension_path/sbom-report.json" 2>/dev/null || echo "0")
        low=$(jq '.vulnerabilities | map(select(.severity == "LOW")) | length' "$extension_path/sbom-report.json" 2>/dev/null || echo "0")

        # –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–∞: 100 - (critical*20 + high*10 + medium*5 + low*1)
        local score=$((100 - critical * 20 - high * 10 - medium * 5 - low * 1))

        if [[ $score -lt 0 ]]; then
            echo "0"
        else
            echo "$score"
        fi
    else
        echo "100"  # –ï—Å–ª–∏ SBOM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä
    fi
}

count_vulnerable_packages() {
    local extension_path="$1"

    # –ü–æ–¥—Å—á–µ—Ç –ø–∞–∫–µ—Ç–æ–≤ —Å —É—è–∑–≤–∏–º–æ—Å—Ç—è–º–∏
    if [[ -f "$extension_path/sbom-report.json" ]]; then
        jq '.packages | map(select(.vulnerabilities | length > 0)) | length' "$extension_path/sbom-report.json" 2>/dev/null || echo "0"
    else
        echo "0"
    fi
}

measure_security_update_response() {
    local extension_path="$1"

    # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if [[ -d "$extension_path/.git" ]]; then
        # –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        local last_security_commit
        last_security_commit=$(git -C "$extension_path" log --grep="security\|CVE\|vulnerability" --pretty=format:%ct | head -1)

        if [[ -n "$last_security_commit" ]]; then
            local days_since=$(( ( $(date +%s) - last_security_commit ) / 86400 ))
            echo "$days_since"
        else
            echo "999"  # –ù–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        fi
    else
        echo "999"
    fi
}

analyze_security_issues() {
    local extension_path="$1"

    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    local issues=0

    # –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    if grep -r -q "eval\|exec.*\$" "$extension_path" 2>/dev/null; then
        ((issues++))
    fi

    if grep -r -q "chmod 777\|chmod a+rwx" "$extension_path" 2>/dev/null; then
        ((issues++))
    fi

    if grep -r -q "curl.*|.*bash\|wget.*|.*sh" "$extension_path" 2>/dev/null; then
        ((issues++))
    fi

    if grep -r -q "sudo.*\$" "$extension_path" 2>/dev/null; then
        ((issues++))
    fi

    echo "$issues"
}

calculate_attack_surface() {
    local extension_path="$1"

    # –û—Ü–µ–Ω–∫–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏
    local score=0

    # –ê–Ω–∞–ª–∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤
    if grep -r -q "listen\|port\|bind" "$extension_path" 2>/dev/null; then
        ((score += 20))
    fi

    # –ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    if grep -r -q "curl\|wget\|http\|tcp\|udp" "$extension_path" 2>/dev/null; then
        ((score += 15))
    fi

    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if grep -r -q "sudo\|su\|chmod\|chown" "$extension_path" 2>/dev/null; then
        ((score += 25))
    fi

    # –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if grep -r -q "read\|input\|arg" "$extension_path" 2>/dev/null; then
        ((score += 10))
    fi

    # –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    local dep_count
    dep_count=$(grep -c "packages:" "$extension_path/layer/"*.yaml 2>/dev/null || echo "0")

    score=$((score + dep_count * 5))

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 0-100
    if [[ $score -gt 100 ]]; then
        echo "100"
    else
        echo "$score"
    fi
}
```

## –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### 1. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–±–æ—Ä–∫–∏
```bash
#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–±–æ—Ä–∫–∏

monitor_build_process() {
    local extension_name="$1"
    local log_file="/tmp/build-monitor-${extension_name}.log"

    echo "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–±–æ—Ä–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: $extension_name"

    BUILD_START=$(date +%s)
    echo "–ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∫–∏: $(date)" | tee "$log_file"

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
    local cpu_samples=()
    local mem_samples=()
    local disk_samples=()

    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
    (
        while ps aux | grep -q "rpi-image-gen.*build"; do
            # CPU –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            local cpu_usage
            cpu_usage=$(top -bn1 | grep -E "(rpi-image-gen|build)" | awk '{print $9}' | head -1 || echo "0.0")
            cpu_samples+=("$cpu_usage")

            # –ü–∞–º—è—Ç—å
            local mem_usage
            mem_usage=$(free | awk 'NR==2{printf "%.2f", $3*100/$2}' || echo "0.0")
            mem_samples+=("$mem_usage")

            # –î–∏—Å–∫ I/O
            local disk_io
            disk_io=$(iostat -x sda 1 1 2>/dev/null | awk 'NR==4{print $4 + $5}' || echo "0.0")
            disk_samples+=("$disk_io")

            echo "$(date +%H:%M:%S): CPU ${cpu_usage}% MEM ${mem_usage}% DISK_IO ${disk_io}" >> "$log_file"
            sleep 5
        done
    ) &

    local monitor_pid=$!

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏
    if rpi-image-gen build -c "config/${extension_name}.yaml"; then
        BUILD_RESULT="SUCCESS"
    else
        BUILD_RESULT="FAILED"
    fi

    BUILD_END=$(date +%s)

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    kill $monitor_pid 2>/dev/null || true
    wait $monitor_pid 2>/dev/null || true

    # –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
    local build_duration=$((BUILD_END - BUILD_START))
    local avg_cpu=$(calculate_average "${cpu_samples[@]}")
    local max_cpu=$(calculate_max "${cpu_samples[@]}")
    local avg_mem=$(calculate_average "${mem_samples[@]}")
    local max_mem=$(calculate_max "${mem_samples[@]}")
    local avg_disk=$(calculate_average "${disk_samples[@]}")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    cat >> "$log_file" << EOF

=== –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –°–ë–û–†–ö–ò ===
–í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏: ${build_duration} —Å–µ–∫—É–Ω–¥
–†–µ–∑—É–ª—å—Ç–∞—Ç: ${BUILD_RESULT}
–°—Ä–µ–¥–Ω–µ–µ CPU: ${avg_cpu}%
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ CPU: ${max_cpu}%
–°—Ä–µ–¥–Ω—è—è –ø–∞–º—è—Ç—å: ${avg_mem}%
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å: ${max_mem}%
–°—Ä–µ–¥–Ω–∏–π –¥–∏—Å–∫ I/O: ${avg_disk}
EOF

    echo "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Ç—á–µ—Ç: $log_file"
    echo "–í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏: ${build_duration}—Å, –†–µ–∑—É–ª—å—Ç–∞—Ç: ${BUILD_RESULT}"

    return $([[ "$BUILD_RESULT" = "SUCCESS" ]] && echo 0 || echo 1)
}

calculate_average() {
    local sum=0
    local count=0

    for value in "$@"; do
        sum=$(echo "$sum + $value" | bc 2>/dev/null || echo "$sum")
        ((count++))
    done

    if [[ $count -gt 0 ]]; then
        echo "scale=2; $sum / $count" | bc 2>/dev/null || echo "0"
    else
        echo "0"
    fi
}

calculate_max() {
    local max=0

    for value in "$@"; do
        if [[ $(echo "$value > $max" | bc 2>/dev/null) -eq 1 ]]; then
            max=$value
        fi
    done

    echo "$max"
}
```

### 2. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö —Å–∏—Å—Ç–µ–º
```yaml
# Prometheus –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
# metrics.yml
global:
  scrape_interval: 15s
  evaluation_interval: 15s

scrape_configs:
  - job_name: 'rpi-image-gen-extensions'
    static_configs:
      - targets: ['localhost:9090']
    metrics_path: '/metrics'

# –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
custom_metrics:
  - name: extension_uptime_seconds
    type: counter
    help: –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    labels:
      extension_name: ""
      extension_version: ""

  - name: extension_requests_total
    type: counter
    help: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
    labels:
      extension_name: ""
      method: ""
      status: ""

  - name: extension_errors_total
    type: counter
    help: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    labels:
      extension_name: ""
      error_type: ""

  - name: extension_performance_duration_seconds
    type: histogram
    help: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    labels:
      extension_name: ""
      operation: ""
    buckets: [0.1, 0.5, 1, 2, 5, 10, 30, 60, 120]

  - name: extension_resources_usage
    type: gauge
    help: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
    labels:
      extension_name: ""
      resource_type: "cpu|memory|disk|network"

  - name: extension_health_status
    type: gauge
    help: –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (0=unhealthy, 1=healthy)
    labels:
      extension_name: ""
      component: ""
```

### –°–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ç—Ä–∏–∫
```bash
#!/bin/bash
# –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫

metrics_collector() {
    local metrics_dir="/var/lib/rpi-image-gen/metrics"
    local retention_days=30

    mkdir -p "$metrics_dir"

    # –°–±–æ—Ä –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –º–µ—Ç—Ä–∏–∫
    collect_all_metrics() {
        local timestamp
        timestamp=$(date +%Y%m%d_%H%M%S)

        # –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        collect_development_metrics "$extension_path" > "${metrics_dir}/dev_${timestamp}.json"

        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        collect_performance_metrics "$extension_name" > "${metrics_dir}/perf_${timestamp}.json"

        # –ú–µ—Ç—Ä–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        collect_security_metrics "$extension_path" > "${metrics_dir}/security_${timestamp}.json"

        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        collect_system_metrics > "${metrics_dir}/system_${timestamp}.json"

        echo "–ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±—Ä–∞–Ω—ã: $timestamp"
    }

    # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
    analyze_metrics_trends() {
        echo "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –º–µ—Ç—Ä–∏–∫..."

        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        analyze_performance_trends

        # –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        analyze_security_trends

        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
        analyze_quality_trends

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        generate_recommendations
    }

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –º–µ—Ç—Ä–∏–∫
    cleanup_old_metrics() {
        find "$metrics_dir" -name "*.json" -mtime +$retention_days -delete
        echo "–°—Ç–∞—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –æ—á–∏—â–µ–Ω—ã (—Å—Ç–∞—Ä—à–µ ${retention_days} –¥–Ω–µ–π)"
    }

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
    while true; do
        collect_all_metrics
        analyze_metrics_trends
        cleanup_old_metrics

        sleep 3600  # –°–±–æ—Ä –∫–∞–∂–¥—ã–π —á–∞—Å
    done
}

# –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
analyze_performance_trends() {
    local perf_files
    mapfile -t perf_files < <(find "$metrics_dir" -name "perf_*.json" -mtime -7 | sort)

    if [[ ${#perf_files[@]} -lt 2 ]]; then
        echo "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
        return
    fi

    echo "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞ –Ω–µ–¥–µ–ª—é..."

    local build_times=()
    local memory_usage=()

    for file in "${perf_files[@]}"; do
        build_times+=($(jq -r '.performance_metrics.build_time_seconds' "$file"))
        memory_usage+=($(jq -r '.performance_metrics.memory_usage_mb' "$file"))
    done

    # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
    local build_trend
    build_trend=$(calculate_trend "${build_times[@]}")

    local memory_trend
    memory_trend=$(calculate_trend "${memory_usage[@]}")

    echo "–¢—Ä–µ–Ω–¥ –≤—Ä–µ–º–µ–Ω–∏ —Å–±–æ—Ä–∫–∏: $build_trend"
    echo "–¢—Ä–µ–Ω–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏: $memory_trend"

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    if [[ "$build_trend" = "increasing" ]]; then
        warn "–í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è - —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"
    fi

    if [[ "$memory_trend" = "increasing" ]]; then
        warn "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —É—Ç–µ—á–∫–∏"
    fi
}

calculate_trend() {
    local values=("$@")
    local length=${#values[@]}

    if [[ $length -lt 2 ]]; then
        echo "insufficient_data"
        return
    fi

    local first_half_sum=0
    local second_half_sum=0
    local mid=$((length / 2))

    for ((i = 0; i < mid; i++)); do
        first_half_sum=$((first_half_sum + values[i]))
    done

    for ((i = mid; i < length; i++)); do
        second_half_sum=$((second_half_sum + values[i]))
    done

    local first_avg=$((first_half_sum / mid))
    local second_avg=$((second_half_sum / (length - mid)))

    if [[ $second_avg -gt $((first_avg * 110 / 100)) ]]; then
        echo "increasing"
    elif [[ $second_avg -lt $((first_avg * 90 / 100)) ]]; then
        echo "decreasing"
    else
        echo "stable"
    fi
}

# –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
analyze_security_trends() {
    local security_files
    mapfile -t security_files < <(find "$metrics_dir" -name "security_*.json" -mtime -30 | sort)

    if [[ ${#security_files[@]} -lt 2 ]]; then
        echo "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
        return
    fi

    echo "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞ –º–µ—Å—è—Ü..."

    local cve_counts=()
    local vuln_packages=()

    for file in "${security_files[@]}"; do
        cve_counts+=($(jq -r '.security_metrics.cve_count' "$file"))
        vuln_packages+=($(jq -r '.security_metrics.vulnerable_packages' "$file"))
    done

    local cve_trend
    cve_trend=$(calculate_trend "${cve_counts[@]}")

    local vuln_trend
    vuln_trend=$(calculate_trend "${vuln_packages[@]}")

    echo "–¢—Ä–µ–Ω–¥ CVE: $cve_trend"
    echo "–¢—Ä–µ–Ω–¥ —É—è–∑–≤–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: $vuln_trend"

    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if [[ "$cve_trend" = "increasing" ]]; then
        error "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ CVE —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è - —Å—Ä–æ—á–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏!"
    fi

    if [[ $(tail -1 <<< "${cve_counts[*]}") -gt 5 ]]; then
        warn "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –±–æ–ª–µ–µ 5 CVE - —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ"
    fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫
generate_recommendations() {
    local recommendations_file="/tmp/metrics-recommendations.txt"

    echo "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫..." > "$recommendations_file"

    # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫
    local latest_perf
    latest_perf=$(find "$metrics_dir" -name "perf_*.json" | sort | tail -1)

    if [[ -f "$latest_perf" ]]; then
        local build_time
        build_time=$(jq -r '.performance_metrics.build_time_seconds' "$latest_perf")

        if [[ $build_time -gt 1800 ]]; then  # > 30 –º–∏–Ω—É—Ç
            echo "- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏ (—Ç–µ–∫—É—â–µ–µ: ${build_time}—Å)" >> "$recommendations_file"
        fi

        local memory_usage
        memory_usage=$(jq -r '.performance_metrics.memory_usage_mb' "$latest_perf")

        if [[ $memory_usage -gt 1024 ]]; then  # > 1GB
            echo "- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ (—Ç–µ–∫—É—â–µ–µ: ${memory_usage}MB)" >> "$recommendations_file"
        fi
    fi

    local latest_security
    latest_security=$(find "$metrics_dir" -name "security_*.json" | sort | tail -1)

    if [[ -f "$latest_security" ]]; then
        local cve_count
        cve_count=$(jq -r '.security_metrics.cve_count' "$latest_security")

        if [[ $cve_count -gt 0 ]]; then
            echo "- –ò—Å–ø—Ä–∞–≤–∏—Ç—å ${cve_count} CVE —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π" >> "$recommendations_file"
        fi
    fi

    echo "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: $recommendations_file"
}
```

## –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å–±–æ—Ä–∞
- [ ] –†–µ–≥—É–ª—è—Ä–Ω—ã–π —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–≤—Ä–µ–º—è, —Å–ª–æ–∂–Ω–æ—Å—Ç—å, –ø–æ–∫—Ä—ã—Ç–∏–µ)
- [ ] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏, —Ä–µ—Å—É—Ä—Å—ã)
- [ ] –û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (CVE, —É—è–∑–≤–∏–º–æ—Å—Ç–∏, –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏)
- [ ] –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π
- [ ] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π

### –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
- [ ] –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
- [ ] –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –≤—ã—è–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –∑–∞—Ä–∞–Ω–µ–µ
- [ ] –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –¥–∞–Ω–Ω—ã—Ö
- [ ] –°–∏—Å—Ç–µ–º–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–∞ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
- [ ] –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

### –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
- [ ] –†–µ–≥—É–ª—è—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–µ—Ç—Ä–∏–∫
- [ ] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
- [ ] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –º–µ—Ç—Ä–∏–∫
- [ ] –£–ª—É—á—à–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
- [ ] –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫