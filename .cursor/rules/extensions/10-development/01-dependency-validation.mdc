---
alwaysApply: ${cursor.file.path.endsWith('.mdc') || cursor.file.path.includes("layer/") || cursor.file.path.includes("config/")}
---

# Правило 01: Валидация зависимостей и связности

## Назначение правила
Определяет механизмы автоматической проверки зависимостей между слоями, предотвращает циклические ссылки, обеспечивает целостность конфигураций. Предоставляет инструменты для анализа и оптимизации связности системы расширений rpi-image-gen.

## Важное замечание 🔵 ИНФОРМАЦИЯ
**Часть команд анализа и рефакторинга является ЖЕЛАЕМОЙ функциональностью для будущего развития.** Команды типа `rpi-image-gen analyze --cohesion`, `rpi-image-gen layer --graph`, `rpi-image-gen layer --critical-path`, `rpi-image-gen refactor --*` пока не реализованы в текущей версии. Правило определяет требования для будущей реализации этих инструментов анализа.

## Обязательные требования 🔴 ОБЯЗАТЕЛЬНЫЕ

## Автоматическая валидация зависимостей

### Проверка при загрузке конфигурации
**🔴 ОБЯЗАТЕЛЬНОЕ**: Каждая конфигурация проверяется на корректность зависимостей:

```bash
# Автоматическая проверка при сборке
rpi-image-gen build -c config.yaml --validate-dependencies

# Ручная проверка
rpi-image-gen layer --validate config.yaml
```

**Проверяемые аспекты:**
- Наличие всех требуемых слоев
- Корректность версий зависимостей
- Отсутствие конфликтующих слоев
- Целостность цепочки зависимостей

### Детекция циклических зависимостей
**🔴 ОБЯЗАТЕЛЬНОЕ**: Система автоматически выявляет циклические ссылки:

```yaml
# Запрещенная конфигурация
layers:
  - security-basic
  - monitoring-core

# Где security-basic требует monitoring-core
# А monitoring-core требует security-basic
# Результат: циклическая зависимость
```

**Алгоритм детекции:**
```python
def detect_cycles(dependencies):
    visited = set()
    rec_stack = set()

    def dfs(node):
        visited.add(node)
        rec_stack.add(node)

        for dep in dependencies.get(node, []):
            if dep not in visited:
                if dfs(dep):
                    return True
            elif dep in rec_stack:
                return True  # Найден цикл

        rec_stack.remove(node)
        return False

    for node in dependencies:
        if node not in visited:
            if dfs(node):
                return True
    return False
```

## Анализ глубины зависимостей

### Ограничение максимальной глубины
**🔴 ОБЯЗАТЕЛЬНОЕ**: Максимальная глубина зависимостей не превышает 5 уровней:

```yaml
# Приемлемая глубина
layer-app → layer-service → layer-security → layer-base (4 уровня)

# Критическая глубина (требует рефакторинга)
layer-app → layer-ui → layer-api → layer-service → layer-security → layer-monitoring → layer-base (7 уровней)
```

### Метрики глубины зависимостей
**🔴 ОБЯЗАТЕЛЬНОЕ**: Отслеживание и оптимизация глубины:

```yaml
# Метрики для анализа
dependency_metrics:
  max_depth: 5
  avg_depth: 2.8
  layers_with_depth_5+: 3
  recommended_max_depth: 4
```

## Валидация совместимости версий

### Семантическое версионирование
**🔴 ОБЯЗАТЕЛЬНОЕ**: Слои следуют семантическому версионированию:

```yaml
# Формат версии
X-Env-Layer-Version: major.minor.patch

# Примеры
X-Env-Layer-Version: 1.0.0  # Стабильный релиз
X-Env-Layer-Version: 1.1.0  # Добавлена функциональность
X-Env-Layer-Version: 2.0.0  # Breaking changes
```

### Проверка совместимости
**🔴 ОБЯЗАТЕЛЬНОЕ**: Автоматическая проверка совместимости версий:

```yaml
# Матрица совместимости
compatibility_matrix:
  layer-a: "1.0.0"
  layer-b: ">=1.0.0, <2.0.0"  # Совместим с 1.x
  layer-c: "^1.2.0"            # Совместим с 1.2.x и выше в 1.x
```

## Анализ конфликтов слоев

### Детекция конфликтующих настроек
**🔴 ОБЯЗАТЕЛЬНОЕ**: Выявление конфликтов между переменными IGconf_*:

```yaml
# Конфликтующие настройки
layer-a:
  IGconf_security_mode: enforce

layer-b:
  IGconf_security_mode: audit  # Конфликт!

# Решение: явное разрешение конфликта
layer-combined:
  IGconf_security_mode: "${IGconf_security_base_mode:-enforce}"
```

### Таблица приоритетов разрешения конфликтов
**🔴 ОБЯЗАТЕЛЬНОЕ**: Определенные правила разрешения конфликтов:

```yaml
# Приоритеты разрешения
conflict_resolution:
  explicit_override: highest    # Явное переопределение в конфиге
  layer_order: high            # Порядок слоев в конфигурации
  version_priority: medium     # Новые версии имеют приоритет
  dependency_depth: low        # Глубина зависимостей
```

## Метрики качества связности

### Индекс связности конфигурации
**🔴 ОБЯЗАТЕЛЬНОЕ**: Расчет комплексного индекса качества:

```yaml
# Формула расчета
cohesion_index = (
    (1 - cycles_penalty) * 0.3 +
    (1 - depth_penalty) * 0.25 +
    (compatibility_score) * 0.25 +
    (reuse_score) * 0.2
) * 100

# Где:
# cycles_penalty = cycles_count * 0.5
# depth_penalty = max(0, max_depth - 4) * 0.1
# compatibility_score = compatible_layers / total_layers
# reuse_score = shared_variables / total_variables
```

### Отчет о качестве связности
**🔴 ОБЯЗАТЕЛЬНОЕ**: Генерация детального отчета:

```bash
# Генерация отчета
rpi-image-gen analyze --cohesion config.yaml --output cohesion-report.json

# Структура отчета
{
  "overall_score": 87.5,
  "metrics": {
    "dependency_depth": {"max": 4, "avg": 2.3},
    "cycles_detected": 0,
    "compatibility_issues": 2,
    "reuse_efficiency": 78.5
  },
  "recommendations": [
    "Рассмотрите объединение layer-a и layer-b для снижения глубины зависимостей",
    "Разрешите конфликты версий между security-core и monitoring-extended"
  ]
}
```

## Инструменты анализа зависимостей

### Графическое представление
**🔴 ОБЯЗАТЕЛЬНОЕ**: Визуализация зависимостей в виде графа:

```bash
# Генерация графа зависимостей
rpi-image-gen layer --graph config.yaml --output dependencies.dot

# Конвертация в изображение
dot -Tpng dependencies.dot -o dependencies.png

# Типы связей в графе:
# → (requires): жесткая зависимость
# ⇢ (optional): опциональная зависимость
# ⇠ (conflicts): конфликт слоев
```

### Анализ критических путей
**🔴 ОБЯЗАТЕЛЬНОЕ**: Выявление узких мест в зависимостях:

```bash
# Анализ критических путей
rpi-image-gen layer --critical-path config.yaml

# Вывод:
# Критический путь: app-layer → api-layer → db-layer → base-layer
# Максимальная глубина: 4
# Узкие места: db-layer (используется 8 слоями)
```

## Профилактика проблем связности

### Автоматическое рефакторинг
**🔴 ОБЯЗАТЕЛЬНОЕ**: Инструменты для улучшения связности:

```bash
# Извлечение общих зависимостей
rpi-image-gen refactor --extract-common layer/security-*.yaml --output layer/security-common.yaml

# Разбиение глубоких зависимостей
rpi-image-gen refactor --split-deep-dependencies config.yaml --max-depth 4

# Оптимизация порядка слоев
rpi-image-gen refactor --optimize-order config.yaml
```

### Мониторинг изменений
**🔴 ОБЯЗАТЕЛЬНОЕ**: Отслеживание влияния изменений на связность:

```yaml
# Отчет об изменениях
change_impact:
  added_layers: ["new-security-layer"]
  removed_layers: []
  modified_interfaces: ["IGconf_security_mode"]
  cohesion_impact: -2.3  # Незначительное ухудшение
  recommendations: [
    "Рассмотрите обновление зависимых слоев для использования новых интерфейсов"
  ]
```

## Интеграция с CI/CD

### Автоматические проверки
**🔴 ОБЯЗАТЕЛЬНОЕ**: Валидация в пайплайне сборки:

```yaml
# .github/workflows/validate.yml
steps:
  - name: Validate dependencies
    run: rpi-image-gen layer --validate config.yaml

  - name: Check cohesion metrics
    run: |
      score=$(rpi-image-gen analyze --cohesion config.yaml --format json | jq .overall_score)
      if (( $(echo "$score < 80" | bc -l) )); then
        echo "Cohesion score too low: $score"
        exit 1
      fi

  - name: Generate dependency graph
    run: rpi-image-gen layer --graph config.yaml --output dependencies.png
    if: always()
```

### Порог качества
**🔴 ОБЯЗАТЕЛЬНОЕ**: Минимальные требования к качеству:

```yaml
# Пороги качества
quality_gates:
  cohesion_score: 80
  max_dependency_depth: 5
  cycles_allowed: 0
  compatibility_issues: 0
```

## Лучшие практики валидации

### Постепенное улучшение
**🔴 ОБЯЗАТЕЛЬНОЕ**: Поэтапное повышение качества связности:

```yaml
# Этап 1: Базовая валидация
quality_targets:
  cohesion_score: 70
  max_depth: 7

# Этап 2: Средний уровень
quality_targets:
  cohesion_score: 80
  max_depth: 5

# Этап 3: Высокий уровень
quality_targets:
  cohesion_score: 90
  max_depth: 4
```

### Документирование зависимостей
**🔴 ОБЯЗАТЕЛЬНОЕ**: Подробная документация связей:

```markdown
## Зависимости слоя security-advanced

### Требуемые слои
- `security-basic` (>= 1.0.0): Базовые настройки безопасности
- `system-monitoring` (>= 2.1.0): Мониторинг системных событий

### Опциональные зависимости
- `audit-extended` (>= 1.2.0): Расширенный аудит (рекомендуется)

### Конфликты
- `security-minimal`: Взаимоисключающие настройки режима безопасности
```

## Метрики соблюдения правила 🔴 ОБЯЗАТЕЛЬНЫЕ

### Обязательные элементы
- [ ] Автоматическая валидация зависимостей при сборке
- [ ] Детекция циклических зависимостей
- [ ] Анализ глубины зависимостей
- [ ] Проверка совместимости версий
- [ ] Расчет индекса связности

### Качественные показатели
- [ ] Cohesion index > 80% для основных конфигураций
- [ ] Максимальная глубина зависимостей ≤ 5
- [ ] Отсутствие циклических зависимостей
- [ ] 100% совместимость версий в релизных конфигурациях
- [ ] Наличие графического представления зависимостей

### Автоматизированная проверка
- [ ] Интеграция валидации в CI/CD пайплайн
- [ ] Автоматическая генерация отчетов о качестве
- [ ] Мониторинг метрик связности со временем
- [ ] Предупреждения о ухудшении качества

### Источник
Создано как дополнение к правилу 00-rule-transitions.mdc для обеспечения автоматической проверки и поддержания связности системы расширений rpi-image-gen.