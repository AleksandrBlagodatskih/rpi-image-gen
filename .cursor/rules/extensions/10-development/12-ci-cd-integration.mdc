---
alwaysApply: ${cursor.file.path.includes(".github/") || cursor.file.path.includes("scripts/")}
---


# –ü—Ä–∞–≤–∏–ª–æ 04: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CI/CD —Å–∏—Å—Ç–µ–º–∞–º–∏

## –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏.

## –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ CI/CD –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### GitHub Actions Workflow üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï
```yaml
name: Build and Test Extension
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y qemu-user-static binfmt-support

    - name: Lint extension
      run: |
        rpi-image-gen metadata --lint layer/*.yaml
        rpi-image-gen layer --lint layer/*.yaml

    - name: Run unit tests
      run: |
        python3 -m pytest tests/unit/ -v

    - name: Build test image
      run: |
        rpi-image-gen build -c tests/test-config.yaml --dry-run

    - name: Generate SBOM
      run: |
        rpi-image-gen build -c config.yaml --sbom
```

### GitLab CI Pipeline üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï
```yaml
stages:
  - validate
  - test
  - build
  - deploy

validate_extension:
  stage: validate
  script:
    - rpi-image-gen metadata --lint layer/*.yaml
    - rpi-image-gen layer --describe $CI_EXTENSION_LAYER

test_extension:
  stage: test
  script:
    - python3 -m pytest tests/ --junitxml=report.xml
  artifacts:
    reports:
      junit: report.xml

build_image:
  stage: build
  script:
    - rpi-image-gen build -c config.yaml
  artifacts:
    paths:
      - work/image-*/image-*.img
    expire_in: 1 week

security_scan:
  stage: build
  script:
    - rpi-image-gen build -c config.yaml --sbom --cve-check
  allow_failure: true
```

## –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ CI/CD –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï

### Jenkins Pipeline
```groovy
pipeline {
    agent any

    stages {
        stage('Validate') {
            steps {
                sh 'rpi-image-gen metadata --lint layer/*.yaml'
                sh 'rpi-image-gen layer --describe ${EXTENSION_LAYER}'
            }
        }

        stage('Test') {
            steps {
                sh 'python3 -m pytest tests/ -v --junitxml=results.xml'
                junit 'results.xml'
            }
        }

        stage('Build') {
            steps {
                sh 'rpi-image-gen build -c config.yaml'
                archiveArtifacts artifacts: 'work/image-*/image-*.img', fingerprint: true
            }
        }

        stage('Security Scan') {
            steps {
                sh 'rpi-image-gen build -c config.yaml --sbom --cve-check'
                publishHTML(target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'security-reports',
                    reportFiles: 'sbom-report.html',
                    reportName: 'SBOM Security Report'
                ])
            }
        }

        stage('Deploy') {
            when {
                branch 'main'
            }
            steps {
                sh './deploy-extension.sh'
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        failure {
            mail to: 'team@company.com',
                 subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                 body: "Something is wrong with ${env.BUILD_URL}"
        }
    }
}
```

### Azure DevOps Pipeline
```yaml
trigger:
  branches:
    include:
    - main
    - develop

pool:
  vmImage: 'ubuntu-latest'

variables:
  EXTENSION_LAYER: 'your-extension-name'

stages:
- stage: Validate
  jobs:
  - job: Lint
    steps:
    - script: rpi-image-gen metadata --lint layer/*.yaml
      displayName: 'Lint extension metadata'

- stage: Test
  dependsOn: Validate
  jobs:
  - job: UnitTests
    steps:
    - script: python3 -m pytest tests/unit/ -v
      displayName: 'Run unit tests'

  - job: IntegrationTests
    steps:
    - script: rpi-image-gen build -c tests/test-config.yaml --dry-run
      displayName: 'Integration test build'

- stage: Build
  dependsOn: Test
  jobs:
  - job: BuildImage
    steps:
    - script: rpi-image-gen build -c config.yaml
      displayName: 'Build extension image'

    - publish: $(System.DefaultWorkingDirectory)/work/image-*/image-*.img
      artifact: extension-image

- stage: Deploy
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployToRegistry
    environment: production
    strategy:
      runOnce:
        deploy:
          steps:
          - script: ./deploy-to-registry.sh
            displayName: 'Deploy to extension registry'
```

## –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è CI/CD üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —ç—Ç–∞–ø–æ–≤ CI/CD
1. **Validate** - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
2. **Test** - –ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—å–Ω—ã—Ö –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
3. **Build** - –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
4. **Security** - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è SBOM
5. **Deploy** - –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ —Ä–µ–µ—Å—Ç—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ

#### –≠—Ç–∞–ø Validate üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï
```bash
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
rpi-image-gen metadata --lint layer/*.yaml

# –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–ª–æ–µ–≤
rpi-image-gen layer --describe your-extension-name

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
find . -name "*.sh" -exec bash -n {} \;

# –í–∞–ª–∏–¥–∞—Ü–∏—è YAML —Ñ–∞–π–ª–æ–≤
find . -name "*.yaml" -exec python3 -c "import yaml; yaml.safe_load(open('{}'))" \;
```

#### –≠—Ç–∞–ø Test üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï
```bash
# –ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
python3 -m pytest tests/unit/ -v --cov=extension --cov-report=xml

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
rpi-image-gen build -c tests/integration-config.yaml --dry-run

# –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
timeout 1800 rpi-image-gen build -c tests/perf-config.yaml

# –¢–µ—Å—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
for config in tests/compatibility/*.yaml; do
    rpi-image-gen build -c "$config" --dry-run
done
```

#### –≠—Ç–∞–ø Security üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï
```bash
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SBOM
rpi-image-gen build -c config.yaml --sbom

# –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
rpi-image-gen build -c config.yaml --sbom --cve-check

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
rpi-image-gen layer --list --depends your-extension-name --security

# –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤
gitleaks detect --verbose --redact --config .gitleaks.toml
```

### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏ üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

#### –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–±–æ—Ä–∫–∏
```yaml
# GitHub Actions
- name: Upload build artifacts
  uses: actions/upload-artifact@v3
  with:
    name: extension-image
    path: work/image-*/image-*.img
    retention-days: 7

# GitLab CI
build_image:
  artifacts:
    paths:
      - work/image-*/image-*.img
    expire_in: 1 week
    reports:
      sbom: sbom-report.json
```

#### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏—è–º–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
```bash
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–µ—Ä—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ git
EXTENSION_VERSION=$(git describe --tags --always)
BUILD_DATE=$(date -u +"%Y%m%dT%H%M%SZ")
ARTIFACT_NAME="extension-${EXTENSION_VERSION}-${BUILD_DATE}.img"

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å–±–æ—Ä–∫–∏
cat > build-metadata.json << EOF
{
  "version": "${EXTENSION_VERSION}",
  "build_date": "${BUILD_DATE}",
  "git_commit": "$(git rev-parse HEAD)",
  "git_branch": "$(git branch --show-current)",
  "build_host": "$(hostname)"
}
EOF
```

## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –ú–µ—Ç—Ä–∏–∫–∏ CI/CD
```yaml
# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
ci_metrics:
  build_time: "<–≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏>"
  test_coverage: "<–ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏>"
  security_score: "<—Ä–µ–π—Ç–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏>"
  artifact_size: "<—Ä–∞–∑–º–µ—Ä –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞>"

# –û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
notifications:
  on_failure: true
  on_security_issue: true
  on_performance_regression: true
```

### –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã
```bash
#!/bin/bash
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ CI/CD –∑–∞–ø—É—Å–∫–µ

generate_ci_report() {
    local build_status="$1"
    local report_file="ci-report-$(date +%Y%m%d-%H%M%S).md"

    cat > "$report_file" << EOF
# –û—Ç—á–µ—Ç –æ CI/CD –∑–∞–ø—É—Å–∫–µ

## –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è**: $(date)
- **–°—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∫–∏**: $build_status
- **–ö–æ–º–º–∏—Ç**: $(git rev-parse HEAD)
- **–í–µ—Ç–∫–∞**: $(git branch --show-current)

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
\`\`\`
$(python3 -m pytest tests/ --tb=short 2>&1)
\`\`\`

## –ú–µ—Ç—Ä–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- –£—è–∑–≤–∏–º–æ—Å—Ç–∏: $(grep -c "CRITICAL\|HIGH" security-scan.log 2>/dev/null || echo "0")
- SBOM —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: $(test -f sbom-report.json && echo "–î–∞" || echo "–ù–µ—Ç")

## –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- –í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏: $(cat build-time.log 2>/dev/null || echo "–ù–µ –∏–∑–º–µ—Ä–µ–Ω–æ")
- –†–∞–∑–º–µ—Ä –æ–±—Ä–∞–∑–∞: $(du -h work/image-*/image-*.img 2>/dev/null | cut -f1 || echo "–ù–µ –Ω–∞–π–¥–µ–Ω")

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
$(generate_recommendations "$build_status")
EOF

    echo "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $report_file"
}

generate_recommendations() {
    local status="$1"

    if [[ "$status" != "success" ]]; then
        echo "- –ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏"
        echo "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–±–æ—Ä–∫–∏"
        echo "- –û–±–Ω–æ–≤–∏—Ç–µ —Ç–µ—Å—Ç—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
    else
        echo "- –°–±–æ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ"
        echo "- –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–±–æ—Ä–∫–∏"
        echo "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    fi
}
```

## –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ —Ä–µ–µ—Å—Ç—Ä
```bash
#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

publish_extension() {
    local extension_name="$1"
    local version="$2"
    local registry_url="$3"

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
    if ! rpi-image-gen metadata --lint "layer/${extension_name}.yaml"; then
        echo "–û—à–∏–±–∫–∞: –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã"
        exit 1
    fi

    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    tar -czf "${extension_name}-${version}.tar.gz" \
        layer/ \
        config/ \
        tests/ \
        README.md \
        CHANGELOG.md

    # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ —Ä–µ–µ—Å—Ç—Ä
    curl -X POST "${registry_url}/api/extensions" \
        -H "Authorization: Bearer ${REGISTRY_TOKEN}" \
        -F "extension=@${extension_name}-${version}.tar.gz" \
        -F "metadata=$(cat layer/${extension_name}.yaml)"

    echo "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: ${extension_name}@${version}"
}
```

### –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
```yaml
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–∏ —Ä–µ–ª–∏–∑–µ
on:
  release:
    types: [published]

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Publish to Extension Registry
      run: |
        VERSION=${{ github.event.release.tag_name }}
        ./scripts/publish-extension.sh ${{ github.event.repository.name }} $VERSION ${{ secrets.REGISTRY_URL }}
```

## –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ CI/CD ‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï

### –ó–∞—â–∏—Ç–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤
```yaml
# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞–º–∏
secrets:
  registry_token:
    source: vault
    path: secret/ci/registry-token
  signing_key:
    source: aws-secretsmanager
    key: extension-signing-key
```

### –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏
```bash
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
verify_artifact_signature() {
    local artifact="$1"
    local signature="$2"
    local public_key="$3"

    if ! openssl dgst -sha256 -verify "$public_key" -signature "$signature" "$artifact"; then
        echo "–û—à–∏–±–∫–∞: –ø–æ–¥–ø–∏—Å—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞"
        exit 1
    fi

    echo "–ü–æ–¥–ø–∏—Å—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
}
```

## –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã CI/CD
- [ ] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∫–æ–º–º–∏—Ç–µ
- [ ] –í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
- [ ] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SBOM –¥–ª—è –∫–∞–∂–¥–æ–π —Å–±–æ—Ä–∫–∏
- [ ] –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- [ ] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Å–±–æ—Ä–∫–∏
- [ ] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã –æ —Å—Ç–∞—Ç—É—Å–µ

### –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
- [ ] –í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏ –≤ CI/CD < 30 –º–∏–Ω—É—Ç
- [ ] –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–±–æ—Ä–æ–∫ > 95%
- [ ] –ü–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
- [ ] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–ª–∏–∑–æ–≤
- [ ] –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

### –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
- [ ] –†–µ–≥—É–ª—è—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- [ ] –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–±–æ—Ä–∫–∏
- [ ] –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ—Å—Ç–æ–≤
- [ ] –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä—É—Ç–∏–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
- [ ] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π –∫–∞—á–µ—Å—Ç–≤–∞