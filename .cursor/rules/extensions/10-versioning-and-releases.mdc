---
alwaysApply: ${cursor.file.content.includes("version") || cursor.file.content.includes("Version")}
---


# –ü—Ä–∞–≤–∏–ª–æ 10: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏—è–º–∏ –∏ —Ä–µ–ª–∏–∑—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π

## –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–µ–ª–∏–∑–æ–≤ –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π rpi-image-gen.

## –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### 1. –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (SemVer) üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï
```bash
# –§–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏: MAJOR.MINOR.PATCH
# –ü—Ä–∏–º–µ—Ä: 2.1.3

MAJOR=2  # –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è API
MINOR=1  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
PATCH=3  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)

# –ü—Ä–∞–≤–∏–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π:
#
# MAJOR (X.y.z):
# - –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è API
# - –ò–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
# - –£–¥–∞–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
# - –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
#
# MINOR (x.Y.z):
# - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
# - –£–ª—É—á—à–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
# - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
# - –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ API –±–µ–∑ breaking changes
#
# PATCH (x.y.Z):
# - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
# - –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
# - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (patch level)
# - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
```

### –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏
```bash
#!/bin/bash
# –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

version_manager() {
    local action="$1"
    local extension_name="$2"
    shift 2

    case "$action" in
        "init")
            init_versioning "$extension_name"
            ;;
        "bump")
            bump_version "$extension_name" "$@"
            ;;
        "release")
            create_release "$extension_name" "$@"
            ;;
        "check")
            check_version_consistency "$extension_name"
            ;;
        "validate")
            validate_version_format "$extension_name"
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {init|bump|release|check|validate} extension-name [args...]"
            exit 1
            ;;
    esac
}

init_versioning() {
    local extension_name="$1"
    local version_file="VERSION"
    local changelog_file="CHANGELOG.md"

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤–µ—Ä—Å–∏–∏
    echo "1.0.0" > "$version_file"

    # –°–æ–∑–¥–∞–Ω–∏–µ CHANGELOG.md
    cat > "$changelog_file" << 'EOF'
# Changelog

–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É—é—Ç—Å—è –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ.

–§–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç [Semantic Versioning](https://semver.org/).

## [Unreleased]

### Added
- –ù–∞—á–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

### Changed
- –ù–∏—á–µ–≥–æ

### Deprecated
- –ù–∏—á–µ–≥–æ

### Removed
- –ù–∏—á–µ–≥–æ

### Fixed
- –ù–∏—á–µ–≥–æ

### Security
- –ù–∏—á–µ–≥–æ
EOF

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    if [[ -f "layer/${extension_name}.yaml" ]]; then
        sed -i "s/X-Env-Layer-Version:.*/X-Env-Layer-Version: 1.0.0/" "layer/${extension_name}.yaml"
    fi

    git add VERSION CHANGELOG.md "layer/${extension_name}.yaml"
    git commit -m "feat: initialize versioning system"

    echo "–°–∏—Å—Ç–µ–º–∞ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è $extension_name"
}

bump_version() {
    local extension_name="$1"
    local bump_type="$2"  # major, minor, patch
    local current_version
    local new_version

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
    if [[ -f "VERSION" ]]; then
        current_version=$(cat VERSION)
    else
        echo "–§–∞–π–ª VERSION –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: $0 init $extension_name"
        exit 1
    fi

    # –†–∞—Å—á–µ—Ç –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
    new_version=$(calculate_new_version "$current_version" "$bump_type")

    echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏: $current_version -> $new_version"

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤–µ—Ä—Å–∏–∏
    echo "$new_version" > VERSION

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    if [[ -f "layer/${extension_name}.yaml" ]]; then
        sed -i "s/X-Env-Layer-Version:.*/X-Env-Layer-Version: ${new_version}/" "layer/${extension_name}.yaml"
    fi

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ CHANGELOG
    update_changelog "$new_version" "$bump_type"

    # Git –∫–æ–º–º–∏—Ç
    git add VERSION CHANGELOG.md "layer/${extension_name}.yaml"
    git commit -m "chore: bump version to $new_version"

    echo "–í–µ—Ä—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ $new_version"
}

calculate_new_version() {
    local current_version="$1"
    local bump_type="$2"

    # –†–∞–∑–±–æ—Ä –≤–µ—Ä—Å–∏–∏
    IFS='.' read -ra VERSION_PARTS <<< "$current_version"
    local major="${VERSION_PARTS[0]}"
    local minor="${VERSION_PARTS[1]}"
    local patch="${VERSION_PARTS[2]}"

    case "$bump_type" in
        major)
            major=$((major + 1))
            minor=0
            patch=0
            ;;
        minor)
            minor=$((minor + 1))
            patch=0
            ;;
        patch)
            patch=$((patch + 1))
            ;;
        *)
            echo "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $bump_type" >&2
            exit 1
            ;;
    esac

    echo "${major}.${minor}.${patch}"
}

update_changelog() {
    local new_version="$1"
    local bump_type="$2"
    local date
    date=$(date +%Y-%m-%d)

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ–∫—Ü–∏–∏ –≤ CHANGELOG
    local temp_changelog
    temp_changelog=$(mktemp)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
    cat > "$temp_changelog" << EOF
# Changelog

–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É—é—Ç—Å—è –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ.

–§–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç [Semantic Versioning](https://semver.org/).

## [${new_version}] - ${date}

### Added
- –ù–∏—á–µ–≥–æ

### Changed
- –ù–∏—á–µ–≥–æ

### Deprecated
- –ù–∏—á–µ–≥–æ

### Removed
- –ù–∏—á–µ–≥–æ

### Fixed
- –ù–∏—á–µ–≥–æ

### Security
- –ù–∏—á–µ–≥–æ

EOF

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ CHANGELOG
    if [[ -f "CHANGELOG.md" ]]; then
        # –ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ
        tail -n +5 CHANGELOG.md >> "$temp_changelog"
    fi

    mv "$temp_changelog" CHANGELOG.md

    echo "CHANGELOG.md –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≤–µ—Ä—Å–∏–∏ $new_version"
}

create_release() {
    local extension_name="$1"
    local version="$2"
    local release_notes="${3:-}"

    echo "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ $extension_name –≤–µ—Ä—Å–∏–∏ $version"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–µ–ª–∏–∑—É
    if ! check_release_readiness "$extension_name" "$version"; then
        echo "–†–µ–ª–∏–∑ –Ω–µ –≥–æ—Ç–æ–≤. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ."
        exit 1
    fi

    # –°–æ–∑–¥–∞–Ω–∏–µ git —Ç–µ–≥–∞
    git tag -a "v$version" -m "Release version $version"

    # Push —Ç–µ–≥–∞
    git push origin "v$version"

    # –°–æ–∑–¥–∞–Ω–∏–µ GitHub —Ä–µ–ª–∏–∑–∞
    if command -v gh >/dev/null 2>&1; then
        local notes_file
        if [[ -n "$release_notes" ]] && [[ -f "$release_notes" ]]; then
            gh release create "v$version" \
                --title "Release v$version" \
                --notes-file "$release_notes" \
                --latest
        else
            gh release create "v$version" \
                --title "Release v$version" \
                --generate-notes \
                --latest
        fi
    fi

    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Ä–µ–ª–∏–∑–∞
    create_release_archive "$extension_name" "$version"

    echo "–†–µ–ª–∏–∑ $version —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"
}

check_release_readiness() {
    local extension_name="$1"
    local version="$2"

    local issues=0

    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–µ–ª–∏–∑—É..."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    if [[ -f "layer/${extension_name}.yaml" ]]; then
        local metadata_version
        metadata_version=$(grep "X-Env-Layer-Version:" "layer/${extension_name}.yaml" | sed 's/.*: //' | tr -d ' ')

        if [[ "$metadata_version" != "$version" ]]; then
            echo "–û–®–ò–ë–ö–ê: –í–µ—Ä—Å–∏—è –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö ($metadata_version) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–µ—Ä—Å–∏–∏ —Ä–µ–ª–∏–∑–∞ ($version)"
            ((issues++))
        fi
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CHANGELOG
    if ! grep -q "^## \[${version}\]" CHANGELOG.md; then
        echo "–û–®–ò–ë–ö–ê: –í–µ—Ä—Å–∏—è $version –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ CHANGELOG.md"
        ((issues++))
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤
    if [[ -d "tests" ]] && ! run_tests; then
        echo "–û–®–ò–ë–ö–ê: –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç"
        ((issues++))
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω—Ç–µ—Ä–∞
    if ! run_linter "$extension_name"; then
        echo "–û–®–ò–ë–ö–ê: –õ–∏–Ω—Ç–µ—Ä –≤—ã—è–≤–∏–ª –ø—Ä–æ–±–ª–µ–º—ã"
        ((issues++))
    fi

    return $issues
}

create_release_archive() {
    local extension_name="$1"
    local version="$2"

    local archive_name="${extension_name}-${version}.tar.gz"
    local temp_dir
    temp_dir=$(mktemp -d)

    echo "–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Ä–µ–ª–∏–∑–∞: $archive_name"

    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    cp -r layer/ "$temp_dir/"
    cp -r config/ "$temp_dir/" 2>/dev/null || true
    cp -r scripts/ "$temp_dir/" 2>/dev/null || true
    cp -r docs/ "$temp_dir/" 2>/dev/null || true
    cp README.md CHANGELOG.md LICENSE VERSION "$temp_dir/" 2>/dev/null || true

    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
    tar -czf "$archive_name" -C "$temp_dir" .

    # –û—á–∏—Å—Ç–∫–∞
    rm -rf "$temp_dir"

    echo "–ê—Ä—Ö–∏–≤ —Ä–µ–ª–∏–∑–∞ —Å–æ–∑–¥–∞–Ω: $archive_name"
}

check_version_consistency() {
    local extension_name="$1"

    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏–π –¥–ª—è $extension_name"

    local file_version=""
    local metadata_version=""
    local git_tag=""

    # –í–µ—Ä—Å–∏—è –∏–∑ —Ñ–∞–π–ª–∞
    if [[ -f "VERSION" ]]; then
        file_version=$(cat VERSION)
    fi

    # –í–µ—Ä—Å–∏—è –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    if [[ -f "layer/${extension_name}.yaml" ]]; then
        metadata_version=$(grep "X-Env-Layer-Version:" "layer/${extension_name}.yaml" | sed 's/.*: //' | tr -d ' ')
    fi

    # –ü–æ—Å–ª–µ–¥–Ω–∏–π git —Ç–µ–≥
    if git rev-parse --git-dir >/dev/null 2>&1; then
        git_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
        git_tag=${git_tag#v}  # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ v
    fi

    echo "–í–µ—Ä—Å–∏—è –≤ —Ñ–∞–π–ª–µ VERSION: $file_version"
    echo "–í–µ—Ä—Å–∏—è –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: $metadata_version"
    echo "–ü–æ—Å–ª–µ–¥–Ω–∏–π git —Ç–µ–≥: $git_tag"

    if [[ "$file_version" != "$metadata_version" ]]; then
        echo "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–µ—Ä—Å–∏–∏ –≤ —Ñ–∞–π–ª–µ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"
        return 1
    fi

    if [[ -n "$git_tag" && "$git_tag" != "none" && "$git_tag" != "$file_version" ]]; then
        echo "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ git —Ç–µ–≥–∞ –∏ –≤–µ—Ä—Å–∏–∏ —Ñ–∞–π–ª–∞"
        return 1
    fi

    echo "–í–µ—Ä—Å–∏–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã"
    return 0
}

validate_version_format() {
    local extension_name="$1"

    echo "–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤–µ—Ä—Å–∏–π –¥–ª—è $extension_name"

    local version_regex='^[0-9]+\.[0-9]+\.[0-9]+$'

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ VERSION
    if [[ -f "VERSION" ]]; then
        local file_version
        file_version=$(cat VERSION)

        if [[ ! "$file_version" =~ $version_regex ]]; then
            echo "–û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏ –≤ —Ñ–∞–π–ª–µ VERSION: $file_version"
            echo "–û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç: MAJOR.MINOR.PATCH (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.2.3)"
            return 1
        fi
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    if [[ -f "layer/${extension_name}.yaml" ]]; then
        local metadata_version
        metadata_version=$(grep "X-Env-Layer-Version:" "layer/${extension_name}.yaml" | sed 's/.*: //' | tr -d ' ')

        if [[ ! "$metadata_version" =~ $version_regex ]]; then
            echo "–û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: $metadata_version"
            return 1
        fi
    fi

    echo "–§–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
    return 0
}
```

### 2. –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –≤–µ—Ä—Å–∏–π üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï
```markdown
# –ü—Ä–∏–º–µ—Ä –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –≤–µ—Ä—Å–∏–π —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

## v2.1.0 (Current) - Active Development
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
- –£–ª—É—á—à–µ–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏

## v2.0.0 - Major Release
- –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
- –ò–∑–º–µ–Ω–µ–Ω API –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

## v1.5.3 - Patch Release
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- –û–±–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
- –£–ª—É—á—à–µ–Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å

## v1.0.0 - Initial Release
- –ü–µ—Ä–≤–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
- –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
- –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ > 80%

## –°—Ç–∞–¥–∏–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞:

### 1. Development (–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞)
- –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
- –í–µ—Ä—Å–∏—è: x.y.z-dev –∏–ª–∏ x.y.z-alpha.x

### 2. Release Candidate (–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞ —Ä–µ–ª–∏–∑)
- –ö–æ–¥ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
- –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã
- –í–µ—Ä—Å–∏—è: x.y.z-rc.x

### 3. Stable Release (–°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–µ–ª–∏–∑)
- –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω
- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞
- –í–µ—Ä—Å–∏—è: x.y.z

### 4. Maintenance (–ü–æ–¥–¥–µ—Ä–∂–∫–∞)
- –¢–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∏ security –ø–∞—Ç—á–∏
- –í–µ—Ä—Å–∏—è: x.y.(z+1), x.y.(z+2), ...

### 5. End of Life (–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏)
- –†–µ–ª–∏–∑ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
```

## –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–ª–∏–∑–∞ üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–ª–∏–∑–∞ üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï
```bash
#!/bin/bash
# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∫ —Ä–µ–ª–∏–∑—É

prepare_release() {
    local extension_name="$1"
    local version="$2"

    echo "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–ª–∏–∑–∞ $extension_name –≤–µ—Ä—Å–∏–∏ $version"

    # 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö..."
    sed -i "s/X-Env-Layer-Version:.*/X-Env-Layer-Version: ${version}/" "layer/${extension_name}.yaml"

    # 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CHANGELOG.md
    echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CHANGELOG..."
    local date
    date=$(date +%Y-%m-%d)

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å—å—é
    local temp_changelog
    temp_changelog=$(mktemp)

    cat > "$temp_changelog" << EOF
# Changelog

–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É—é—Ç—Å—è –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ.

–§–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç [Semantic Versioning](https://semver.org/).

## [${version}] - ${date}

### Added
- –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

### Changed
- –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö

### Deprecated
- –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

### Removed
- –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

### Fixed
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏

### Security
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

EOF

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ CHANGELOG (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if [[ -f "CHANGELOG.md" ]]; then
        tail -n +5 CHANGELOG.md >> "$temp_changelog"
    fi

    mv "$temp_changelog" CHANGELOG.md

    # 3. –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞
    echo "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
    if ! run_full_test_suite; then
        echo "–û–®–ò–ë–ö–ê: –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã"
        exit 1
    fi

    # 4. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω—Ç–∏–Ω–≥–∞
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω—Ç–µ—Ä–∞..."
    if ! rpi-image-gen metadata --lint "layer/${extension_name}.yaml"; then
        echo "–û–®–ò–ë–ö–ê: –õ–∏–Ω—Ç–µ—Ä –≤—ã—è–≤–∏–ª –ø—Ä–æ–±–ª–µ–º—ã"
        exit 1
    fi

    # 5. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞
    echo "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞..."
    if ! rpi-image-gen build -c "config/${extension_name}.yaml" --dry-run; then
        echo "–û–®–ò–ë–ö–ê: –°–±–æ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –Ω–µ—É–¥–∞—á–µ–π"
        exit 1
    fi

    # 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SBOM
    echo "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SBOM..."
    rpi-image-gen build -c "config/${extension_name}.yaml" --sbom

    echo "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–µ–ª–∏–∑—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

run_full_test_suite() {
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
    echo "–ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
    python3 -m pytest tests/unit/ -v --tb=short || return 1

    echo "–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
    rpi-image-gen build -c tests/integration-config.yaml --dry-run || return 1

    echo "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."
    timeout 600 rpi-image-gen build -c tests/perf-config.yaml || return 1

    echo "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"
    return 0
}
```

### 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï
```bash
#!/bin/bash
# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

create_release_process() {
    local extension_name="$1"
    local version="$2"

    echo "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ $extension_name –≤–µ—Ä—Å–∏–∏ $version"

    # –¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
    echo "–°–æ–∑–¥–∞–Ω–∏–µ git —Ç–µ–≥–∞..."
    git add .
    git commit -m "chore: prepare release v$version" 2>/dev/null || true
    git tag -a "v$version" -m "Release version $version"

    # Push –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ —Ç–µ–≥–æ–≤
    echo "–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π..."
    git push origin main
    git push origin "v$version"

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ –Ω–∞ GitHub
    echo "–°–æ–∑–¥–∞–Ω–∏–µ GitHub —Ä–µ–ª–∏–∑–∞..."
    if command -v gh >/dev/null 2>&1; then
        gh release create "v$version" \
            --title "Release v$version" \
            --notes-file CHANGELOG.md \
            --latest
    fi

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞—Å—Å–µ—Ç–æ–≤
    upload_release_assets "$extension_name" "$version"

    echo "–†–µ–ª–∏–∑ v$version —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"
}

upload_release_assets() {
    local extension_name="$1"
    local version="$2"

    echo "–ó–∞–≥—Ä—É–∑–∫–∞ –∞—Å—Å–µ—Ç–æ–≤ —Ä–µ–ª–∏–∑–∞..."

    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤
    git archive --format=tar.gz --prefix="${extension_name}-${version}/" \
        -o "${extension_name}-${version}-source.tar.gz" "v$version"

    # –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ GitHub CLI
    if command -v gh >/dev/null 2>&1; then
        gh release upload "v$version" \
            "${extension_name}-${version}-source.tar.gz" \
            "sbom-report.json" \
            "CHANGELOG.md"
    fi

    echo "–ê—Å—Å–µ—Ç—ã —Ä–µ–ª–∏–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
}
```

### 3. –ü–æ—Å—Ç-—Ä–µ–ª–∏–∑–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï
```bash
#!/bin/bash
# –ü–æ—Å—Ç-—Ä–µ–ª–∏–∑–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

post_release_activities() {
    local extension_name="$1"
    local version="$2"

    echo "–ù–∞—á–∞–ª–æ –ø–æ—Å—Ç-—Ä–µ–ª–∏–∑–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è $extension_name v$version"

    # 1. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
    echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è..."
    setup_usage_monitoring "$extension_name" "$version"

    # 2. –°–±–æ—Ä –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–±–æ—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤..."
    setup_feedback_collection "$extension_name" "$version"

    # 3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫
    echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫..."
    setup_error_monitoring "$extension_name" "$version"

    # 4. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–ª–∏–∑–∞
    echo "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–ª–∏–∑–∞..."
    plan_next_release "$extension_name" "$version"

    # 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."
    check_documentation_updates "$extension_name" "$version"

    echo "–ü–æ—Å—Ç-—Ä–µ–ª–∏–∑–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
}

setup_usage_monitoring() {
    local extension_name="$1"
    local version="$2"

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–æ–∫
    echo "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–æ–∫ —Ä–µ–ª–∏–∑–∞ v$version..."

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Ç—Ä–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    cat > "usage-monitoring.json" << EOF
    {
        "extension": "$extension_name",
        "version": "$version",
        "release_date": "$(date -Iseconds)",
        "metrics": {
            "downloads": 0,
            "active_users": 0,
            "error_reports": 0,
            "feedback_count": 0
        }
    }
EOF

    echo "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

setup_feedback_collection() {
    local extension_name="$1"
    local version="$2"

    # –°–æ–∑–¥–∞–Ω–∏–µ issue —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
    cat > ".github/ISSUE_TEMPLATE/release-feedback.md" << EOF
    ---
    name: Release Feedback
    about: –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ —Ä–µ–ª–∏–∑–µ v$version
    title: "[Feedback v$version] "
    labels: feedback, release
    ---

    ## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏
    - **–í–µ—Ä—Å–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è**: $version
    - **–î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞**: $(date +%Y-%m-%d)
    - **–í–∞—à–∞ –û–°**: 
    - **–í–µ—Ä—Å–∏—è rpi-image-gen**:

    ## –û—Ç–∑—ã–≤ –æ —Ä–µ–ª–∏–∑–µ

    ### –ß—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ
    <!-- –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ —ç—Ç–æ–º —Ä–µ–ª–∏–∑–µ -->

    ### –ü—Ä–æ–±–ª–µ–º—ã –∏ —É–ª—É—á—à–µ–Ω–∏—è
    <!-- –û–ø–∏—à–∏—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é -->

    ### –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–µ–ª–∏–∑–æ–≤
    <!-- –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –≤–∏–¥–µ—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö -->
EOF

    echo "–°–±–æ—Ä –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

setup_error_monitoring() {
    local extension_name="$1"
    local version="$2"

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–±–æ—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ –æ–± –æ—à–∏–±–∫–∞—Ö
    cat > "error-monitoring-config.json" << EOF
    {
        "extension": "$extension_name",
        "version": "$version",
        "error_tracking": {
            "github_issues": true,
            "error_log_analysis": true,
            "user_reports": true
        },
        "alerts": {
            "critical_errors_threshold": 5,
            "error_rate_threshold": 0.1
        }
    }
EOF

    echo "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

plan_next_release() {
    local extension_name="$1"
    local version="$2"

    # –°–æ–∑–¥–∞–Ω–∏–µ roadmap –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–ª–∏–∑–∞
    local next_version
    next_version=$(calculate_next_version "$version")

    cat > "ROADMAP-${next_version}.md" << EOF
    # Roadmap –¥–ª—è –≤–µ—Ä—Å–∏–∏ $next_version

    ## –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

    ### Major Changes
    - [ ] –ö—Ä—É–ø–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

    ### Minor Features
    - [ ] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    - [ ] –£–ª—É—á—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞

    ### Patches
    - [ ] –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
    - [ ] –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    - [ ] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

    ## –í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞
    - **–ù–∞—á–∞–ª–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏**: $(date +%Y-%m-%d -d "+1 month")
    - **Release Candidate**: $(date +%Y-%m-%d -d "+2 months")
    - **Stable Release**: $(date +%Y-%m-%d -d "+3 months")

    ## –ö—Ä–∏—Ç–µ—Ä–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    - [ ] –í—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã
    - [ ] –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ > 85%
    - [ ] –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞
    - [ ] –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ —É—Ö—É–¥—à–∏–ª–∞—Å—å
    - [ ] –ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
EOF

    echo "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–ª–∏–∑–∞: $next_version"
}

check_documentation_updates() {
    local extension_name="$1"
    local version="$2"

    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ README
    if ! grep -q "$version" README.md; then
        echo "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: README.md –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ $version"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CHANGELOG
    if ! grep -q "$version" CHANGELOG.md; then
        echo "–û–®–ò–ë–ö–ê: CHANGELOG.md –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ $version"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤
    if [[ -d "examples" ]]; then
        local outdated_examples
        outdated_examples=$(find examples -name "*.yaml" -exec grep -l "version.*:" {} \; | xargs grep -L "$version" 2>/dev/null || true)

        if [[ -n "$outdated_examples" ]]; then
            echo "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –°–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∏–º–µ—Ä—ã –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à—É—é –≤–µ—Ä—Å–∏—é:"
            echo "$outdated_examples"
        fi
    fi

    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

calculate_next_version() {
    local current_version="$1"
    local next_type="${2:-minor}"  # major, minor, patch

    # –†–∞–∑–±–æ—Ä —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
    IFS='.' read -ra VERSION_PARTS <<< "$current_version"
    local major="${VERSION_PARTS[0]}"
    local minor="${VERSION_PARTS[1]}"
    local patch="${VERSION_PARTS[2]}"

    case "$next_type" in
        major)
            echo "$((major + 1)).0.0"
            ;;
        minor)
            echo "${major}.$((minor + 1)).0"
            ;;
        patch)
            echo "${major}.${minor}.$((patch + 1))"
            ;;
        *)
            echo "${major}.$((minor + 1)).0"
            ;;
    esac
}
```

## –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏ ‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï

### CI/CD –¥–ª—è –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
```yaml
# .github/workflows/version-management.yml
name: Version Management

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  version-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Check version consistency
      run: |
        ./scripts/version-manager.sh check ${{ github.event.repository.name }}

    - name: Validate version format
      run: |
        ./scripts/version-manager.sh validate ${{ github.event.repository.name }}

  automated-versioning:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Automated version bump
      run: |
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if git log --oneline -1 | grep -q "feat:"; then
            BUMP_TYPE="minor"
        elif git log --oneline -1 | grep -q "fix:"; then
            BUMP_TYPE="patch"
        elif git log --oneline -1 | grep -q "BREAKING CHANGE"; then
            BUMP_TYPE="major"
        else
            BUMP_TYPE="patch"
        fi

        ./scripts/version-manager.sh bump ${{ github.event.repository.name }} $BUMP_TYPE

    - name: Create release
      if: env.BUMP_TYPE != 'patch'
      run: |
        VERSION=$(cat VERSION)
        ./scripts/version-manager.sh release ${{ github.event.repository.name }} $VERSION

    - name: Push changes
      run: |
        git push origin main --tags
```

### –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
```bash
#!/bin/bash
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

update_dependencies() {
    local extension_name="$1"

    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è $extension_name..."

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ Debian
    if [[ -f "layer/${extension_name}.yaml" ]]; then
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤
        local packages
        packages=$(grep -A 50 "^packages:" "layer/${extension_name}.yaml" | grep "^  -" | sed 's/  - //' | tr '\n' ' ')

        if [[ -n "$packages" ]]; then
            echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤: $packages"

            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            cat > "update-dependencies.sh" << EOF
#!/bin/bash
set -e

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤
apt-get update

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
apt-get install --only-upgrade -y $packages

# –û—á–∏—Å—Ç–∫–∞
apt-get autoremove -y
apt-get autoclean

echo "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
EOF

            chmod +x "update-dependencies.sh"
        fi
    fi

    echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}
```

## –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
- [ ] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
- [ ] –ù–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ VERSION
- [ ] –í–µ–¥–µ–Ω–∏–µ CHANGELOG.md
- [ ] –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –≤–µ—Ä—Å–∏–π –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö
- [ ] –°–æ–∑–¥–∞–Ω–∏–µ git —Ç–µ–≥–æ–≤ –¥–ª—è —Ä–µ–ª–∏–∑–æ–≤

### –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ä–µ–ª–∏–∑–æ–≤
- [ ] –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Ä–µ–ª–∏–∑–æ–º
- [ ] –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–∏–Ω—Ç–µ—Ä–∞ –ø–µ—Ä–µ–¥ —Ä–µ–ª–∏–∑–æ–º
- [ ] –ù–∞–ª–∏—á–∏–µ SBOM –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–ª–∏–∑–∞
- [ ] –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —Ä–µ–ª–∏–∑–∞
- [ ] –ê—Ä—Ö–∏–≤—ã —Ä–µ–ª–∏–∑–æ–≤ —Å–æ–∑–¥–∞–Ω—ã –∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã

### –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
- [ ] –†–µ–≥—É–ª—è—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
- [ ] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–ª–∏–∑–æ–≤
- [ ] –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á
- [ ] –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–µ–ª–∏–∑–æ–≤
- [ ] –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Ä–µ–ª–∏–∑–∞