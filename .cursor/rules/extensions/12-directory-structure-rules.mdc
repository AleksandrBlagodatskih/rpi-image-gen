---
alwaysApply: ${cursor.file.path.includes("layer/") || cursor.file.path.includes("config/")}
---


# Правило 12: Правила и паттерны кода для каждого каталога

## Назначение правила
Определяет специфические правила и паттерны кодирования для каждого каталога в структуре расширений rpi-image-gen.

## Структура проекта и назначение каталогов 🔴 ОВЯЗАТЕЛЬНЫЕ

```
rpi-image-gen/
├── bin/                    # Исполняемые файлы и утилиты
├── config/                 # Конфигурационные файлы сборки
├── device/                 # Специфичные настройки устройств
├── docs/                   # Документация проекта
├── examples/               # Примеры расширений и использования
├── image/                  # Специфичные настройки образов
├── layer/                  # Библиотека слоев системы
├── layer-hooks/           # Хуки для слоев
├── lib/                    # Библиотеки и вспомогательные скрипты
├── scripts/               # Скрипты для различных этапов сборки
├── site/                  # Python модули проекта
├── templates/             # Шаблоны для генерации документации
├── test/                  # Тесты проекта
└── work/                  # Рабочая директория сборки
```

## bin/ - Исполняемые файлы и утилиты 🔴 ОВЯЗАТЕЛЬНЫЕ

### Назначение
Каталог содержит исполняемые скрипты и утилиты для работы с rpi-image-gen.

### Правила именования
- **Исполняемые скрипты**: `*.sh` (bash скрипты)
- **Бинарные утилиты**: без расширения или `.py` для Python скриптов
- **Утилиты**: `*-helper`, `*-tool`, функциональные названия

### Стандарты кодирования
```bash
#!/bin/bash
# shellcheck disable=SC2154,SC2086

set -euo pipefail

# Обязательные переменные окружения
readonly SCRIPT_NAME="$(basename "${BASH_SOURCE[0]}")"
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Функции логирования
log_info() { echo "[$SCRIPT_NAME] INFO: $*"; }
log_warn() { echo "[$SCRIPT_NAME] WARN: $*" >&2; }
log_error() { echo "[$SCRIPT_NAME] ERROR: $*" >&2; }

# Функция завершения с ошибкой
die() {
    log_error "$*"
    exit 1
}

# Проверка зависимостей
check_dependencies() {
    local deps=("tool1" "tool2" "tool3")
    for dep in "${deps[@]}"; do
        command -v "$dep" >/dev/null 2>&1 || die "Требуется установить: $dep"
    done
}

# Основная логика
main() {
    check_dependencies

    # Реализация основной функциональности
    log_info "Запуск операции"

    # Возврат кода успеха
    return 0
}

# Запуск главной функции
main "$@"
```

### Паттерны использования
- **Утилиты командной строки** должны поддерживать `--help` и `--version`
- **Интерактивные утилиты** должны проверять переменную `$INTERACTIVE`
- **Безопасные операции** должны использовать `set -euo pipefail`

### Примеры файлов
- `runner` - исполнитель хуков в контейнере
- `uchroot` - безопасный chroot исполнитель
- `ig` - инструмент управления слоями

## config/ - Конфигурационные файлы сборки 🔴 ОВЯЗАТЕЛЬНЫЕ

### Назначение
Конфигурации сборки образов в YAML формате.

### Правила именования
- **Основные конфигурации**: `{distro}-{variant}.yaml` (например: `bookworm-minbase.yaml`)
- **Специфичные конфигурации**: `{feature}-{distro}.yaml`
- **Пользовательские конфигурации**: `{project}-{config}.yaml`

### Стандарты кодирования
```yaml
# Метаданные конфигурации (комментарии в начале файла)
# Назначение: Минимальная конфигурация Debian Bookworm
# Версия: 1.0.0
# Требования: Должна выполняться первой в цепочке сборки

# Основная секция конфигурации
device:
  layer: pi5                    # Слой устройства (обязательно)
  hostname: rpi-${HOST_SUFFIX}  # Шаблон имени хоста
  user: pi                     # Пользователь системы

image:
  layer: image-rpios           # Слой образа (обязательно)
  boot_part_size: 200%         # Размер загрузочного раздела
  root_part_size: 300%         # Размер корневого раздела
  name: deb12-arm64-min        # Имя результирующего образа

layer:
  base: bookworm-minbase       # Базовый слой (обязательно)
  # Дополнительные слои перечисляются здесь
  security: security-minimal
  network: net-misc
```

### Паттерны использования
- **Иерархическая структура** с обязательными секциями
- **Переменные окружения** в формате `${VAR_NAME}`
- **Комментарии** для документирования каждой секции

## device/ - Специфичные настройки устройств ⚠️ РЕКОМЕНДУЕМЫЕ

### Назначение
Конфигурации и настройки для конкретных моделей Raspberry Pi.

### Структура каталогов
```
device/
├── {device_name}/           # Название устройства (pi5, cm4, zero2w)
│   ├── device.yaml         # Основная конфигурация устройства
│   ├── device.adoc         # Документация устройства
│   ├── bdebstrap/          # Хуки для этапов bdebstrap
│   │   ├── setup*         # Хуки этапа setup
│   │   ├── essential*     # Хуки этапа essential
│   │   ├── customize*     # Хуки этапа customize
│   │   └── cleanup*       # Хуки этапа cleanup
│   ├── initramfs-tools/   # Специфичные настройки initramfs
│   └── rootfs-overlay/    # Оверлеи файловой системы
```

### Стандарты кодирования для device.yaml
```yaml
# METABEGIN
# X-Env-Layer-Name: pi5
# X-Env-Layer-Category: device
# X-Env-Layer-Description: Конфигурация для Raspberry Pi 5
# X-Env-Layer-Version: 1.0.0
# X-Env-Layer-Requires: essential,rpi-base
# X-Env-VarPrefix: rpi5
#
# X-Env-Var-firmware_version: latest
# X-Env-Var-firmware_version-Description: Версия firmware для загрузки
# X-Env-Var-firmware_version-Required: false
# X-Env-Var-firmware_version-Valid: latest,stable,beta
# METAEND
---
mmdebstrap:
  packages:
    - raspberrypi-bootloader
    - raspberrypi-kernel
    - linux-firmware-raspi
  customize-hooks:
    - |
      # Настройка специфичных для устройства параметров
      echo "Настройка устройства: ${IGconf_device_hostname}"
```

### Паттерны для хуков устройств
```bash
#!/bin/bash
# device/{device_name}/bdebstrap/customize-device-setup

set -euo pipefail

# Специфичная настройка для устройства
configure_device_specifics() {
    local device_type="$1"

    case "$device_type" in
        "pi5")
            # Настройка для Raspberry Pi 5
            configure_pi5_specifics
            ;;
        "cm4")
            # Настройка для Compute Module 4
            configure_cm4_specifics
            ;;
        *)
            warn "Неизвестный тип устройства: $device_type"
            ;;
    esac
}

configure_pi5_specifics() {
    # Установка специфичных пакетов для Pi 5
    apt-get install -y raspberrypi-bootloader-pi5

    # Настройка специфичных параметров ядра
    cat >> /etc/modules << 'EOF'
bcm2712_wdt
bcm2712_thermal
EOF
}

# Вызов основной функции
configure_device_specifics "${IGconf_device_type:-pi5}"
```

## docs/ - Документация проекта 🔴 ОВЯЗАТЕЛЬНЫЕ

### Назначение
Документация проекта в различных форматах.

### Структура каталогов
```
docs/
├── api/                    # API документация
├── guides/                 # Руководства пользователя
├── architecture/           # Архитектурная документация
├── deployment/             # Документация развертывания
├── troubleshooting/        # Устранение неисправностей
└── examples/               # Примеры использования
```

### Форматы документации
- **README.md** - основная документация проекта
- **CHANGELOG.md** - история изменений
- **CONTRIBUTING.md** - руководство для контрибьюторов
- **API.md** - документация API

### Стандарты документирования
```markdown
# Название документа

[![License](https://img.shields.io/badge/License-MIT-blue.svg)](LICENSE)
[![Version](https://img.shields.io/badge/Version-1.0.0-green.svg)](https://github.com/user/project/releases)

## Описание

Краткое описание назначения документа.

## Содержание

- [Раздел 1](#раздел-1)
- [Раздел 2](#раздел-2)

## Раздел 1

### Подраздел

Код примера:

```bash
# Пример кода
echo "Hello World"
```

### Таблица

| Столбец 1 | Столбец 2 | Описание |
|-----------|-----------|----------|
| Значение 1 | Значение 2 | Описание значения |

## Ссылки

- [Ссылка 1](url1)
- [Ссылка 2](url2)
```

## examples/ - Примеры расширений и использования ⚠️ РЕКОМЕНДУЕМЫЕ

### Назначение
Рабочие примеры использования расширений.

### Структура каталогов
```
examples/
├── basic/                  # Базовые примеры
├── advanced/               # Продвинутые примеры
├── device-specific/        # Специфичные для устройств
├── industry/               # Отраслевые примеры
└── tutorials/              # Пошаговые руководства
```

### Стандарты для примеров
```yaml
# examples/basic/web-kiosk-config.yaml
---
# Пример конфигурации веб-киоска
# Этот пример показывает базовую настройку устройства как веб-киоска

device:
  layer: pi4
  hostname: kiosk-001
  user: kiosk

image:
  layer: image-rpios
  boot_part_size: 200M
  root_part_size: 100%
  name: kiosk-image

layer:
  base: bookworm-minbase
  extension: web-kiosk

# Конфигурация расширения
extension:
  layer: web-kiosk
  url: https://example.com
  autostart: true
```

## image/ - Специфичные настройки образов 🔴 ОВЯЗАТЕЛЬНЫЕ

### Назначение
Конфигурации для создания различных типов образов дисков.

### Структура каталогов
```
image/{partition_scheme}/{image_name}/
├── image.yaml                    # Метаданные слоя
├── genimage.cfg.in.ext4         # Шаблон для ext4
├── genimage.cfg.in.btrfs        # Шаблон для btrfs
├── pre-image.sh                 # Подготовка образа
├── setup.sh                     # Настройка разделов
├── mke2fs.conf                  # Конфигурация ext4
└── device/                      # Специфичные настройки
    ├── provisionmap-*.json      # Карты предоставления
    └── *.rules                  # Правила udev
```

### Обязательные компоненты
- **image.yaml** - метаданные слоя
- **genimage.cfg.in.* ** - шаблоны genimage
- **pre-image.sh** - подготовка образа
- **setup.sh** - настройка разделов

## layer/ - Библиотека слоев системы 🔴 ОВЯЗАТЕЛЬНЫЕ

### Назначение
Основная библиотека слоев системы rpi-image-gen.

### Структура слоев
```
layer/
├── essential/               # Базовые слои
├── device/                  # Слои устройств
├── image/                   # Слои образов
├── extension/               # Функциональные расширения
├── suite/                   # Комплексные решения
└── *-base/                  # Базовые конфигурации
```

### Формат слоя
```yaml
# METABEGIN
# X-Env-Layer-Name: {unique-name}
# X-Env-Layer-Category: extension
# X-Env-Layer-Description: Краткое описание назначения
# X-Env-Layer-Version: 1.0.0
# X-Env-Layer-Requires: essential,{dependencies}
# X-Env-VarPrefix: {prefix}
#
# X-Env-Var-{variable}: {default}
# X-Env-Var-{variable}-Description: Описание переменной
# X-Env-Var-{variable}-Required: true|false
# X-Env-Var-{variable}-Valid: {validation_rules}
# METAEND
---
mmdebstrap:
  packages:
    - {required-packages}
  setup-hooks:
    - {setup-commands}
  customize-hooks:
    - {customization-commands}
```

## lib/ - Библиотеки и вспомогательные скрипты ⚠️ РЕКОМЕНДУЕМЫЕ

### Назначение
Общие библиотеки и вспомогательные функции.

### Структура каталогов
```
lib/
├── common.sh               # Общие функции bash
├── validation.sh           # Функции валидации
├── logging.sh              # Функции логирования
├── network.sh              # Сетевые функции
├── security.sh             # Функции безопасности
└── utils.sh                # Различные утилиты
```

### Стандарты для библиотек
```bash
#!/bin/bash
# lib/common.sh
# Общие функции для всех расширений

# Проверка существования функции перед определением
if ! declare -f log_info >/dev/null 2>&1; then

# Глобальные константы
readonly LIB_VERSION="1.0.0"
readonly LIB_NAME="common"

# Функции логирования
log_info() {
    echo "[$LIB_NAME] INFO: $*"
}

log_warn() {
    echo "[$LIB_NAME] WARN: $*" >&2
}

log_error() {
    echo "[$LIB_NAME] ERROR: $*" >&2
}

# Функция завершения с ошибкой
die() {
    log_error "$*"
    exit 1
}

# Проверка зависимостей
check_command() {
    local cmd="$1"
    command -v "$cmd" >/dev/null 2>&1
}

fi # Конец проверки существования функций
```

## scripts/ - Скрипты для различных этапов сборки ⚠️ РЕКОМЕНДУЕМЫЕ

### Назначение
Специализированные скрипты для различных этапов сборки.

### Структура каталогов
```
scripts/
├── build/                  # Скрипты сборки
├── test/                   # Скрипты тестирования
├── deploy/                 # Скрипты развертывания
├── ci/                     # CI/CD скрипты
└── maintenance/            # Скрипты обслуживания
```

### Стандарты для скриптов
```bash
#!/bin/bash
# scripts/build/prepare-environment.sh
# Подготовка среды сборки

set -euo pipefail

SCRIPT_NAME="$(basename "${BASH_SOURCE[0]}")"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Загрузка общих функций
source "${SCRIPT_DIR}/../lib/common.sh"

main() {
    log_info "Подготовка среды сборки"

    # Проверка системных требований
    check_system_requirements

    # Настройка переменных окружения
    setup_environment_variables

    # Создание необходимых директорий
    create_build_directories

    log_info "Среда сборки подготовлена"
}

check_system_requirements() {
    local required_commands=("git" "docker" "qemu-user-static")

    for cmd in "${required_commands[@]}"; do
        if ! check_command "$cmd"; then
            die "Требуется установить: $cmd"
        fi
    done
}

# Запуск основной функции
main "$@"
```

## test/ - Тесты проекта 🔴 ОВЯЗАТЕЛЬНЫЕ

### Назначение
Автоматизированные тесты для расширений.

### Структура каталогов
```
test/
├── unit/                   # Модульные тесты
├── integration/            # Интеграционные тесты
├── e2e/                    # End-to-end тесты
├── fixtures/               # Тестовые данные
└── utils/                  # Тестовые утилиты
```

### Стандарты тестирования
```bash
#!/bin/bash
# test/unit/test_validation.sh
# Модульные тесты функций валидации

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Загрузка тестируемых функций
source "${SCRIPT_DIR}/../../lib/validation.sh"

# Счетчики тестов
TESTS_RUN=0
TESTS_PASSED=0
TESTS_FAILED=0

# Функции тестирования
run_test() {
    local test_name="$1"
    local test_function="$2"

    ((TESTS_RUN++))
    echo -n "Тест: $test_name ... "

    if $test_function; then
        echo "ПРОЙДЕН"
        ((TESTS_PASSED++))
    else
        echo "ПРОВАЛЕН"
        ((TESTS_FAILED++))
    fi
}

# Тесты
test_validate_email() {
    validate_email "test@example.com" && \
    ! validate_email "invalid-email"
}

test_validate_ip() {
    validate_ip "192.168.1.1" && \
    ! validate_ip "256.1.1.1"
}

# Запуск тестов
main() {
    echo "Запуск модульных тестов валидации"

    run_test "validate_email" test_validate_email
    run_test "validate_ip" test_validate_ip

    echo ""
    echo "Результаты: $TESTS_PASSED/$TESTS_RUN тестов пройдено"

    if [[ $TESTS_FAILED -gt 0 ]]; then
        echo "Не пройдено тестов: $TESTS_FAILED"
        exit 1
    fi
}

main "$@"
```

## work/ - Рабочая директория сборки 🔴 ОВЯЗАТЕЛЬНЫЕ

### Назначение
Временная директория для сборки образов (не коммитится в git).

### Структура директории
```
work/
├── image-{timestamp}/       # Директория сборки
│   ├── rootfs/             # Корневая файловая система
│   ├── boot/               # Загрузочный раздел
│   ├── data/               # Дополнительные данные
│   ├── image.img           # Финальный образ
│   └── logs/               # Логи сборки
└── cache/                   # Кэш для ускорения сборки
    ├── apt/                # Кэш пакетов apt
    ├── docker/             # Кэш Docker
    └── pip/                # Кэш Python пакетов
```

### Правила использования
- Директория должна быть в `.gitignore`
- Очистка после успешной сборки (опционально)
- Сохранение логов для анализа проблем
- Использование поддиректорий для изоляции сборок

## templates/ - Шаблоны для генерации документации ⚠️ РЕКОМЕНДУЕМЫЕ

### Назначение
Шаблоны для автоматической генерации документации.

### Структура каталогов
```
templates/
├── docs/                   # Шаблоны документации
├── config/                 # Шаблоны конфигураций
├── scripts/                # Шаблоны скриптов
└── ci/                     # Шаблоны CI/CD
```

### Пример шаблона
```jinja2
# templates/docs/layer-readme.md.j2
# Шаблон README для слоя

# {{ layer_name }}

{{ layer_description }}

## Установка

```bash
rpi-image-gen layer install {{ layer_name }}
```

## Конфигурация

{% for var in variables %}
### {{ var.name }}
- **Описание**: {{ var.description }}
- **По умолчанию**: {{ var.default }}
- **Обязательно**: {{ var.required }}
{% if var.validation %}
- **Валидация**: {{ var.validation }}
{% endif %}
{% endfor %}

## Использование

```yaml
layer:
  {{ category }}: {{ layer_name }}
  {% for var in variables %}
  {{ var.name }}: {{ var.default }}
  {% endfor %}
```
```

## Метрики соблюдения правила 🔴 ОВЯЗАТЕЛЬНЫЕ

### Структура проекта
- [ ] Все обязательные каталоги присутствуют
- [ ] Файлы размещены в правильных каталогах
- [ ] Структура соответствует стандартам проекта
- [ ] Пути к файлам корректны и переносимы

### Качество кода по каталогам
- [ ] bin/ соответствует стандартам исполняемых файлов
- [ ] config/ использует правильный формат YAML
- [ ] layer/ содержит корректные метаданные слоев
- [ ] test/ имеет полное покрытие тестами
- [ ] docs/ содержит актуальную документацию

### Согласованность
- [ ] Стили кодирования едины во всех каталогах
- [ ] Стандарты именования соблюдаются
- [ ] Структура файлов последовательна
- [ ] Документация синхронизирована с кодом