---
alwaysApply: ${cursor.file.path.includes("build/") || cursor.file.path.includes("ci/") || cursor.file.path.includes("scripts/")}
---


# –ü—Ä–∞–≤–∏–ª–æ 33: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —Å–±–æ—Ä–∫–∏ rpi-image-gen

## –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ —Å–±–æ—Ä–∫–∏ rpi-image-gen –≤ Cursor IDE.

## –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

## –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

### –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å–±–æ—Ä–∫–∏
```bash
# –¢–µ—Å—Ç–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–∑–∞
rpi-image-gen build -c config.yaml --dry-run

# –ü–æ–ª–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
rpi-image-gen build -c config.yaml -v

# –°–±–æ—Ä–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
IGconf_extension_debug=true IGconf_extension_test_mode=true \
rpi-image-gen build -c config.yaml

# –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
parallel 'rpi-image-gen build -c {}' ::: config/*.yaml
```

### –ö–æ–º–∞–Ω–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞
```bash
# –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö —Å–ª–æ–µ–≤ –ø—Ä–æ–µ–∫—Ç–∞
find layer/ -name "*.yaml" -exec rpi-image-gen metadata --lint {} \;

# –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å–ª–æ—è
rpi-image-gen layer --describe my-extension-layer

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É —Å–ª–æ—è–º–∏
rpi-image-gen layer --list --depends my-extension-layer

# –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
rpi-image-gen metadata --validate-vars layer/my-layer.yaml
```

### –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
```bash
# –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏
export VERBOSE=1
export DEBUG=1
rpi-image-gen build -c config.yaml 2>&1 | tee build.log

# –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
time rpi-image-gen build -c config.yaml

# –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞
du -sh work/image-*/* 2>/dev/null || echo "No images found"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
env | grep '^IGconf_' | sort
```

## –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Cursor Tasks

### –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å–±–æ—Ä–∫–∏
```json
// .cursor/tasks.json
{
  "tasks": [
    {
      "name": "Validate Extension",
      "command": "find layer/ config/ -name '*.yaml' -exec rpi-image-gen metadata --lint {} \\;",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      }
    },
    {
      "name": "Test Build (Dry Run)",
      "command": "rpi-image-gen build -c config.yaml --dry-run",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      }
    },
    {
      "name": "Full Build with Logging",
      "command": "rpi-image-gen build -c config.yaml -v 2>&1 | tee build_$(date +%Y%m%d_%H%M%S).log",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      }
    }
  ]
}
```

### –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏
```bash
# –û—Ç–ª–∞–¥–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
export IGconf_extension_debug=true
export IGconf_extension_test_mode=true
export IGconf_extension_verbose=true

# –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
export IGconf_extension_parallel_jobs=$(nproc)
export IGconf_extension_compression_level=6

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
export IGconf_extension_secure_boot=true
export IGconf_extension_encrypted_root=true
```

## –°–∏—Å—Ç–µ–º–∞ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞

### –®–∞–±–ª–æ–Ω –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
```yaml
# config/basic-extension.yaml
device:
  layer: pi5
  hostname: rpi-extension-${HOST_SUFFIX:-01}

image:
  layer: image-rpios
  boot_part_size: 200%
  root_part_size: 300%

layer:
  base: bookworm-minbase
  extension: my-extension-layer
  security: security-minimal
  network: net-misc
```

### –®–∞–±–ª–æ–Ω —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
```yaml
# layer/device-extension.yaml
# METABEGIN
# X-Env-Layer-Name: device-extension
# X-Env-Layer-Category: device
# X-Env-Layer-Description: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
# X-Env-Layer-Version: 1.0.0
# X-Env-Layer-Requires: essential
# X-Env-VarPrefix: device
# METAEND
---
mmdebstrap:
  packages:
    - raspberrypi-bootloader
    - raspberrypi-kernel
    - linux-firmware-raspi
  customize-hooks:
    - |
      #!/bin/bash
      set -euo pipefail

      echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${IGconf_device_type:-unknown}"
      # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
```

### –®–∞–±–ª–æ–Ω —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
```yaml
# layer/app-extension.yaml
# METABEGIN
# X-Env-Layer-Name: app-extension
# X-Env-Layer-Category: extension
# X-Env-Layer-Description: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å –ø—Ä–∏–∫–ª–∞–¥–Ω—ã–º –ü–û
# X-Env-Layer-Version: 1.0.0
# X-Env-Layer-Requires: essential,net-misc
# X-Env-VarPrefix: app
# METAEND
---
mmdebstrap:
  packages:
    - python3
    - python3-pip
    - nginx
  customize-hooks:
    - |
      #!/bin/bash
      set -euo pipefail

      # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      pip3 install --break-system-packages flask gunicorn

      # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–∞
      cat > /etc/systemd/system/my-app.service << 'EOF'
[Unit]
Description=My Application
After=network.target

[Service]
User=www-data
WorkingDirectory=/var/www/my-app
ExecStart=/usr/local/bin/gunicorn --bind 0.0.0.0:8000 app:app
Restart=always

[Install]
WantedBy=multi-user.target
EOF

      systemctl enable my-app
```

## –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–±–æ—Ä–∫–∏

### –õ–æ–≥–∏ —Å–±–æ—Ä–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
```bash
# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–±–æ—Ä–∫–∏
rpi-image-gen build -c config.yaml 2>&1 | \
while IFS= read -r line; do
    echo "$(date '+%H:%M:%S') $line"
done | tee "build_$(date +%Y%m%d_%H%M%S).log"
```

### –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–±–æ—Ä–∫–∏
```bash
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
if [ -f "work/image-*/image-*.img" ]; then
    echo "‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞"
    ls -lh work/image-*/*.img

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –æ–±—Ä–∞–∑–∞
    image_size=$(stat -c%s work/image-*/*.img)
    if [ "$image_size" -gt 4294967296 ]; then # 4GB
        echo "‚ö†Ô∏è  –†–∞–∑–º–µ—Ä –æ–±—Ä–∞–∑–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 4GB: $(numfmt --to=iec-i --suffix=B "$image_size")"
    fi
else
    echo "‚ùå –°–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å"
    tail -20 build.log
fi
```

### –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
```bash
# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏
#!/bin/bash
LOG_FILE="resource_usage_$(date +%Y%m%d_%H%M%S).log"

echo "–í—Ä–µ–º—è;CPU%;–ü–∞–º—è—Ç—å%;–î–∏—Å–∫ I/O" > "$LOG_FILE"

rpi-image-gen build -c config.yaml &
BUILD_PID=$!

while kill -0 "$BUILD_PID" 2>/dev/null; do
    cpu=$(top -bn1 | grep -E "^(CPU|%Cpu)" | awk '{print $2+$4}')
    mem=$(free | awk 'NR==2{printf "%.1f", $3*100/$2}')
    disk=$(iostat -x sda 1 1 2>/dev/null | awk 'NR==4{print $4+$5}' || echo "0")

    echo "$(date +%H:%M:%S);$cpu;$mem;$disk" >> "$LOG_FILE"
    sleep 5
done

wait "$BUILD_PID"
echo "–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –õ–æ–≥ —Ä–µ—Å—É—Ä—Å–æ–≤: $LOG_FILE"
```

## –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏

### Docker –¥–ª—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–±–æ—Ä–∫–∏
```dockerfile
# Dockerfile –¥–ª—è —Å–±–æ—Ä–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
FROM debian:bookworm

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN apt-get update && apt-get install -y \
    qemu-user-static \
    binfmt-support \
    mmdebstrap \
    genimage \
    && rm -rf /var/lib/apt/lists/*

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤
COPY . /workspace
WORKDIR /workspace

# –ö–æ–º–∞–Ω–¥–∞ —Å–±–æ—Ä–∫–∏
CMD ["rpi-image-gen", "build", "-c", "config.yaml"]
```

```bash
# –°–±–æ—Ä–∫–∞ –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
docker build -t rpi-builder .
docker run --privileged -v $(pwd):/workspace rpi-builder
```

### CI/CD –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
```yaml
# .github/workflows/build-extension.yml
name: Build Extension
on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static binfmt-support

      - name: Validate extension
        run: |
          find layer/ -name "*.yaml" -exec rpi-image-gen metadata --lint {} \;

      - name: Build extension
        run: |
          rpi-image-gen build -c config.yaml --dry-run

      - name: Upload artifacts
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: extension-image
          path: work/image-*/*.img
```

---

## –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
- [ ] –ü—Ä–∞–≤–∏–ª–æ –∏–∑—É—á–µ–Ω–æ –∏ –ø–æ–Ω—è—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- [ ] –°–æ–±–ª—é–¥–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤ CI/CD
- [ ] –ù–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –º–µ—Ä–¥–∂–∞
- [ ] –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞
- [ ] –†–µ–≥—É–ª—è—Ä–Ω—ã–π –∞—É–¥–∏—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞

### –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
- [ ] 100% —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –≤ –Ω–æ–≤–æ–º –∫–æ–¥–µ
- [ ] –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–µ—Ç–∫–∞—Ö
- [ ] –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏—è
- [ ] –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- [ ] –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫ –ø—Ä–∞–≤–∏–ª–∞

### –ò—Å—Ç–æ—á–Ω–∏–∫
–°–æ–∑–¥–∞–Ω–æ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Å —Å–∏—Å—Ç–µ–º–æ–π —Å–±–æ—Ä–∫–∏ rpi-image-gen