---
alwaysApply: ${cursor.file.path.includes("layer/") || cursor.file.path.includes("templates/")}
---


# Правило 34: Автоматизация генерации и рефакторинга кода

## Назначение правила
Предоставляет инструменты для автоматической генерации boilerplate кода и интеллектуального рефакторинга расширений rpi-image-gen.

## Обязательные требования 🔴 ОБЯЗАТЕЛЬНЫЕ

## Автоматическая генерация шаблонов

### Умная генерация слоев
```bash
# Интерактивная генерация слоя
rpi-image-gen generate layer --interactive

# Генерация на основе анализа требований
rpi-image-gen generate layer --analyze-requirements "security hardening with apparmor"

# Автоматическая генерация зависимостей
rpi-image-gen generate layer --auto-deps --category security
```

### Автоматические шаблоны кода
```bash
# Генерация полного слоя безопасности
generate-layer-template() {
    local name="$1"
    local type="$2"

    # Создание директории
    mkdir -p "layer/${type}/${name}"

    # Генерация основных файлов
    generate-metadata-file "$name" "$type"
    generate-config-file "$name"
    generate-hooks-file "$name"
    generate-test-file "$name"
    generate-readme "$name"

    echo "✅ Layer $name generated successfully"
}

# Пример использования
generate-layer-template "my-security" "security"
```

## Интеллектуальный рефакторинг

### Автоматическое улучшение кода
```bash
# Автоматический рефакторинг файла
rpi-image-gen refactor --file layer/security/my-layer.yaml --apply-all

# Улучшение конкретных аспектов
rpi-image-gen refactor --file layer.yaml --add-error-handling
rpi-image-gen refactor --file layer.yaml --minimize-code
rpi-image-gen refactor --file layer.yaml --add-validation
```

### Умное переименование и миграция
```bash
# Безопасное переименование переменных
rpi-image-gen refactor --rename-var IGconf_old_name IGconf_new_name --files "*.yaml"

# Миграция API версий
rpi-image-gen refactor --migrate-api v1.0 v2.0 --layer my-layer

# Автоматическое обновление зависимостей
rpi-image-gen refactor --update-deps --layer my-layer
```

## Автоматизированные трансформации

### Код трансформации
```bash
# Преобразование старого формата в новый
transform-legacy-code() {
    local file="$1"

    # Замена устаревших конструкций
    sed -i 's/igconf getval/igconf getval/g' "$file"
    sed -i 's/legacy_function/modern_function/g' "$file"

    # Добавление недостающих импортов
    if ! grep -q "source.*common.sh" "$file"; then
        sed -i '1a . "templates/security/common.sh"' "$file"
    fi
}

# Пакетная трансформация
batch-transform() {
    local pattern="$1"
    local transform="$2"

    find . -name "$pattern" -exec bash -c "$transform {}" \;
}

# Пример использования
batch-transform "*.yaml" "transform-legacy-code"
```

### Автоматическая оптимизация
```bash
# Оптимизация размера кода
optimize-code-size() {
    local file="$1"

    # Удаление неиспользуемых переменных
    # Объединение дублированных функций
    # Упрощение условных конструкций

    echo "✅ Code optimized: $(basename "$file")"
}

# Оптимизация производительности
optimize-performance() {
    local file="$1"

    # Параллельное выполнение независимых операций
    # Кэширование повторяющихся вычислений
    # Оптимизация использования памяти

    echo "✅ Performance optimized: $(basename "$file")"
}
```

## Интеграция с IDE

### Cursor интеграция
```json
// .cursor/settings.json - Автоматическая интеграция
{
  "rpi-image-gen": {
    "auto-generate": true,
    "refactor-on-save": true,
    "validate-on-type": true,
    "templates-path": ".cursor/templates"
  }
}
```

### Горячие клавиши
```
Ctrl+Shift+G: Generate layer template
Ctrl+Shift+R: Refactor current file
Ctrl+Shift+V: Validate layer
Ctrl+Shift+T: Run tests
```

## Автоматическая генерация документации

### Генерация README
```bash
# Автоматическая генерация документации
generate-readme() {
    local layer_name="$1"

    cat > "layer/${layer_name}/README.adoc" << EOF
= ${layer_name} Layer

== Обзор

Автоматически сгенерированный слой для ${layer_name}.

== Конфигурация

== Зависимости

== Использование
EOF

    echo "✅ README generated for $layer_name"
}
```

### Автоматическая генерация примеров
```bash
# Генерация примеров использования
generate-examples() {
    local layer_name="$1"

    mkdir -p "examples/${layer_name}"

    # Генерация базового примера
    cat > "examples/${layer_name}/basic.yaml" << EOF
device:
  layer: rpi5

image:
  layer: image-rpios

layer:
  base: bookworm-minbase
  ${layer_name}: ${layer_name}
EOF

    echo "✅ Examples generated for $layer_name"
}
```

## Метрики качества автоматизации

### Показатели эффективности
- **Время генерации**: < 30 секунд для типового слоя
- **Корректность кода**: 100% валидный YAML и синтаксис
- **Покрытие тестов**: Автоматическая генерация тестов
- **Документация**: 100% покрытие сгенерированных компонентов

### Мониторинг использования
```bash
# Статистика использования автоматизации
automation-stats() {
    echo "=== Automation Usage Statistics ==="
    echo "Generated layers: $(find layer/ -name "*.yaml" -exec grep -l "Auto-generated" {} \; | wc -l)"
    echo "Refactored files: $(git log --oneline | grep -i refactor | wc -l)"
    echo "Time saved: ~$(($(find layer/ -name "*.yaml" | wc -l) * 15)) minutes"
}
```

---

## Метрики соблюдения правила 🔴 ОБЯЗАТЕЛЬНЫЕ

### Обязательные элементы
- [ ] Правило изучено и понято командой разработки
- [ ] Соблюдение требования отслеживается в CI/CD
- [ ] Нарушения правила приводят к блокировке мерджа
- [ ] Документация правила актуальна и доступна
- [ ] Регулярный аудит соблюдения правила

### Качественные показатели
- [ ] 100% соблюдение правила в новом коде
- [ ] Отсутствие нарушений в основных ветках
- [ ] Автоматизированная проверка соблюдения
- [ ] Обратная связь от команды разработки
- [ ] Непрерывное улучшение формулировок правила

### Источник
Создано для автоматизации разработки и рефакторинга расширений rpi-image-gen