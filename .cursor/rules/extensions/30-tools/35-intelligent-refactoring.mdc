---
alwaysApply: ${cursor.file.path.match(/\.(yaml|sh)$/) && cursor.file.content.length > 50}
---


# –ü—Ä–∞–≤–∏–ª–æ 35: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞

## –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–¥–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π rpi-image-gen.

## –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

## –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞

### –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
```bash
# –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
rpi-image-gen analyze --file layer.yaml --deep

# –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
rpi-image-gen analyze --duplicate-code --path layer/

# –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞
rpi-image-gen analyze --complexity --threshold 10
```

### –£–º–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
```bash
# –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É
rpi-image-gen suggest --file layer.yaml

# –ü—Ä–∏–º–µ—Ä—ã –≤—ã–≤–æ–¥–∞:
# ‚ö†Ô∏è  Line 45: Consider using variables instead of hardcoded paths
# üí° Suggestion: APPARMOR_DIR="/etc/apparmor.d"
# üí° Suggestion: Replace 3 occurrences of "/etc/apparmor.d" with $APPARMOR_DIR

# üîÑ Line 78-85: Duplicate systemctl enable pattern
# üí° Suggestion: Extract to function enable_service()
```

## –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥

### –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
```bash
# –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
refactor-duplicate-code() {
    local file="$1"

    # –ù–∞–π—Ç–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –±–ª–æ–∫–∏
    # –ò–∑–≤–ª–µ—á—å –≤ —Ñ—É–Ω–∫—Ü–∏–∏
    # –ó–∞–º–µ–Ω–∏—Ç—å –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π

    echo "‚úÖ Refactored duplicate code in $file"
}

# –£–ø—Ä–æ—â–µ–Ω–∏–µ —É—Å–ª–æ–≤–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
refactor-conditionals() {
    local file="$1"

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–µ if-else –≤ case
    # –£–ø—Ä–æ—Å—Ç–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å early returns

    echo "‚úÖ Simplified conditionals in $file"
}

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
refactor-variables() {
    local file="$1"

    # –£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –Ω–µ—è—Å–Ω—ã–µ –∏–º–µ–Ω–∞
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

    echo "‚úÖ Optimized variables in $file"
}
```

### –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥
```bash
# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
safe-rename() {
    local old_name="$1"
    local new_name="$2"
    local file="$3"

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    local usages=$(grep -n "$old_name" "$file" | wc -l)

    # –°–æ–∑–¥–∞—Ç—å backup
    cp "$file" "${file}.backup"

    # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–º–µ–Ω—É
    sed -i "s/$old_name/$new_name/g" "$file"

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    if validate-file "$file"; then
        echo "‚úÖ Renamed $old_name -> $new_name ($usages occurrences)"
        rm "${file}.backup"
    else
        echo "‚ùå Rename failed, restoring backup"
        mv "${file}.backup" "$file"
    fi
}

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
safe-rename "old_function" "new_function" "layer.yaml"
```

## –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥

### –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
```bash
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
split-large-file() {
    local file="$1"
    local max_lines="${2:-200}"

    local lines=$(wc -l < "$file")

    if [ "$lines" -gt "$max_lines" ]; then
        echo "üîÑ Splitting large file: $(basename "$file") ($lines lines)"

        # –†–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        extract-functions "$file"
        extract-variables "$file"
        extract-hooks "$file"

        echo "‚úÖ File split into smaller components"
    fi
}

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
extract-functions() {
    local file="$1"

    # –ù–∞–π—Ç–∏ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
    grep -n "^[a-zA-Z_][a-zA-Z0-9_]*()" "$file" | while read -r line; do
        local func_name=$(echo "$line" | cut -d: -f2 | cut -d'(' -f1)
        extract-function "$func_name" "$file" "functions.sh"
    done
}
```

### –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
```bash
# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
optimize-structure() {
    local layer_dir="$1"

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é
    # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é

    echo "‚úÖ Structure optimized for $layer_dir"
}

# –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
consolidate-configs() {
    local layer_dir="$1"

    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

    echo "‚úÖ Configurations consolidated for $layer_dir"
}
```

## –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥

### –£–ª—É—á—à–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
```bash
# –£–ª—É—á—à–µ–Ω–∏–µ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
improve-naming() {
    local file="$1"

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ—è—Å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    sed -i 's/var1/config_file/g' "$file"
    sed -i 's/tmp/temp_dir/g' "$file"

    # –£–ª—É—á—à–µ–Ω–∏–µ –∏–º–µ–Ω —Ñ—É–Ω–∫—Ü–∏–π
    sed -i 's/do_something/configure_service/g' "$file"

    echo "‚úÖ Naming improved in $file"
}

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
add-comments() {
    local file="$1"

    # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–ª–æ–∂–Ω—ã–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º
    # –û–±—ä—è—Å–Ω–∏—Ç—å –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É
    # –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–π

    echo "‚úÖ Comments added to $file"
}

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
format-code() {
    local file="$1"

    # –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—Å—Ç—É–ø—ã
    # –í—ã—Ä–æ–≤–Ω—è—Ç—å –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã

    echo "‚úÖ Code formatted in $file"
}
```

### –£–ª—É—á—à–µ–Ω–∏–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
```bash
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ error handling
add-error-handling() {
    local file="$1"

    # –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—à–∏–±–æ–∫
    if ! grep -q "set -euo pipefail" "$file"; then
        sed -i '1a set -euo pipefail' "$file"
    fi

    # –î–æ–±–∞–≤–∏—Ç—å die() —Ñ—É–Ω–∫—Ü–∏—é –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if ! grep -q "^die()" "$file"; then
        sed -i '/set -euo pipefail/a \
die() {\
    echo "ERROR: $*" >&2\
    exit 1\
}' "$file"
    fi

    echo "‚úÖ Error handling added to $file"
}

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
add-validation() {
    local file="$1"

    # –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    # –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

    echo "‚úÖ Validation added to $file"
}
```

## –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞

### –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
```bash
# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è shell —Å–∫—Ä–∏–ø—Ç–æ–≤
optimize-shell-performance() {
    local file="$1"

    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    sed -i 's/grep | head/grep -m1/g' "$file"

    # –ò–∑–±–µ–≥–∞—Ç—å subprocess –≤ —Ü–∏–∫–ª–∞—Ö
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å arrays –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫
    # –ö—ç—à–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–∞–Ω–¥

    echo "‚úÖ Shell performance optimized in $file"
}

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è YAML
optimize-yaml() {
    local file="$1"

    # –£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ anchors
    # –£–ø—Ä–æ—Å—Ç–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω—ã

    echo "‚úÖ YAML optimized in $file"
}
```

### –ü–∞–º—è—Ç—å –∏ —Ä–µ—Å—É—Ä—Å—ã
```bash
# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
optimize-memory() {
    local file="$1"

    # –ò–∑–±–µ–≥–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–º—è—Ç—å
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å streaming –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    # –û—á–∏—â–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

    echo "‚úÖ Memory usage optimized in $file"
}

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–∏—Å–∫–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞
optimize-io() {
    local file="$1"

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é
    # –ú–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å seeks

    echo "‚úÖ I/O operations optimized in $file"
}
```

## –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CI/CD

### –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –≤ pipeline
```yaml
# .github/workflows/refactor.yml
name: Automatic Refactoring
on:
  schedule:
    - cron: '0 2 * * 0'  # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º

jobs:
  refactor:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run refactoring tools
        run: |
          find layer/ -name "*.yaml" -exec rpi-image-gen refactor --file {} --apply-safe \;

      - name: Create pull request
        if: success()
        uses: peter-evans/create-pull-request@v4
        with:
          title: "ü§ñ Automatic code refactoring"
          body: "Automatic refactoring improvements applied by AI assistant"
```

### –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
```bash
# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
monitor-code-quality() {
    echo "=== Code Quality Metrics ==="

    # –°–ª–æ–∂–Ω–æ—Å—Ç—å –∫–æ–¥–∞
    echo "Cyclomatic complexity: $(find layer/ -name "*.yaml" -exec wc -l {} \; | awk '{sum+=$1} END {print sum/NR}') avg lines"

    # –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
    echo "Code duplication: $(find-duplicate-lines layer/) lines"

    # –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏
    echo "Test coverage: $(find layer/ -name "*test*" | wc -l) test files"

    # –í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏
    echo "Build time: $(measure-build-time) seconds"
}
```

---

## –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
- [ ] –ü—Ä–∞–≤–∏–ª–æ –∏–∑—É—á–µ–Ω–æ –∏ –ø–æ–Ω—è—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- [ ] –°–æ–±–ª—é–¥–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤ CI/CD
- [ ] –ù–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –º–µ—Ä–¥–∂–∞
- [ ] –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞
- [ ] –†–µ–≥—É–ª—è—Ä–Ω—ã–π –∞—É–¥–∏—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞

### –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
- [ ] 100% —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –≤ –Ω–æ–≤–æ–º –∫–æ–¥–µ
- [ ] –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–µ—Ç–∫–∞—Ö
- [ ] –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏—è
- [ ] –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- [ ] –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫ –ø—Ä–∞–≤–∏–ª–∞

### –ò—Å—Ç–æ—á–Ω–∏–∫
–°–æ–∑–¥–∞–Ω–æ –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π rpi-image-gen