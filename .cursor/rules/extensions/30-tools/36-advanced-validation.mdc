---
alwaysApply: ${cursor.file.path.match(/\.(yaml|sh)$/) && !cursor.file.path.includes("work/")}
---


# –ü—Ä–∞–≤–∏–ª–æ 36: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ª–∏–Ω—Ç–∏–Ω–≥

## –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –ª–∏–Ω—Ç–∏–Ω–≥–∞ –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π rpi-image-gen.

## –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

## –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è

### –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
```bash
# –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è YAML –≤–∞–ª–∏–¥–∞—Ü–∏—è
validate-yaml-advanced() {
    local file="$1"

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    python3 -c "import yaml; yaml.safe_load(open('$file'))" || return 1

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
    if grep -q "^[[:space:]]*-[[:space:]]*$" "$file"; then
        echo "‚ö†Ô∏è  Empty list items found"
    fi

    if grep -q ": $" "$file"; then
        echo "‚ö†Ô∏è  Empty values found"
    fi

    if grep -q "[[:space:]]$" "$file"; then
        echo "‚ö†Ô∏è  Trailing whitespace found"
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        sed -i 's/[[:space:]]*$//' "$file"
    fi

    echo "‚úÖ YAML syntax and style validated"
}

# –í–∞–ª–∏–¥–∞—Ü–∏—è Bash —Å–∫—Ä–∏–ø—Ç–æ–≤
validate-bash-advanced() {
    local file="$1"

    # –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    bash -n "$file" || return 1

    # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if ! grep -q "set -euo pipefail" "$file"; then
        echo "‚ö†Ô∏è  Missing 'set -euo pipefail'"
    fi

    if grep -q "\$\w\+\s*[^\"']" "$file"; then
        echo "‚ö†Ô∏è  Unquoted variable usage"
    fi

    if grep -q "rm -rf /" "$file"; then
        echo "üö® Dangerous: 'rm -rf /' found"
    fi

    echo "‚úÖ Bash script validated"
}
```

### –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
```bash
# –í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö rpi-image-gen
validate-rpi-metadata() {
    local file="$1"

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    local required_fields=("X-Env-Layer-Name" "X-Env-Layer-Category" "X-Env-Layer-Description" "X-Env-Layer-Version")
    local missing_fields=()

    for field in "${required_fields[@]}"; do
        if ! grep -q "$field:" "$file"; then
            missing_fields+=("$field")
        fi
    done

    if [ ${#missing_fields[@]} -gt 0 ]; then
        echo "‚ùå Missing required metadata: ${missing_fields[*]}"
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    local category=$(grep "X-Env-Layer-Category:" "$file" | cut -d: -f2 | tr -d ' ')
    case "$category" in
        security|extension|device|container|image)
            echo "‚úÖ Valid category: $category"
            ;;
        *)
            echo "‚ö†Ô∏è  Unknown category: $category"
            ;;
    esac

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if grep -q "X-Env-VarPrefix:" "$file"; then
        local prefix=$(grep "X-Env-VarPrefix:" "$file" | cut -d: -f2 | tr -d ' ')
        if ! [[ "$prefix" =~ ^[a-z][a-z0-9_]*$ ]]; then
            echo "‚ö†Ô∏è  Invalid variable prefix format: $prefix"
        fi
    fi

    echo "‚úÖ rpi-image-gen metadata validated"
}
```

## –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ª–∏–Ω—Ç–∏–Ω–≥

### –°—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–∏–Ω—Ç–∏–Ω–≥
```bash
# –õ–∏–Ω—Ç–∏–Ω–≥ YAML —Ñ–∞–π–ª–æ–≤
lint-yaml() {
    local file="$1"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—Ç—É–ø–æ–≤
    if grep -q "^ " "$file" && ! grep -q "^  " "$file" | head -1; then
        echo "‚ö†Ô∏è  Inconsistent indentation (mix of spaces and tabs)"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫
    local long_lines=$(awk 'length > 120 {print NR ": " $0}' "$file" | wc -l)
    if [ "$long_lines" -gt 0 ]; then
        echo "‚ö†Ô∏è  $long_lines lines exceed 120 characters"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
    local consecutive_blanks=$(grep -c "^$" "$file" | awk '{if(NR==1) sum=$1; else sum+=$1} END {print sum}')
    if [ "$consecutive_blanks" -gt 5 ]; then
        echo "‚ö†Ô∏è  Too many consecutive blank lines"
    fi

    echo "‚úÖ YAML style validated"
}

# –õ–∏–Ω—Ç–∏–Ω–≥ Bash —Å–∫—Ä–∏–ø—Ç–æ–≤
lint-bash() {
    local file="$1"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π
    local functions=$(grep -c "^[a-zA-Z_][a-zA-Z0-9_]*()" "$file")
    local lines=$(wc -l < "$file")

    if [ "$lines" -gt 50 ] && [ "$functions" -eq 0 ]; then
        echo "‚ö†Ô∏è  Large script without functions - consider refactoring"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    local comment_ratio=$(awk '/^#/ {comments++} END {print comments/NR*100}' "$file")
    if (( $(echo "$comment_ratio < 10" | bc -l) )); then
        echo "‚ö†Ô∏è  Low comment ratio: ${comment_ratio}%"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    local complexity=$(grep -c "if \|while \|for \|case " "$file")
    if [ "$complexity" -gt 15 ]; then
        echo "‚ö†Ô∏è  High cyclomatic complexity: $complexity branches"
    fi

    echo "‚úÖ Bash style validated"
}
```

## –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑

### –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
```bash
# –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å–ª–æ–µ–≤
analyze-dependencies() {
    local file="$1"

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    local deps=$(grep "X-Env-Layer-Requires:" "$file" | cut -d: -f2 | tr -d ' ')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    for dep in $deps; do
        if [[ "$dep" == *,* ]]; then
            # –†–∞–∑–¥–µ–ª–∏—Ç—å –∑–∞–ø—è—Ç—É—é
            IFS=',' read -ra dep_array <<< "$dep"
            for single_dep in "${dep_array[@]}"; do
                if ! find layer/ -name "*${single_dep}*" -type f | grep -q .; then
                    echo "‚ö†Ô∏è  Dependency not found: $single_dep"
                fi
            done
        else
            if ! find layer/ -name "*${dep}*" -type f | grep -q .; then
                echo "‚ö†Ô∏è  Dependency not found: $dep"
            fi
        fi
    done

    echo "‚úÖ Dependencies analyzed"
}

# –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
analyze-variables() {
    local file="$1"

    # –ù–∞–π—Ç–∏ –≤—Å–µ IGconf –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    local igconf_vars=$(grep -o "IGconf_[a-zA-Z0-9_]*" "$file" | sort | uniq)

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å—É
    local prefix=$(grep "X-Env-VarPrefix:" "$file" | cut -d: -f2 | tr -d ' ')
    if [ -n "$prefix" ]; then
        for var in $igconf_vars; do
            if [[ "$var" != IGconf_${prefix}_* ]]; then
                echo "‚ö†Ô∏è  Variable doesn't match prefix: $var (expected: IGconf_${prefix}_*)"
            fi
        done
    fi

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    local declared_vars=$(grep "X-Env-Var-[a-zA-Z0-9_-]*:" "$file" | sed 's/X-Env-Var-\([^:]*\):.*/\1/' | sort | uniq)
    for var in $declared_vars; do
        local igconf_var="IGconf_${prefix:-}${prefix:+_}$var"
        if ! grep -q "$igconf_var" "$file"; then
            echo "‚ö†Ô∏è  Declared variable not used: $igconf_var"
        fi
    done

    echo "‚úÖ Variables analyzed"
}
```

## –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è

### –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
```bash
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è
auto-fix-style() {
    local file="$1"

    # –£–¥–∞–ª–∏—Ç—å trailing whitespace
    sed -i 's/[[:space:]]*$//' "$file"

    # –ò—Å–ø—Ä–∞–≤–∏—Ç—å indentation (–ø—Ä–æ–±–µ–ª—ã –≤–º–µ—Å—Ç–æ —Ç–∞–±–æ–≤)
    sed -i 's/^\t/  /g' "$file"

    # –î–æ–±–∞–≤–∏—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
    sed -i '/^[[:space:]]*[^#]/a\\' "$file"

    echo "‚úÖ Style auto-fixed"
}

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ error handling
auto-add-error-handling() {
    local file="$1"

    if ! grep -q "set -euo pipefail" "$file"; then
        sed -i '1a set -euo pipefail' "$file"
        echo "‚úÖ Added error handling"
    fi

    if ! grep -q "^die()" "$file"; then
        sed -i '/set -euo pipefail/a \
die() {\
    echo "ERROR: $*" >&2\
    exit 1\
}' "$file"
        echo "‚úÖ Added die function"
    fi
}

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–≤—ã—á–µ–∫
auto-fix-quotes() {
    local file="$1"

    # –î–æ–±–∞–≤–∏—Ç—å –∫–∞–≤—ã—á–∫–∏ –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
    sed -i 's/\$\([a-zA-Z_][a-zA-Z0-9_]*\)/${\1}/g' "$file"
    sed -i 's/\${[a-zA-Z_][a-zA-Z0-9_]*}/"${}&"/g' "$file"

    echo "‚úÖ Quotes auto-fixed"
}
```

## –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

### –ê–Ω–∞–ª–∏–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
```bash
# –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
analyze-security() {
    local file="$1"

    # –ü–æ–∏—Å–∫ –æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    if grep -q "eval " "$file"; then
        echo "üö® SECURITY: 'eval' usage found - potential code injection"
    fi

    if grep -q "curl.*|.*bash" "$file"; then
        echo "üö® SECURITY: Pipe to bash from curl - potential remote code execution"
    fi

    if grep -q "chmod 777" "$file"; then
        echo "üö® SECURITY: Overly permissive permissions"
    fi

    if grep -q "sudo.*\$" "$file"; then
        echo "üö® SECURITY: sudo with variable - potential privilege escalation"
    fi

    echo "‚úÖ Security analysis completed"
}

# –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
analyze-privacy() {
    local file="$1"

    # –ü–æ–∏—Å–∫ hardcoded credentials
    if grep -q "password.*=" "$file" || grep -q "PASSWORD.*=" "$file"; then
        echo "‚ö†Ô∏è  Potential hardcoded password found"
    fi

    if grep -q "token.*=" "$file" || grep -q "TOKEN.*=" "$file"; then
        echo "‚ö†Ô∏è  Potential hardcoded token found"
    fi

    if grep -q "key.*=" "$file" || grep -q "KEY.*=" "$file"; then
        echo "‚ö†Ô∏è  Potential hardcoded key found"
    fi

    echo "‚úÖ Privacy analysis completed"
}
```

## –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CI/CD

### –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤ pipeline
```yaml
# .github/workflows/validate.yml
name: Advanced Validation
on: [push, pull_request]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          pip install pyyaml yamllint shellcheck

      - name: Advanced validation
        run: |
          find layer/ -name "*.yaml" -exec bash -c '
            echo "Validating $1"
            validate-yaml-advanced "$1"
            validate-rpi-metadata "$1"
            lint-yaml "$1"
            analyze-dependencies "$1"
            analyze-variables "$1"
          ' _ {} \;

      - name: Security analysis
        run: |
          find layer/ -name "*.yaml" -exec bash -c '
            analyze-security "$1"
            analyze-privacy "$1"
          ' _ {} \;

      - name: Auto-fix style
        if: failure()
        run: |
          find layer/ -name "*.yaml" -exec auto-fix-style {} \;
          git config --global user.name "Auto-fix Bot"
          git config --global user.email "bot@auto-fix"
          git add -A && git commit -m "ü§ñ Auto-fix style issues" || true
```

### –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞
```bash
# –û—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–¥–∞
quality-report() {
    echo "=== Code Quality Report ==="
    echo "Generated: $(date)"
    echo ""

    echo "üìä Files analyzed: $(find layer/ -name "*.yaml" | wc -l)"
    echo "üìä Total lines: $(find layer/ -name "*.yaml" -exec wc -l {} \; | awk '{sum+=$1} END {print sum}')"
    echo "üìä Average file size: $(find layer/ -name "*.yaml" -exec wc -l {} \; | awk '{sum+=$1; count++} END {print int(sum/count)}') lines"
    echo ""

    echo "üîç Validation results:"
    echo "   YAML syntax errors: $(find . -name "*.log" -exec grep -c "YAML error" {} \; 2>/dev/null || echo "0")"
    echo "   Security issues: $(find . -name "*.log" -exec grep -c "SECURITY" {} \; 2>/dev/null || echo "0")"
    echo "   Style violations: $(find . -name "*.log" -exec grep -c "‚ö†Ô∏è" {} \; 2>/dev/null || echo "0")"
    echo ""

    echo "üìà Trends:"
    echo "   Complexity score: $(calculate-complexity-score)"
    echo "   Maintainability index: $(calculate-maintainability-index)"
    echo "   Security score: $(calculate-security-score)"
}
```

---

## –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
- [ ] –ü—Ä–∞–≤–∏–ª–æ –∏–∑—É—á–µ–Ω–æ –∏ –ø–æ–Ω—è—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- [ ] –°–æ–±–ª—é–¥–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤ CI/CD
- [ ] –ù–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –º–µ—Ä–¥–∂–∞
- [ ] –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞
- [ ] –†–µ–≥—É–ª—è—Ä–Ω—ã–π –∞—É–¥–∏—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞

### –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
- [ ] 100% —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –≤ –Ω–æ–≤–æ–º –∫–æ–¥–µ
- [ ] –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–µ—Ç–∫–∞—Ö
- [ ] –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏—è
- [ ] –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- [ ] –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫ –ø—Ä–∞–≤–∏–ª–∞

### –ò—Å—Ç–æ—á–Ω–∏–∫
–°–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –ª–∏–Ω—Ç–∏–Ω–≥–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π rpi-image-gen