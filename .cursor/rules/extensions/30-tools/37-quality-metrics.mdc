---
alwaysApply: ${cursor.file.path.includes("layer/") || cursor.file.path.includes("metrics")}
---


# –ü—Ä–∞–≤–∏–ª–æ 37: –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞

## –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ –∫–æ–¥–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π rpi-image-gen.

## –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

## –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞

### –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
```bash
# –†–∞—Å—á–µ—Ç —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
calculate-cyclomatic-complexity() {
    local file="$1"

    # –ü–æ–¥—Å—á–µ—Ç —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    local conditions=$(grep -c "if \|elif \|while \|for \|case \|&& \||| " "$file" || echo "0")
    local functions=$(grep -c "^[a-zA-Z_][a-zA-Z0-9_]*()" "$file" || echo "0")

    local complexity=$((conditions + functions + 1))

    echo "$complexity"
}

# –ú–µ—Ç—Ä–∏–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏
calculate-maintainability-index() {
    local file="$1"

    local lines=$(wc -l < "$file")
    local comments=$(grep -c "^#" "$file" || echo "0")
    local functions=$(grep -c "^[a-zA-Z_][a-zA-Z0-9_]*()" "$file" || echo "0")
    local complexity=$(calculate-cyclomatic-complexity "$file")

    # –§–æ—Ä–º—É–ª–∞ MI = 171 - 5.2 * ln(Halstead) - 0.23 * CC - 16.2 * ln(LOC)
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è bash
    local mi=$((171 - complexity - lines/10 + comments*2 + functions*3))

    # –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω 0-171
    if [ "$mi" -lt 0 ]; then mi=0; fi
    if [ "$mi" -gt 171 ]; then mi=171; fi

    echo "$mi"
}

# –ú–µ—Ç—Ä–∏–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
calculate-code-duplication() {
    local file="$1"

    # –ù–∞–π—Ç–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∏ (–º–∏–Ω–∏–º—É–º 3 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è)
    local total_duplicates=$(sort "$file" | uniq -c | awk '$1 >= 3 {sum += $1} END {print sum+0}')

    echo "$total_duplicates"
}
```

### –ú–µ—Ç—Ä–∏–∫–∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
```bash
# –ú–µ—Ç—Ä–∏–∫–∞ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∫–æ–¥–∞
calculate-readability-score() {
    local file="$1"

    local lines=$(wc -l < "$file")
    local avg_line_length=$(awk '{sum += length} END {print int(sum/NR)}' "$file")
    local comments_ratio=$(awk '/^#/ {comments++} END {print int(comments/NR*100)}' "$file")
    local functions_per_100_lines=$(( $(grep -c "^[a-zA-Z_][a-zA-Z0-9_]*()" "$file") * 100 / lines ))

    # –°–æ—Å—Ç–∞–≤–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ (0-100)
    local score=$((comments_ratio + functions_per_100_lines))
    if [ "$avg_line_length" -gt 80 ]; then
        score=$((score - (avg_line_length - 80)/2))
    fi

    if [ "$score" -lt 0 ]; then score=0; fi
    if [ "$score" -gt 100 ]; then score=100; fi

    echo "$score"
}

# –ú–µ—Ç—Ä–∏–∫–∞ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
calculate-naming-quality() {
    local file="$1"

    local total_vars=$(grep -o '\$[a-zA-Z_][a-zA-Z0-9_]*' "$file" | wc -l)
    local bad_names=$(grep -o '\$[a-z]\|[a-z][A-Z]\|[0-9]$' "$file" | wc -l)

    if [ "$total_vars" -eq 0 ]; then
        echo "100"
    else
        local quality=$((100 - bad_names * 100 / total_vars))
        echo "$quality"
    fi
}
```

## –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

### –ú–µ—Ç—Ä–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
```bash
# –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–±–æ—Ä–∫–∏
measure-build-time() {
    local config_file="$1"

    local start_time=$(date +%s)

    if rpi-image-gen build -c "$config_file" --dry-run >/dev/null 2>&1; then
        local end_time=$(date +%s)
        local duration=$((end_time - start_time))
        echo "$duration"
    else
        echo "failed"
    fi
}

# –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤
analyze-script-performance() {
    local file="$1"

    echo "=== Performance Analysis: $(basename "$file") ==="

    # –ü–æ–¥—Å—á–µ—Ç –≤–Ω–µ—à–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
    local external_commands=$(grep -c "^\s*[a-zA-Z_][a-zA-Z0-9_]*\|\$\(" "$file" || echo "0")
    echo "External commands: $external_commands"

    # –ü–æ–¥—Å—á–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∞–π–ª–∞–º–∏
    local file_operations=$(grep -c ">\|<\|tee\|cat\|cp\|mv\|rm" "$file" || echo "0")
    echo "File operations: $file_operations"

    # –û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞
    local io_complexity=$((external_commands + file_operations))
    echo "I/O complexity: $io_complexity"

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if [ "$io_complexity" -gt 20 ]; then
        echo "‚ö†Ô∏è  High I/O complexity - consider optimization"
    fi
}
```

### –ú–µ—Ç—Ä–∏–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
```bash
# –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
analyze-memory-usage() {
    local file="$1"

    # –ü–æ–¥—Å—á–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    local variables=$(grep -c "^[a-zA-Z_][a-zA-Z0-9_]*=" "$file" || echo "0")
    echo "Variables defined: $variables"

    # –ü–æ–¥—Å—á–µ—Ç –º–∞—Å—Å–∏–≤–æ–≤
    local arrays=$(grep -c "declare -a\|=()" "$file" || echo "0")
    echo "Arrays used: $arrays"

    # –ü–æ–¥—Å—á–µ—Ç –±–æ–ª—å—à–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö
    local large_structures=$(grep -c "for.*in.*\$\|while.*read" "$file" || echo "0")
    echo "Large data structures: $large_structures"

    # –û—Ü–µ–Ω–∫–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
    local memory_score=$((variables + arrays * 5 + large_structures * 10))
    echo "Memory usage score: $memory_score"

    if [ "$memory_score" -gt 50 ]; then
        echo "‚ö†Ô∏è  High memory usage - consider optimization"
    fi
}

# –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
analyze-algorithm-efficiency() {
    local file="$1"

    # –ü–æ–∏—Å–∫ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    local nested_loops=$(grep -c "for.*do.*for\|while.*do.*for" "$file" || echo "0")
    local sequential_searches=$(grep -c "grep.*for\|for.*grep" "$file" || echo "0")
    local unnecessary_forks=$(grep -c "cat.*|\|echo.*|" "$file" || echo "0")

    echo "Nested loops: $nested_loops"
    echo "Sequential searches: $sequential_searches"
    echo "Unnecessary forks: $unnecessary_forks"

    local efficiency_score=$((nested_loops * 5 + sequential_searches * 3 + unnecessary_forks * 2))
    echo "Algorithm efficiency score: $efficiency_score"

    if [ "$efficiency_score" -gt 10 ]; then
        echo "‚ö†Ô∏è  Inefficient algorithms detected"
    fi
}
```

## –ú–µ—Ç—Ä–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

### –ú–µ—Ç—Ä–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞
```bash
# –†–∞—Å—á–µ—Ç security score
calculate-security-score() {
    local file="$1"

    local score=100

    # –í—ã—á–∏—Ç–∞–µ–º –±–∞–ª–ª—ã –∑–∞ –ø—Ä–æ–±–ª–µ–º—ã
    if ! grep -q "set -euo pipefail" "$file"; then
        score=$((score - 20))
    fi

    if grep -q "\$[a-zA-Z_][a-zA-Z0-9_]*\s*[^\"']" "$file"; then
        score=$((score - 15))
    fi

    if grep -q "chmod 777\|chmod a+rwx" "$file"; then
        score=$((score - 25))
    fi

    if grep -q "curl.*|.*bash" "$file"; then
        score=$((score - 30))
    fi

    if grep -q "eval " "$file"; then
        score=$((score - 40))
    fi

    if [ "$score" -lt 0 ]; then score=0; fi

    echo "$score"
}

# –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏
analyze-attack-surface() {
    local file="$1"

    echo "=== Attack Surface Analysis ==="

    # –ü–æ–¥—Å—á–µ—Ç —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞
    local inputs=$(grep -c "read \|\\\$1\|\\\$2\|\\\$@" "$file" || echo "0")
    echo "Input points: $inputs"

    # –ü–æ–¥—Å—á–µ—Ç –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    local privileged_ops=$(grep -c "sudo\|su\|chmod\|chown" "$file" || echo "0")
    echo "Privileged operations: $privileged_ops"

    # –ü–æ–¥—Å—á–µ—Ç —Å–µ—Ç–µ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    local network_ops=$(grep -c "curl\|wget\|ssh\|scp\|nc" "$file" || echo "0")
    echo "Network operations: $network_ops"

    # –ü–æ–¥—Å—á–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∞–π–ª–∞–º–∏
    local file_ops=$(grep -c "rm \|> \|>> \|tee " "$file" || echo "0")
    echo "File operations: $file_ops"

    local attack_surface=$((inputs + privileged_ops * 2 + network_ops * 3 + file_ops))
    echo "Attack surface score: $attack_surface"

    if [ "$attack_surface" -gt 20 ]; then
        echo "‚ö†Ô∏è  Large attack surface - review security controls"
    fi
}
```

## –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏

### –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∞–º–∏
```bash
# –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∞–º–∏
analyze-test-coverage() {
    local layer_name="$1"

    # –ù–∞–π—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    local test_files=$(find . -name "*${layer_name}*test*" -o -name "*test*${layer_name}*" | wc -l)
    echo "Test files found: $test_files"

    # –ù–∞–π—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    local main_files=$(find layer/ -name "*${layer_name}*.yaml" | wc -l)
    echo "Main files: $main_files"

    # –†–∞—Å—á–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è
    if [ "$main_files" -gt 0 ]; then
        local coverage=$((test_files * 100 / main_files))
        echo "Test coverage: ${coverage}%"

        if [ "$coverage" -lt 50 ]; then
            echo "‚ö†Ô∏è  Low test coverage"
        elif [ "$coverage" -gt 100 ]; then
            echo "‚ÑπÔ∏è  Over-testing (more test files than main files)"
        fi
    fi
}

# –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
analyze-documentation() {
    local layer_name="$1"

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ README
    if [ -f "layer/${layer_name}/README.adoc" ]; then
        local readme_lines=$(wc -l < "layer/${layer_name}/README.adoc")
        echo "README lines: $readme_lines"

        if [ "$readme_lines" -lt 10 ]; then
            echo "‚ö†Ô∏è  Insufficient documentation"
        fi
    else
        echo "‚ùå No README found"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –∫–æ–¥–µ
    local code_files=$(find "layer/${layer_name}" -name "*.yaml" | wc -l)
    local total_comments=$(find "layer/${layer_name}" -name "*.yaml" -exec grep -c "^#" {} \; | awk '{sum+=$1} END {print sum}')

    if [ "$code_files" -gt 0 ]; then
        local avg_comments=$((total_comments / code_files))
        echo "Average comments per file: $avg_comments"

        if [ "$avg_comments" -lt 5 ]; then
            echo "‚ö†Ô∏è  Low code commenting"
        fi
    fi
}
```

## –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞

### –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –æ –∫–∞—á–µ—Å—Ç–≤–µ
```bash
# –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ
generate-quality-report() {
    local layer_name="$1"
    local output_file="${2:-quality-report.txt}"

    echo "=== Code Quality Report: $layer_name ===" > "$output_file"
    echo "Generated: $(date)" >> "$output_file"
    echo "" >> "$output_file"

    # –ù–∞–π—Ç–∏ —Ñ–∞–π–ª—ã —Å–ª–æ—è
    local layer_files=$(find "layer/${layer_name}" -name "*.yaml")

    for file in $layer_files; do
        echo "File: $(basename "$file")" >> "$output_file"

        # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        local complexity=$(calculate-cyclomatic-complexity "$file")
        local maintainability=$(calculate-maintainability-index "$file")
        local readability=$(calculate-readability-score "$file")
        local naming=$(calculate-naming-quality "$file")
        local security=$(calculate-security-score "$file")
        local duplication=$(calculate-code-duplication "$file")

        echo "  Complexity: $complexity" >> "$output_file"
        echo "  Maintainability: $maintainability/171" >> "$output_file"
        echo "  Readability: $readability/100" >> "$output_file"
        echo "  Naming quality: $naming/100" >> "$output_file"
        echo "  Security score: $security/100" >> "$output_file"
        echo "  Code duplication: $duplication lines" >> "$output_file"

        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        analyze-script-performance "$file" >> "$output_file" 2>&1
        analyze-memory-usage "$file" >> "$output_file" 2>&1
        analyze-algorithm-efficiency "$file" >> "$output_file" 2>&1

        echo "" >> "$output_file"
    done

    # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–ª–æ—è
    analyze-test-coverage "$layer_name" >> "$output_file"
    analyze-documentation "$layer_name" >> "$output_file"

    echo "Quality report generated: $output_file"
}

# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
track-quality-trends() {
    local layer_name="$1"

    # –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local history_file="quality-history/${layer_name}_${timestamp}.json"

    mkdir -p quality-history

    # –°–æ–±–∏—Ä–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏
    local metrics=$(cat <<EOF
{
  "timestamp": "$timestamp",
  "layer": "$layer_name",
  "complexity": $(calculate-cyclomatic-complexity "layer/${layer_name}/*.yaml" 2>/dev/null || echo "0"),
  "maintainability": $(calculate-maintainability-index "layer/${layer_name}/*.yaml" 2>/dev/null || echo "0"),
  "security": $(calculate-security-score "layer/${layer_name}/*.yaml" 2>/dev/null || echo "0"),
  "files": $(find "layer/${layer_name}" -name "*.yaml" | wc -l)
}
EOF
)

    echo "$metrics" > "$history_file"
    echo "Quality metrics tracked: $history_file"
}
```

## –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CI/CD

### –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞
```yaml
# .github/workflows/quality-gate.yml
name: Quality Gate
on: [push, pull_request]

jobs:
  quality-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run quality analysis
        run: |
          # –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç—ã –æ –∫–∞—á–µ—Å—Ç–≤–µ
          for layer in $(find layer/ -maxdepth 1 -type d | tail -n +2); do
            layer_name=$(basename "$layer")
            generate-quality-report "$layer_name" "reports/${layer_name}-quality.txt"
          done

      - name: Quality gate
        run: |
          # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
          if grep -q "Maintainability: [0-9]\|Security score: [0-9][0-9]" reports/*quality.txt; then
            echo "‚ùå Quality gate failed"
            exit 1
          else
            echo "‚úÖ Quality gate passed"
          fi

      - name: Upload reports
        uses: actions/upload-artifact@v3
        with:
          name: quality-reports
          path: reports/
```

---

## –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
- [ ] –ü—Ä–∞–≤–∏–ª–æ –∏–∑—É—á–µ–Ω–æ –∏ –ø–æ–Ω—è—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- [ ] –°–æ–±–ª—é–¥–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤ CI/CD
- [ ] –ù–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –º–µ—Ä–¥–∂–∞
- [ ] –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞
- [ ] –†–µ–≥—É–ª—è—Ä–Ω—ã–π –∞—É–¥–∏—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞

### –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
- [ ] 100% —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –≤ –Ω–æ–≤–æ–º –∫–æ–¥–µ
- [ ] –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–µ—Ç–∫–∞—Ö
- [ ] –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏—è
- [ ] –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- [ ] –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫ –ø—Ä–∞–≤–∏–ª–∞

### –ò—Å—Ç–æ—á–Ω–∏–∫
–°–æ–∑–¥–∞–Ω–æ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π rpi-image-gen