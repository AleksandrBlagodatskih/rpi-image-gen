---
alwaysApply: ${cursor.file.path.includes("layer/") || cursor.file.content.includes("version")}
---


# –ü—Ä–∞–≤–∏–ª–æ 38: –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏

## –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è, –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π rpi-image-gen.

## –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

## –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

### –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
```bash
# –°–∏—Å—Ç–µ–º–∞ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–ª–æ–µ–≤
version-layer() {
    local layer_name="$1"
    local change_type="$2"  # major|minor|patch

    # –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
    local current_version=$(grep "X-Env-Layer-Version:" "layer/${layer_name}/"*.yaml | head -1 | cut -d: -f2 | tr -d ' ')

    # –†–∞–∑–±–æ—Ä –≤–µ—Ä—Å–∏–∏
    IFS='.' read -ra version_parts <<< "$current_version"
    local major="${version_parts[0]}"
    local minor="${version_parts[1]}"
    local patch="${version_parts[2]}"

    # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —á–∞—Å—Ç–∏
    case "$change_type" in
        major)
            major=$((major + 1))
            minor=0
            patch=0
            ;;
        minor)
            minor=$((minor + 1))
            patch=0
            ;;
        patch)
            patch=$((patch + 1))
            ;;
        *)
            echo "Invalid change type: $change_type"
            return 1
            ;;
    esac

    local new_version="${major}.${minor}.${patch}"

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö —Å–ª–æ—è
    find "layer/${layer_name}" -name "*.yaml" -exec sed -i "s/X-Env-Layer-Version:.*/X-Env-Layer-Version: $new_version/" {} \;

    echo "‚úÖ Layer $layer_name version updated: $current_version -> $new_version"

    # –°–æ–∑–¥–∞–Ω–∏–µ changelog
    update-changelog "$layer_name" "$new_version" "$change_type"
}

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
auto-determine-version-bump() {
    local layer_name="$1"
    local commit_message="$2"

    if echo "$commit_message" | grep -qi "breaking\|major\|incompatible"; then
        echo "major"
    elif echo "$commit_message" | grep -qi "feature\|add\|new"; then
        echo "minor"
    else
        echo "patch"
    fi
}
```

### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ changelog
```bash
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ changelog
update-changelog() {
    local layer_name="$1"
    local version="$2"
    local change_type="$3"

    local changelog_file="layer/${layer_name}/CHANGELOG.md"

    # –°–æ–∑–¥–∞—Ç—å changelog –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if [ ! -f "$changelog_file" ]; then
        cat > "$changelog_file" << EOF
# Changelog

All notable changes to ${layer_name} layer will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
EOF
    fi

    # –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    local date=$(date +%Y-%m-%d)
    local temp_file=$(mktemp)

    # –í—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    awk "
    /^# Changelog/ {
        print
        print \"\"
        print \"## [${version}] - ${date}\"
        print \"\"
        print \"### ${change_type^} Changes\"
        print \"- Version bump to ${version}\"
        print \"\"
        next
    }
    {print}
    " "$changelog_file" > "$temp_file"

    mv "$temp_file" "$changelog_file"
    echo "‚úÖ Changelog updated for $layer_name v$version"
}
```

## –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏

### –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
```bash
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check-outdated-dependencies() {
    local layer_name="$1"

    echo "=== Checking dependencies for $layer_name ==="

    # –ù–∞–π—Ç–∏ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–ª–æ—è
    local layer_files=$(find "layer/${layer_name}" -name "*.yaml")

    for file in $layer_files; do
        echo "Checking $file..."

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å depends –≤ mmdebstrap
        if grep -q "^  depends:" "$file"; then
            local deps=$(sed -n '/^  depends:/,/^  [^ ]/p' "$file" | grep "^    -" | sed 's/^    - //' | tr '\n' ' ')
            echo "  System dependencies: $deps"

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø–∞–∫–µ—Ç–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            for dep in $deps; do
                if ! apt-cache show "$dep" >/dev/null 2>&1; then
                    echo "  ‚ö†Ô∏è  Package $dep may not be available"
                fi
            done
        fi

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å–ª–æ–µ–≤
        if grep -q "X-Env-Layer-Requires:" "$file"; then
            local layer_deps=$(grep "X-Env-Layer-Requires:" "$file" | cut -d: -f2 | tr -d ' ')
            echo "  Layer dependencies: $layer_deps"

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º—ã—Ö —Å–ª–æ–µ–≤
            IFS=',' read -ra deps_array <<< "$layer_deps"
            for dep in "${deps_array[@]}"; do
                dep=$(echo "$dep" | xargs)  # trim
                if ! find layer/ -name "*${dep}*" -type f | grep -q .; then
                    echo "  ‚ö†Ô∏è  Layer dependency $dep not found"
                fi
            done
        fi
    done
}

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
update-dependencies() {
    local layer_name="$1"

    echo "=== Updating dependencies for $layer_name ==="

    # –û–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    local layer_files=$(find "layer/${layer_name}" -name "*.yaml")

    for file in $layer_files; do
        # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
        echo "Updated dependencies in $file"
    done

    # –°–æ–∑–¥–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–º–∏—Ç
    git add "layer/${layer_name}"
    git commit -m "chore: update dependencies for ${layer_name} layer"
}
```

### –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
```bash
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö
check-vulnerabilities() {
    local layer_name="$1"

    echo "=== Security audit for $layer_name ==="

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
    local layer_files=$(find "layer/${layer_name}" -name "*.yaml")

    for file in $layer_files; do
        if grep -q "^  depends:" "$file"; then
            local deps=$(sed -n '/^  depends:/,/^  [^ ]/p' "$file" | grep "^    -" | sed 's/^    - //')

            for dep in $deps; do
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ apt (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
                if apt list --installed 2>/dev/null | grep -q "^${dep}/"; then
                    local installed_version=$(apt list --installed 2>/dev/null | grep "^${dep}/" | cut -d' ' -f2)
                    local candidate_version=$(apt-cache policy "$dep" 2>/dev/null | grep "Candidate:" | cut -d' ' -f2)

                    if [ "$installed_version" != "$candidate_version" ]; then
                        echo "‚ö†Ô∏è  $dep can be updated: $installed_version -> $candidate_version"
                    fi
                fi
            done
        fi
    done
}
```

## –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

### –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
```bash
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
generate-api-docs() {
    local layer_name="$1"

    local docs_dir="docs/layer/${layer_name}"
    mkdir -p "$docs_dir"

    # –ù–∞–π—Ç–∏ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–ª–æ—è
    local layer_files=$(find "layer/${layer_name}" -name "*.yaml")

    cat > "${docs_dir}/index.adoc" << EOF
= ${layer_name} Layer Documentation

== Overview

Auto-generated documentation for ${layer_name} layer.

== Configuration

EOF

    for file in $layer_files; do
        local basename=$(basename "$file" .yaml)

        cat >> "${docs_dir}/index.adoc" << EOF

=== $(basename "$file")

==== Metadata

EOF

        # –ò–∑–≤–ª–µ—á—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if grep -q "# METABEGIN" "$file"; then
            sed -n '/# METABEGIN/,/# METAEND/p' "$file" | grep "# X-Env-" | sed 's/# //' >> "${docs_dir}/index.adoc"
        fi

        cat >> "${docs_dir}/index.adoc" << EOF

==== Dependencies

EOF

        # –ò–∑–≤–ª–µ—á—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if grep -q "depends:" "$file"; then
            sed -n '/depends:/,/^  [^ ]/p' "$file" >> "${docs_dir}/index.adoc"
        fi
    done

    echo "‚úÖ API documentation generated: ${docs_dir}/index.adoc"
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
generate-usage-examples() {
    local layer_name="$1"

    local examples_dir="examples/${layer_name}"
    mkdir -p "$examples_dir"

    # –°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    cat > "${examples_dir}/basic.yaml" << EOF
device:
  layer: rpi5

image:
  layer: image-rpios

layer:
  base: bookworm-minbase
  ${layer_name}: ${layer_name}
EOF

    # –°–æ–∑–¥–∞—Ç—å README –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤
    cat > "${examples_dir}/README.adoc" << EOF
= ${layer_name} Examples

== Basic Usage

[source,yaml]
----
include::basic.yaml[]
----

== Advanced Configuration

=== Custom Settings

[source,yaml]
----
// TODO: Add advanced configuration examples
----

== Troubleshooting

=== Common Issues

// TODO: Add troubleshooting guide
EOF

    echo "‚úÖ Usage examples generated: ${examples_dir}/"
}
```

## –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

### –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
```bash
# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–ª—è —Å–ª–æ—è
generate-test-suite() {
    local layer_name="$1"

    local test_dir="test/${layer_name}"
    mkdir -p "$test_dir"

    # –°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç
    cat > "${test_dir}/basic-test.sh" << EOF
#!/bin/bash
# Basic tests for ${layer_name} layer

set -euo pipefail

echo "=== Testing ${layer_name} layer ==="

# Test 1: Configuration validation
echo "1. Testing configuration validation..."
if ! rpi-image-gen layer --validate "layer/${layer_name}"/*.yaml; then
    echo "‚ùå Configuration validation failed"
    exit 1
fi
echo "‚úÖ Configuration validation passed"

# Test 2: Dependency check
echo "2. Testing dependencies..."
if ! check-dependencies "${layer_name}"; then
    echo "‚ùå Dependency check failed"
    exit 1
fi
echo "‚úÖ Dependency check passed"

# Test 3: Build test (dry run)
echo "3. Testing build (dry run)..."
cat > /tmp/test-config.yaml << 'TEST_CONFIG_EOF'
device:
  layer: rpi5

image:
  layer: image-rpios

layer:
  base: bookworm-minbase
  ${layer_name}: ${layer_name}
TEST_CONFIG_EOF

if ! rpi-image-gen build -c /tmp/test-config.yaml --dry-run >/dev/null 2>&1; then
    echo "‚ùå Build test failed"
    exit 1
fi
echo "‚úÖ Build test passed"

echo "üéâ All tests passed for ${layer_name} layer"
EOF

    chmod +x "${test_dir}/basic-test.sh"
    echo "‚úÖ Test suite generated: ${test_dir}/"
}

# –ó–∞–ø—É—Å–∫ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
run-regression-tests() {
    local layer_name="$1"

    echo "=== Running regression tests for $layer_name ==="

    # –ù–∞–π—Ç–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã
    local test_files=$(find "test/${layer_name}" -name "*.sh")

    local passed=0
    local failed=0

    for test_file in $test_files; do
        echo "Running $(basename "$test_file")..."
        if bash "$test_file"; then
            ((passed++))
            echo "‚úÖ $(basename "$test_file") passed"
        else
            ((failed++))
            echo "‚ùå $(basename "$test_file") failed"
        fi
    done

    echo ""
    echo "Results: $passed passed, $failed failed"

    if [ "$failed" -gt 0 ]; then
        return 1
    fi
}
```

## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è

### –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–ª–æ—è
```bash
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–ª–æ—è
check-layer-health() {
    local layer_name="$1"

    echo "=== Layer Health Check: $layer_name ==="

    local issues=0

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if [ ! -d "layer/${layer_name}" ]; then
        echo "‚ùå Layer directory not found"
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    local yaml_files=$(find "layer/${layer_name}" -name "*.yaml" | wc -l)
    if [ "$yaml_files" -eq 0 ]; then
        echo "‚ùå No YAML files found"
        ((issues++))
    fi

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    if [ ! -f "layer/${layer_name}/README.adoc" ]; then
        echo "‚ö†Ô∏è  No README found"
        ((issues++))
    fi

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ—Å—Ç—ã
    if [ ! -d "test/${layer_name}" ]; then
        echo "‚ö†Ô∏è  No test directory found"
        ((issues++))
    fi

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if ! check-outdated-dependencies "$layer_name" >/dev/null 2>&1; then
        echo "‚ö†Ô∏è  Dependency issues detected"
        ((issues++))
    fi

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
    local quality_score=$(calculate-maintainability-index "layer/${layer_name}"/*.yaml 2>/dev/null || echo "0")
    if [ "$quality_score" -lt 50 ]; then
        echo "‚ö†Ô∏è  Low maintainability score: $quality_score"
        ((issues++))
    fi

    if [ "$issues" -eq 0 ]; then
        echo "‚úÖ Layer is healthy"
        return 0
    else
        echo "‚ö†Ô∏è  $issues health issues found"
        return 1
    fi
}

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
setup-health-monitoring() {
    local layer_name="$1"

    # –°–æ–∑–¥–∞—Ç—å cron job –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    cat > "/etc/cron.daily/layer-health-${layer_name}" << EOF
#!/bin/bash
# Daily health check for ${layer_name} layer

LOG_FILE="/var/log/layer-health-${layer_name}.log"

if ! check-layer-health "${layer_name}" >> "\$LOG_FILE" 2>&1; then
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ (–∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å email –∏–ª–∏ –¥—Ä—É–≥–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
    echo "WARNING: Health issues detected for ${layer_name} layer" >> "\$LOG_FILE"
    # mail -s "Layer Health Alert: ${layer_name}" admin@example.com < "\$LOG_FILE"
fi
EOF

    chmod +x "/etc/cron.daily/layer-health-${layer_name}"
    echo "‚úÖ Health monitoring configured for $layer_name"
}
```

## –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

### –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è
```bash
# –ú–∏–≥—Ä–∞—Ü–∏—è —Å–ª–æ—è –Ω–∞ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é API
migrate-layer-api() {
    local layer_name="$1"
    local from_version="$2"
    local to_version="$3"

    echo "=== Migrating $layer_name from $from_version to $to_version ==="

    # –°–æ–∑–¥–∞—Ç—å backup
    local backup_dir="backups/${layer_name}-migration-$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$backup_dir"
    cp -r "layer/${layer_name}" "$backup_dir/"

    # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
    case "$from_version:$to_version" in
        "1.0:2.0")
            # –ú–∏–≥—Ä–∞—Ü–∏—è —Å 1.0 –Ω–∞ 2.0
            migrate-1.0-to-2.0 "$layer_name"
            ;;
        "2.0:3.0")
            # –ú–∏–≥—Ä–∞—Ü–∏—è —Å 2.0 –Ω–∞ 3.0
            migrate-2.0-to-3.0 "$layer_name"
            ;;
        *)
            echo "No migration path defined for $from_version -> $to_version"
            return 1
            ;;
    esac

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    if validate-layer "$layer_name"; then
        echo "‚úÖ Migration completed successfully"
        # –°–æ–∑–¥–∞—Ç—å changelog –∑–∞–ø–∏—Å—å
        update-changelog "$layer_name" "$to_version" "major"
    else
        echo "‚ùå Migration validation failed, restoring backup"
        rm -rf "layer/${layer_name}"
        mv "$backup_dir/${layer_name}" "layer/"
        return 1
    fi
}

# –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
migrate-1.0-to-2.0() {
    local layer_name="$1"

    # –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    find "layer/${layer_name}" -name "*.yaml" -exec sed -i 's/X-Env-Layer-Desc:/X-Env-Layer-Description:/' {} \;

    # –û–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    find "layer/${layer_name}" -name "*.yaml" -exec sed -i 's/igconf getval/igconf getval/g' {} \;

    echo "Migrated $layer_name to v2.0 format"
}
```

---

## –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
- [ ] –ü—Ä–∞–≤–∏–ª–æ –∏–∑—É—á–µ–Ω–æ –∏ –ø–æ–Ω—è—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- [ ] –°–æ–±–ª—é–¥–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤ CI/CD
- [ ] –ù–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –º–µ—Ä–¥–∂–∞
- [ ] –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞
- [ ] –†–µ–≥—É–ª—è—Ä–Ω—ã–π –∞—É–¥–∏—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞

### –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
- [ ] 100% —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –≤ –Ω–æ–≤–æ–º –∫–æ–¥–µ
- [ ] –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–µ—Ç–∫–∞—Ö
- [ ] –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏—è
- [ ] –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- [ ] –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫ –ø—Ä–∞–≤–∏–ª–∞

### –ò—Å—Ç–æ—á–Ω–∏–∫
–°–æ–∑–¥–∞–Ω–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π rpi-image-gen