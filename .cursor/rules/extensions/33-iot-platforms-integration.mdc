---
alwaysApply: ${cursor.file.path.includes("iot") || cursor.file.content.includes("mqtt")}
---


# Правило 33: Интеграция с IoT платформами

## Назначение правила
Определяет стандарты и требования для интеграция с iot платформами в разработке расширений rpi-image-gen.

## Обязательные требования 🔴 ОБЯЗАТЕЛЬНЫЕ

## Интеграция с IoT платформами

### Популярные IoT платформы

#### Home Assistant интеграция:

```yaml
# METABEGIN
# X-Env-Layer-Name: home-assistant
# X-Env-Layer-Category: extension
# X-Env-Layer-Description: Интеграция с Home Assistant
# X-Env-Layer-Version: 1.0.0
# X-Env-Layer-Requires: essential,net-misc
# X-Env-VarPrefix: hass
#
# X-Env-Var-api_url: http://homeassistant.local:8123
# X-Env-Var-api_url-Description: URL API Home Assistant
# X-Env-Var-api_url-Required: true
# X-Env-Var-sensor_types: temperature,humidity,motion
# X-Env-Var-sensor_types-Description: Типы датчиков для мониторинга
# X-Env-Var-sensor_types-Required: false
# METAEND
---
mmdebstrap:
  packages:
    - python3
    - python3-pip
    - python3-rpi.gpio
    - curl
  setup-hooks:
    - pip3 install requests paho-mqtt adafruit-circuitpython-dht
  customize-hooks:
    - |
      # Создание интеграции с Home Assistant
      cat > /usr/local/bin/hass-sensor-integration.py << 'EOF'
      #!/usr/bin/env python3
      import time
      import json
      import requests
      import adafruit_dht
      import board
      import paho.mqtt.client as mqtt

      # Конфигурация
      HASS_URL = "${IGconf_hass_api_url}"
      SENSOR_PIN = board.D4
      SENSOR_TYPES = "${IGconf_hass_sensor_types}".split(',')

      def publish_discovery():
          """Публикация MQTT discovery сообщений"""
          client = mqtt.Client()
          client.connect("localhost", 1883, 60)

          for sensor_type in SENSOR_TYPES:
              discovery_topic = f"homeassistant/sensor/rpi_{sensor_type}/config"
              discovery_payload = {
                  "name": f"Raspberry Pi {sensor_type.title()}",
                  "state_topic": f"homeassistant/sensor/rpi_{sensor_type}/state",
                  "unit_of_measurement": get_unit(sensor_type),
                  "device_class": sensor_type,
                  "unique_id": f"rpi_sensor_{sensor_type}"
              }

              client.publish(discovery_topic, json.dumps(discovery_payload))

          client.disconnect()

      def get_unit(sensor_type):
          """Получение единиц измерения"""
          units = {
              "temperature": "°C",
              "humidity": "%",
              "motion": None,
              "pressure": "hPa"
          }
          return units.get(sensor_type)

      def send_to_homeassistant(data):
          """Отправка данных в Home Assistant"""
          try:
              response = requests.post(
                  f"{HASS_URL}/api/states/sensor.rpi_temperature",
                  headers={
                      "Authorization": f"Bearer {os.getenv('HASS_TOKEN', '')}",
                      "Content-Type": "application/json"
                  },
                  json={"state": data["temperature"]}
              )
              print(f"Данные отправлены: {response.status_code}")
          except Exception as e:
              print(f"Ошибка отправки данных: {e}")

      # Инициализация
      dht_device = adafruit_dht.DHT22(SENSOR_PIN)
      publish_discovery()

      while True:
          try:
              temperature = dht_device.temperature
              humidity = dht_device.humidity

              if temperature is not None and humidity is not None:
                  data = {
                      "temperature": temperature,
                      "humidity": humidity,
                      "timestamp": time.time()
                  }
                  send_to_homeassistant(data)

          except RuntimeError as e:
              print(f"Ошибка чтения датчика: {e}")

          time.sleep(60)
      EOF
      chmod +x /usr/local/bin/hass-sensor-integration.py

    - |
      # Создание systemd сервиса
      cat > /etc/systemd/system/hass-integration.service << EOF
      [Unit]
      Description=Home Assistant Sensor Integration
      After=network.target mosquitto.service

      [Service]
      ExecStart=/usr/local/bin/hass-sensor-integration.py
      Restart=always
      User=${IGconf_device_user}

      [Install]
      WantedBy=multi-user.target
      EOF

      systemctl enable hass-integration.service
```

---

## Метрики соблюдения правила 🔴 ОБЯЗАТЕЛЬНЫЕ

### Обязательные элементы
- [ ] Правило изучено и понято командой разработки
- [ ] Соблюдение требования отслеживается в CI/CD
- [ ] Нарушения правила приводят к блокировке мерджа
- [ ] Документация правила актуальна и доступна
- [ ] Регулярный аудит соблюдения правила

### Качественные показатели
- [ ] 100% соблюдение правила в новом коде
- [ ] Отсутствие нарушений в основных ветках
- [ ] Автоматизированная проверка соблюдения
- [ ] Обратная связь от команды разработки
- [ ] Непрерывное улучшение формулировок правила

### Источник
Создано из раздела документации: `34_интеграция_с_iot_платформами.mdc`
