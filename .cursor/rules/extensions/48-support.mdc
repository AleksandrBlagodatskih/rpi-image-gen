---
alwaysApply: ${cursor.file.path.includes("support/")}
---


# –ü—Ä–∞–≤–∏–ª–æ 48: –ü–æ–¥–¥–µ—Ä–∂–∫–∞

## –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
- [–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è](../docs/) - [Issues](../../issues)

## –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

## –ü–æ–¥–¥–µ—Ä–∂–∫–∞

- [–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è](../docs/)
- [Issues](../../issues)
```

<a id="test---—Ç–µ—Å—Ç—ã-–ø—Ä–æ–µ–∫—Ç–∞"></a>

### test/ - –¢–µ—Å—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞: ‚ö†Ô∏è *–û–ü–¶–ò–û–ù–ê–õ–¨–ù–´–ï*

#### –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞.

#### –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
```
test/
‚îú‚îÄ‚îÄ unit/                  # –ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
‚îÇ   ‚îú‚îÄ‚îÄ test_cli.py       # –¢–µ—Å—Ç—ã CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
‚îÇ   ‚îú‚îÄ‚îÄ test_layers.py    # –¢–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Å–ª–æ–µ–≤
‚îÇ   ‚îî‚îÄ‚îÄ test_validation.py # –¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
‚îú‚îÄ‚îÄ integration/          # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
‚îÇ   ‚îú‚îÄ‚îÄ test_full_build.py # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π —Å–±–æ—Ä–∫–∏
‚îÇ   ‚îî‚îÄ‚îÄ test_examples.py  # –¢–µ—Å—Ç –ø—Ä–∏–º–µ—Ä–æ–≤
‚îî‚îÄ‚îÄ fixtures/             # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    ‚îú‚îÄ‚îÄ configs/          # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    ‚îî‚îÄ‚îÄ layers/           # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª–æ–∏
```

#### –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:

**–®–∞–±–ª–æ–Ω –º–æ–¥—É–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:**
```python
#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ CLI.
"""

import unittest
import tempfile
import shutil
from pathlib import Path
from unittest.mock import patch, MagicMock

class TestCliComponent(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ CLI."""

    def setUp(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        self.test_dir = tempfile.mkdtemp()
        self.test_config = Path(self.test_dir) / 'test-config.yaml'

    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤."""
        shutil.rmtree(self.test_dir)

    def test_config_parsing(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
        self.test_config.write_text("""
        device:
          layer: test-device
        image:
          layer: test-image
        """)

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
        config_data = parse_config_file(self.test_config)

        self.assertEqual(config_data['device']['layer'], 'test-device')
        self.assertEqual(config_data['image']['layer'], 'test-image')

    def test_invalid_config(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        self.test_config.write_text("invalid: yaml: content: [")

        with self.assertRaises(ConfigError):
            parse_config_file(self.test_config)

    @patch('subprocess.run')
    def test_external_command_execution(self, mock_run):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –∫–æ–º–∞–Ω–¥."""
        mock_run.return_value = MagicMock(returncode=0)

        result = execute_external_command(['echo', 'test'])

        mock_run.assert_called_once_with(['echo', 'test'], check=True)
        self.assertTrue(result)
```

**–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:**
```python
#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–æ–ª–Ω–æ–π —Å–±–æ—Ä–∫–∏.
"""

import subprocess
import tempfile
import shutil
import unittest
from pathlib import Path

class TestFullBuildIntegration(unittest.TestCase):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–æ–ª–Ω–æ–π —Å–±–æ—Ä–∫–∏."""

    def setUp(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞."""
        self.test_project = Path(tempfile.mkdtemp()) / 'test-project'
        self.test_project.mkdir()

        # –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
        (self.test_project / 'config').mkdir()
        (self.test_project / 'layer').mkdir()

    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞."""
        shutil.rmtree(self.test_project.parent)

    def test_minimal_build(self):
        """–¢–µ—Å—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–∞."""
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_content = """
        device:
          layer: pi5
        image:
          layer: image-rpios
        layer:
          base: bookworm-minbase
        """

        config_file = self.test_project / 'config' / 'test.yaml'
        config_file.write_text(config_content)

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏
        result = subprocess.run([
            'rpi-image-gen', 'build',
            '-S', str(self.test_project),
            '-c', str(config_file),
            '--dry-run'
        ], capture_output=True, text=True)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        self.assertEqual(result.returncode, 0)
        self.assertIn('PARAM', result.stdout)
        self.assertIn('LAYER', result.stdout)

    def test_build_with_custom_layer(self):
        """–¢–µ—Å—Ç —Å–±–æ—Ä–∫–∏ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Å–ª–æ–µ–º."""
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–ª–æ—è
        layer_content = """
        # METABEGIN
        # X-Env-Layer-Name: test-layer
        # X-Env-Layer-Category: extension
        # X-Env-Layer-Description: –¢–µ—Å—Ç–æ–≤—ã–π —Å–ª–æ–π
        # X-Env-Layer-Version: 1.0.0
        # METAEND
        ---
        mmdebstrap:
          packages:
            - curl
          customize-hooks:
            - echo "–¢–µ—Å—Ç–æ–≤—ã–π —Ö—É–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω"
        """

        layer_file = self.test_project / 'layer' / 'test-layer.yaml'
        layer_file.write_text(layer_content)

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Å–ª–æ–µ–º
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ç–µ—Å—Ç—É
```

<a id="templates---—à–∞–±–ª–æ–Ω—ã-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"></a>

### templates/ - –®–∞–±–ª–æ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ‚ö†Ô∏è *–û–ü–¶–ò–û–ù–ê–õ–¨–ù–´–ï*

#### –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
–®–∞–±–ª–æ–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.

#### –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
```
templates/
‚îú‚îÄ‚îÄ layer-docs/           # –®–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å–ª–æ–µ–≤
‚îÇ   ‚îî‚îÄ‚îÄ layer.adoc.jinja  # Jinja —à–∞–±–ª–æ–Ω –¥–ª—è —Å–ª–æ—è
‚îú‚îÄ‚îÄ config-docs/          # –®–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
‚îî‚îÄ‚îÄ example-gen/          # –®–∞–±–ª–æ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤
```

#### –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã —à–∞–±–ª–æ–Ω–æ–≤ (Jinja2):

```jinja
{# templates/layer-docs/layer.adoc.jinja #}
= {{ layer_name }}
{% if layer_category %}:badge[{{ layer_category }}]{% endif %}
{% if layer_version %}:badge[{{ layer_version }}]{% endif %}

{% if layer_description %}{{ layer_description }}{% endif %}

== –û–±–∑–æ—Ä

–≠—Ç–æ—Ç —Å–ª–æ–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç {{ layer_purpose }}.

== –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è

{% if layer_requires %}
–¢—Ä–µ–±—É–µ–º—ã–µ —Å–ª–æ–∏:
{% for requirement in layer_requires %}
- {{ requirement }}
{% endfor %}
{% endif %}

== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

{% if layer_variables %}
=== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

|===
| –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è | –û–ø–∏—Å–∞–Ω–∏–µ | –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é | –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞

{% for var_name, var_info in layer_variables.items() %}
| `IGconf_{{ var_prefix }}_{{ var_name }}` | {{ var_info.description }} | {{ var_info.default | default('–ù–µ—Ç') }} | {{ '–î–∞' if var_info.required else '–ù–µ—Ç' }}
{% endfor %}
|===
{% endif %}

== –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

[source,yaml]
----
device:
  layer: {{ layer_name }}

layer:
  {{ var_prefix }}: {{ layer_name }}
----
```

<a id="work---—Ä–∞–±–æ—á–∞—è-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è-—Å–±–æ—Ä–∫–∏"></a>

### work/ - –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–±–æ—Ä–∫–∏: ‚ö†Ô∏è *–û–ü–¶–ò–û–ù–ê–õ–¨–ù–´–ï*

#### –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–±–æ—Ä–∫–∏.

#### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏):
```
work/
‚îú‚îÄ‚îÄ image-{config_name}/      # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–±–æ—Ä–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
‚îÇ   ‚îú‚îÄ‚îÄ filesystem/          # –°–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
‚îÇ   ‚îú‚îÄ‚îÄ image-{name}.img     # –ì–æ—Ç–æ–≤—ã–π –æ–±—Ä–∞–∑ –¥–∏—Å–∫–∞
‚îÇ   ‚îú‚îÄ‚îÄ genimage.cfg         # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è genimage
‚îÇ   ‚îî‚îÄ‚îÄ sbom.json            # –û—Ç—á–µ—Ç SBOM
‚îî‚îÄ‚îÄ chroot-{layer_name}/      # –í—Ä–µ–º–µ–Ω–Ω—ã–µ chroot –æ–∫—Ä—É–∂–µ–Ω–∏—è
```

#### –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã:
- **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞** –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–±–æ—Ä–∫–∏
- **–ù–µ –≤–∫–ª—é—á–∞—Ç—å –≤ git** (–¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ .gitignore)
- **–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ** —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞

–≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç **—á–µ—Ç–∫—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é**, **–º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å** –∏ **—Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º–æ—Å—Ç—å** –ø—Ä–æ–µ–∫—Ç–∞ rpi-image-gen, —Å —è—Å–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.

---

## –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
- [ ] –ü—Ä–∞–≤–∏–ª–æ –∏–∑—É—á–µ–Ω–æ –∏ –ø–æ–Ω—è—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- [ ] –°–æ–±–ª—é–¥–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤ CI/CD
- [ ] –ù–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –º–µ—Ä–¥–∂–∞
- [ ] –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞
- [ ] –†–µ–≥—É–ª—è—Ä–Ω—ã–π –∞—É–¥–∏—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞

### –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
- [ ] 100% —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –≤ –Ω–æ–≤–æ–º –∫–æ–¥–µ
- [ ] –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–µ—Ç–∫–∞—Ö
- [ ] –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏—è
- [ ] –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- [ ] –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫ –ø—Ä–∞–≤–∏–ª–∞

### –ò—Å—Ç–æ—á–Ω–∏–∫
–°–æ–∑–¥–∞–Ω–æ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: `49_–ø–æ–¥–¥–µ—Ä–∂–∫–∞.mdc`
