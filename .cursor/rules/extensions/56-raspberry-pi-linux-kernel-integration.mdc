---
alwaysApply: ${cursor.file.path.includes("kernel")}
---


# –ü—Ä–∞–≤–∏–ª–æ 56: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Raspberry Pi Linux Kernel

## –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —è–¥—Ä–∞ Linux Raspberry Pi –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è rpi-image-gen –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

## –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

## –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Raspberry Pi Linux Kernel

### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è–¥—Ä–æ–º Linux –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–±–æ—Ä–∫–∏

#### –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–¥—Ä–∞:
```bash
#!/bin/bash
# build-rpi-kernel.sh

set -euo pipefail

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
KERNEL_REPO="https://github.com/raspberrypi/linux.git"
KERNEL_DIR="/opt/rpi-kernel"
BUILD_DIR="/tmp/kernel-build"
INSTALL_DIR="/boot/firmware"
MODULES_DIR="/lib/modules"

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏ –º–æ–¥–µ–ª–∏
detect_system_info() {
    ARCH=$(uname -m)
    case "$ARCH" in
        aarch64)
            KERNEL_ARCH="arm64"
            DEFCONFIG="bcm2711_defconfig"
            IMAGE_NAME="Image"
            ;;
        armv7l)
            KERNEL_ARCH="arm"
            DEFCONFIG="bcm2709_defconfig"
            IMAGE_NAME="zImage"
            ;;
        *)
            echo "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $ARCH"
            exit 1
            ;;
    esac

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ Raspberry Pi –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if [ -f /proc/device-tree/model ]; then
        PI_MODEL=$(tr -d '\0' < /proc/device-tree/model | sed 's/Raspberry Pi //;s/ Model //;s/Rev.*//')
        case "$PI_MODEL" in
            "5")
                DEFCONFIG="bcm2712_defconfig"
                ;;
            "4")
                DEFCONFIG="bcm2711_defconfig"
                ;;
            "3"*)
                DEFCONFIG="bcm2709_defconfig"
                ;;
            "2"*)
                DEFCONFIG="bcm2709_defconfig"
                ;;
            "Zero"*|"1"*)
                DEFCONFIG="bcmrpi_defconfig"
                ;;
        esac
    fi

    echo "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $KERNEL_ARCH"
    echo "–ú–æ–¥–µ–ª—å: $PI_MODEL"
    echo "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: $DEFCONFIG"
    echo "–û–±—Ä–∞–∑ —è–¥—Ä–∞: $IMAGE_NAME"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Å–±–æ—Ä–∫–∏ —è–¥—Ä–∞
install_kernel_dependencies() {
    echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Å–±–æ—Ä–∫–∏ —è–¥—Ä–∞..."

    apt-get update
    apt-get install -y \
        git \
        bc \
        bison \
        flex \
        libssl-dev \
        make \
        libc6-dev \
        libncurses5-dev \
        crossbuild-essential-arm64 \
        crossbuild-essential-armhf \
        gcc-aarch64-linux-gnu \
        gcc-arm-linux-gnueabihf
}

# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ —è–¥—Ä–∞
prepare_kernel_sources() {
    echo "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ —è–¥—Ä–∞..."

    if [ ! -d "$KERNEL_DIR" ]; then
        git clone --depth 1 --branch rpi-6.1.y "$KERNEL_REPO" "$KERNEL_DIR"
    fi

    cd "$KERNEL_DIR"

    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–±–æ—Ä–∫–∏
    make clean
    make mrproper

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    make ARCH="$KERNEL_ARCH" "$DEFCONFIG"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–¥—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
configure_kernel() {
    if [ "${INTERACTIVE_CONFIG:-false}" = "true" ]; then
        echo "–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è–¥—Ä–∞..."
        make ARCH="$KERNEL_ARCH" menuconfig
    fi
}

# –°–±–æ—Ä–∫–∞ —è–¥—Ä–∞
build_kernel() {
    echo "–°–±–æ—Ä–∫–∞ —è–¥—Ä–∞ Linux..."

    local jobs=$(nproc)

    # –°–±–æ—Ä–∫–∞ —è–¥—Ä–∞
    make ARCH="$KERNEL_ARCH" -j"$jobs" "$IMAGE_NAME"

    # –°–±–æ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π
    make ARCH="$KERNEL_ARCH" -j"$jobs" modules

    # –°–±–æ—Ä–∫–∞ Device Tree —Ñ–∞–π–ª–æ–≤
    make ARCH="$KERNEL_ARCH" -j"$jobs" dtbs
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–¥—Ä–∞
install_kernel() {
    echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–¥—Ä–∞..."

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    mkdir -p "$INSTALL_DIR"
    mkdir -p "$MODULES_DIR"

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–∑–∞ —è–¥—Ä–∞
    cp "arch/$KERNEL_ARCH/boot/$IMAGE_NAME" "$INSTALL_DIR/kernel8.img"

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª–µ–π
    make ARCH="$KERNEL_ARCH" modules_install INSTALL_MOD_PATH="/"

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Device Tree —Ñ–∞–π–ª–æ–≤
    make ARCH="$KERNEL_ARCH" dtbs_install INSTALL_DTBS_PATH="/boot/firmware/overlays"

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–æ–¥—É–ª–µ–π
    depmod -a
}

# –°–æ–∑–¥–∞–Ω–∏–µ initramfs (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
create_initramfs() {
    if [ "${CREATE_INITRAMFS:-false}" = "true" ]; then
        echo "–°–æ–∑–¥–∞–Ω–∏–µ initramfs..."

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ initramfs
        update-initramfs -c -k "$(make kernelrelease)"

        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ initramfs –≤ boot –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        cp "/boot/initrd.img-$(make kernelrelease)" "$INSTALL_DIR/"
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
configure_bootloader() {
    local config_file="$INSTALL_DIR/config.txt"

    echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏..."

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —è–¥—Ä–∞ –≤ config.txt
    cat >> "$config_file" << EOF

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —è–¥—Ä–∞ Raspberry Pi
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ rpi-image-gen

kernel=kernel8.img
arm_64bit=1
initramfs initrd.img followkernel
EOF

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ device tree –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if [ -n "${DEVICE_TREE:-}" ]; then
        echo "device_tree=$DEVICE_TREE" >> "$config_file"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —è–¥—Ä–∞
verify_kernel_installation() {
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–¥—Ä–∞..."

    local kernel_version
    kernel_version=$(make kernelrelease)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—Ä–∞–∑–∞ —è–¥—Ä–∞
    if [ ! -f "$INSTALL_DIR/kernel8.img" ]; then
        echo "–û–®–ò–ë–ö–ê: –û–±—Ä–∞–∑ —è–¥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π
    if [ ! -d "$MODULES_DIR/$kernel_version" ]; then
        echo "–û–®–ò–ë–ö–ê: –ú–æ–¥—É–ª–∏ —è–¥—Ä–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    if ! grep -q "kernel=kernel8.img" "$INSTALL_DIR/config.txt"; then
        echo "–û–®–ò–ë–ö–ê: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
        return 1
    fi

    echo "–Ø–¥—Ä–æ –≤–µ—Ä—Å–∏–∏ $kernel_version —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    return 0
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "–°–±–æ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Raspberry Pi Linux Kernel"

    detect_system_info
    install_kernel_dependencies
    prepare_kernel_sources
    configure_kernel
    build_kernel
    install_kernel
    create_initramfs
    configure_bootloader

    if verify_kernel_installation; then
        echo "–Ø–¥—Ä–æ Linux —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        return 0
    else
        echo "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π —è–¥—Ä–∞"
        return 1
    fi
}

main "$@"
```

#### –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —è–¥—Ä–∞ –≤ —Å–ª–æ–π rpi-image-gen:
```yaml
# METABEGIN
# X-Env-Layer-Name: raspberrypi-kernel
# X-Env-Layer-Category: extension
# X-Env-Layer-Description: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Raspberry Pi Linux kernel –≤ –æ–±—Ä–∞–∑
# X-Env-Layer-Version: 1.0.0
# X-Env-Layer-Requires: essential,bootloader
# X-Env-VarPrefix: kernel
#
# X-Env-Var-kernel_branch: rpi-6.1.y
# X-Env-Var-kernel_branch-Description: –í–µ—Ç–∫–∞ —è–¥—Ä–∞ –¥–ª—è —Å–±–æ—Ä–∫–∏
# X-Env-Var-kernel_branch-Required: false
# X-Env-Var-kernel_branch-Valid: rpi-6.1.y,rpi-6.6.y,rpi-6.8.y
#
# X-Env-Var-kernel_defconfig: auto
# X-Env-Var-kernel_defconfig-Description: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —è–¥—Ä–∞ (auto –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)
# X-Env-Var-kernel_defconfig-Required: false
#
# X-Env-Var-kernel_install_modules: true
# X-Env-Var-kernel_install_modules-Description: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –º–æ–¥—É–ª–∏ —è–¥—Ä–∞
# X-Env-Var-kernel_install_modules-Required: false
# X-Env-Var-kernel_install_modules-Valid: true,false
#
# X-Env-Var-kernel_create_initramfs: false
# X-Env-Var-kernel_create_initramfs-Description: –°–æ–∑–¥–∞–≤–∞—Ç—å initramfs
# X-Env-Var-kernel_create_initramfs-Required: false
# X-Env-Var-kernel_create_initramfs-Valid: true,false
# METAEND
---
mmdebstrap:
  packages:
    - git
    - build-essential
    - bc
    - bison
    - flex
    - libssl-dev
    - libncurses5-dev
    - crossbuild-essential-arm64
    - raspberrypi-kernel-headers
  customize-hooks:
    - |
      # –°–±–æ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Raspberry Pi kernel
      setup_raspberrypi_kernel() {
          echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Raspberry Pi kernel"

          # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏ –º–æ–¥–µ–ª–∏
          detect_pi_info() {
              if [ "$(uname -m)" = "aarch64" ]; then
                  ARCH="arm64"
                  IMAGE="Image"
              else
                  ARCH="arm"
                  IMAGE="zImage"
              fi

              if grep -q "Pi 5" /proc/device-tree/model 2>/dev/null; then
                  DEFCONFIG="bcm2712_defconfig"
              elif grep -q "Pi 4" /proc/device-tree/model 2>/dev/null; then
                  DEFCONFIG="bcm2711_defconfig"
              else
                  DEFCONFIG="bcm2709_defconfig"
              fi

              if [ "${IGconf_kernel_kernel_defconfig}" != "auto" ]; then
                  DEFCONFIG="${IGconf_kernel_kernel_defconfig}"
              fi
          }

          detect_pi_info

          # –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ —è–¥—Ä–∞
          KERNEL_DIR="/opt/rpi-kernel"
          if [ ! -d "$KERNEL_DIR" ]; then
              git clone --depth 1 --branch "${IGconf_kernel_kernel_branch:-rpi-6.1.y}" \
                  https://github.com/raspberrypi/linux.git "$KERNEL_DIR"
          fi

          cd "$KERNEL_DIR"

          # –°–±–æ—Ä–∫–∞ —è–¥—Ä–∞
          echo "–°–±–æ—Ä–∫–∞ —è–¥—Ä–∞ –¥–ª—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã $ARCH —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π $DEFCONFIG"

          make ARCH="$ARCH" "$DEFCONFIG"
          make ARCH="$ARCH" -j"$(nproc)" "$IMAGE"

          if [ "${IGconf_kernel_kernel_install_modules:-true}" = "true" ]; then
              make ARCH="$ARCH" -j"$(nproc)" modules
              make ARCH="$ARCH" modules_install
          fi

          # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–¥—Ä–∞
          mkdir -p /boot/firmware
          cp "arch/$ARCH/boot/$IMAGE" /boot/firmware/kernel8.img

          # –°–æ–∑–¥–∞–Ω–∏–µ initramfs –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
          if [ "${IGconf_kernel_kernel_create_initramfs:-false}" = "true" ]; then
              make ARCH="$ARCH" dtbs
              update-initramfs -c -k "$(make kernelrelease)"
          fi

          # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
          cat >> /boot/firmware/config.txt << EOF

# Raspberry Pi Kernel Integration
# –î–æ–±–∞–≤–ª–µ–Ω–æ rpi-image-gen —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
kernel=kernel8.img
arm_64bit=1
EOF

          # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–¥—Ä–∞
          cat > /usr/local/bin/update-rpi-kernel.sh << 'KERNEL_EOF'
#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Raspberry Pi kernel

set -euo pipefail

KERNEL_DIR="/opt/rpi-kernel"
LOG_FILE="/var/log/rpi-kernel-update.log"

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') $*" | tee -a "$LOG_FILE"
}

update_kernel() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —è–¥—Ä–∞"

    cd "$KERNEL_DIR"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    git fetch origin
    git checkout "${IGconf_kernel_kernel_branch:-rpi-6.1.y}"
    git pull --ff-only

    # –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ —è–¥—Ä–∞
    make clean
    make ARCH="$(uname -m | sed 's/aarch64/arm64/;s/armv7l/arm/')" "$(make kernelrelease | cut -d- -f2-)_defconfig"
    make -j"$(nproc)" "$(uname -m | sed 's/aarch64/Image/;s/armv7l/zImage/')"

    if [ "${IGconf_kernel_kernel_install_modules:-true}" = "true" ]; then
        make -j"$(nproc)" modules
        make modules_install
    fi

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —è–¥—Ä–∞
    cp "arch/$(uname -m | sed 's/aarch64/arm64/;s/armv7l/arm/')/boot/$(uname -m | sed 's/aarch64/Image/;s/armv7l/zImage/')" /boot/firmware/kernel8.img

    log "–Ø–¥—Ä–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ –≤–µ—Ä—Å–∏–∏ $(make kernelrelease)"
}

update_kernel
KERNEL_EOF

          chmod +x /usr/local/bin/update-rpi-kernel.sh

          # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
          if [ "${IGconf_kernel_auto_update:-false}" = "true" ]; then
              cat > /etc/cron.monthly/update-rpi-kernel << 'CRON_EOF'
#!/bin/bash
/usr/local/bin/update-rpi-kernel.sh
CRON_EOF
              chmod +x /etc/cron.monthly/update-rpi-kernel
          fi
      }

      setup_raspberrypi_kernel
```

#### –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —è–¥—Ä–∞:
```bash
#!/bin/bash
# kernel-diagnostics.sh

# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Raspberry Pi kernel

check_kernel_version() {
    echo "=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —è–¥—Ä–µ ==="

    uname -a

    echo -e "\n–í–µ—Ä—Å–∏—è —è–¥—Ä–∞:"
    uname -r

    echo -e "\n–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:"
    uname -m
}

check_kernel_modules() {
    echo "=== –ú–æ–¥—É–ª–∏ —è–¥—Ä–∞ ==="

    echo "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:"
    lsmod | wc -l
    echo "–∏–∑ –Ω–∏—Ö —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è Raspberry Pi:"
    lsmod | grep -c bcm || echo "0"

    echo -e "\n–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:"
    find /lib/modules/$(uname -r) -name "*.ko" | wc -l
}

check_kernel_config() {
    echo "=== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —è–¥—Ä–∞ ==="

    local config_file="/boot/firmware/config.txt"

    if [ -f "$config_file" ]; then
        echo "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —è–¥—Ä–∞ –≤ config.txt:"
        grep -E "^kernel|^arm_64bit|^initramfs" "$config_file" || echo "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —è–¥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi

    echo -e "\n–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —è–¥—Ä–∞:"
    cat /proc/cmdline
}

check_kernel_performance() {
    echo "=== –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —è–¥—Ä–∞ ==="

    echo "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã:"
    uptime

    echo -e "\n–ó–∞–≥—Ä—É–∑–∫–∞ CPU:"
    top -bn1 | head -3

    echo -e "\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:"
    free -h

    echo -e "\n–î–∏—Å–∫ I/O:"
    iostat -x 1 1 | tail -1 | awk '{print "Read: "$4" KB/s, Write: "$5" KB/s"}'
}

check_kernel_errors() {
    echo "=== –û—à–∏–±–∫–∏ —è–¥—Ä–∞ ==="

    echo "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ dmesg:"
    dmesg | grep -i error | tail -5 || echo "–û—à–∏–±–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

    echo -e "\n–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —è–¥—Ä–∞:"
    dmesg | grep -i warning | tail -3 || echo "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

    echo -e "\n–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º:"
    dmesg | grep -E "(bcm|i2c|spi|gpio)" | grep -i fail | tail -3 || echo "–ü—Ä–æ–±–ª–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
}

main() {
    check_kernel_version
    echo ""
    check_kernel_modules
    echo ""
    check_kernel_config
    echo ""
    check_kernel_performance
    echo ""
    check_kernel_errors
}

main "$@"
```

---

## –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
- [ ] –ü—Ä–∞–≤–∏–ª–æ –∏–∑—É—á–µ–Ω–æ –∏ –ø–æ–Ω—è—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- [ ] –°–æ–±–ª—é–¥–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤ CI/CD
- [ ] –ù–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –º–µ—Ä–¥–∂–∞
- [ ] –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞
- [ ] –†–µ–≥—É–ª—è—Ä–Ω—ã–π –∞—É–¥–∏—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞

### –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
- [ ] 100% —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –≤ –Ω–æ–≤–æ–º –∫–æ–¥–µ
- [ ] –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–µ—Ç–∫–∞—Ö
- [ ] –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏—è
- [ ] –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- [ ] –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫ –ø—Ä–∞–≤–∏–ª–∞

### –ò—Å—Ç–æ—á–Ω–∏–∫
–°–æ–∑–¥–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: https://github.com/raspberrypi/linux