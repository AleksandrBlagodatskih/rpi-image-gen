---
alwaysApply: ${cursor.file.path.includes("secure") || cursor.file.content.includes("boot")}
---


# –ü—Ä–∞–≤–∏–ª–æ 57: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Raspberry Pi Secure Boot Provisioner

## –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ secure boot –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º Raspberry Pi –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è rpi-image-gen –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –¥–∞–Ω–Ω—ã—Ö.

## –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

## –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Raspberry Pi Secure Boot Provisioner

### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ secure boot –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–±–æ—Ä–∫–∏

#### –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–π –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è secure boot:
```bash
#!/bin/bash
# setup-secure-boot.sh

set -euo pipefail

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SECURE_BOOT_DIR="/opt/rpi-secure-boot"
KEYS_DIR="$SECURE_BOOT_DIR/keys"
CERTS_DIR="$SECURE_BOOT_DIR/certs"
SCRIPTS_DIR="$SECURE_BOOT_DIR/scripts"

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–ª—é—á–µ–π
create_secure_boot_infrastructure() {
    echo "–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã secure boot..."

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    mkdir -p "$KEYS_DIR" "$CERTS_DIR" "$SCRIPTS_DIR"

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –∫–ª—é—á–∞ (RSA 2048)
    openssl genrsa -out "$KEYS_DIR/root.key" 2048

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    openssl req -new -x509 -key "$KEYS_DIR/root.key" -out "$CERTS_DIR/root.crt" \
        -subj "/C=GB/ST=Cambridge/L=Cambridge/O=Raspberry Pi/OU=Secure Boot/CN=Root CA" \
        -days 3650

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ bootloader
    openssl genrsa -out "$KEYS_DIR/bootloader.key" 2048

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è bootloader
    openssl req -new -key "$KEYS_DIR/bootloader.key" -out "$CERTS_DIR/bootloader.csr" \
        -subj "/C=GB/ST=Cambridge/L=Cambridge/O=Raspberry Pi/OU=Secure Boot/CN=Bootloader"

    # –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ bootloader –∫–æ—Ä–Ω–µ–≤—ã–º –∫–ª—é—á–æ–º
    openssl x509 -req -in "$CERTS_DIR/bootloader.csr" -CA "$CERTS_DIR/root.crt" \
        -CAkey "$KEYS_DIR/root.key" -CAcreateserial -out "$CERTS_DIR/bootloader.crt" \
        -days 3650

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ OS
    openssl genrsa -out "$KEYS_DIR/os.key" 2048

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è OS
    openssl req -new -key "$KEYS_DIR/os.key" -out "$CERTS_DIR/os.csr" \
        -subj "/C=GB/ST=Cambridge/L=Cambridge/O=Raspberry Pi/OU=Secure Boot/CN=Operating System"

    # –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ OS
    openssl x509 -req -in "$CERTS_DIR/os.csr" -CA "$CERTS_DIR/root.crt" \
        -CAkey "$KEYS_DIR/root.key" -CAcreateserial -out "$CERTS_DIR/os.crt" \
        -days 3650

    echo "–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª—é—á–µ–π —Å–æ–∑–¥–∞–Ω–∞"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OTP (One-Time Programmable) –ø–∞–º—è—Ç–∏
configure_otp_memory() {
    echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ OTP –ø–∞–º—è—Ç–∏ –¥–ª—è secure boot..."

    # –î–ª—è Raspberry Pi 4/5 OTP –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    # –≠—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ, –∑–¥–µ—Å—å –º—ã –≥–æ—Ç–æ–≤–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é

    cat > "$SCRIPTS_DIR/configure-otp.sh" << 'OTP_EOF'
#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OTP –¥–ª—è secure boot

set -euo pipefail

OTP_CONFIG="/boot/firmware/otp-config.txt"
SECURE_BOOT_DIR="/opt/rpi-secure-boot"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
command -v rpi-otp >/dev/null 2>&1 || {
    echo "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç rpi-otp –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
}

# –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π OTP
echo "–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è OTP:"
rpi-otp -r || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å OTP"

# –ó–∞–ø–∏—Å—å –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ OTP (—Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ!)
if [ -f "$SECURE_BOOT_DIR/certs/root.crt" ]; then
    echo "OTP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞"
    echo "–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
    echo "rpi-otp -w <otp-slot> -f $SECURE_BOOT_DIR/certs/root.crt"
else
    echo "–ö–æ—Ä–Ω–µ–≤–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi
OTP_EOF

    chmod +x "$SCRIPTS_DIR/configure-otp.sh"
}

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ bootloader –¥–ª—è secure boot
prepare_secure_bootloader() {
    echo "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ bootloader –¥–ª—è secure boot..."

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –ø–æ–¥–ø–∏—Å–∏ bootloader
    cat > "$SCRIPTS_DIR/sign-bootloader.sh" << 'SIGN_EOF'
#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –ø–æ–¥–ø–∏—Å–∏ bootloader

set -euo pipefail

BOOTLOADER_FILE="$1"
SECURE_BOOT_DIR="/opt/rpi-secure-boot"
SIGNED_DIR="/boot/firmware/signed"

mkdir -p "$SIGNED_DIR"

if [ ! -f "$BOOTLOADER_FILE" ]; then
    echo "–§–∞–π–ª bootloader –Ω–µ –Ω–∞–π–¥–µ–Ω: $BOOTLOADER_FILE"
    exit 1
fi

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö–µ—à–∞ bootloader
BOOT_HASH=$(openssl dgst -sha256 -binary "$BOOTLOADER_FILE" | openssl base64)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
openssl dgst -sha256 -sign "$SECURE_BOOT_DIR/keys/bootloader.key" \
    -out "$SIGNED_DIR/$(basename "$BOOTLOADER_FILE").sig" "$BOOTLOADER_FILE"

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
cp "$BOOTLOADER_FILE" "$SIGNED_DIR/"

echo "Bootloader –ø–æ–¥–ø–∏—Å–∞–Ω: $(basename "$BOOTLOADER_FILE")"
SIGN_EOF

    chmod +x "$SCRIPTS_DIR/sign-bootloader.sh"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
setup_encrypted_filesystem() {
    echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã..."

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LUKS
    cat > "$SCRIPTS_DIR/setup-luks.sh" << 'LUKS_EOF'
#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LUKS —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è

set -euo pipefail

DEVICE="$1"
MAPPER_NAME="${2:-encrypted}"
SECURE_BOOT_DIR="/opt/rpi-secure-boot"

if [ -z "$DEVICE" ]; then
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <device> [mapper_name]"
    exit 1
fi

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å TPM/secure element)
if [ ! -f "$SECURE_BOOT_DIR/luks.key" ]; then
    dd if=/dev/urandom of="$SECURE_BOOT_DIR/luks.key" bs=1 count=32
    chmod 600 "$SECURE_BOOT_DIR/luks.key"
fi

# –°–æ–∑–¥–∞–Ω–∏–µ LUKS –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
cryptsetup luksFormat "$DEVICE" "$SECURE_BOOT_DIR/luks.key" \
    --cipher aes-xts-plain64 \
    --key-size 512 \
    --hash sha256 \
    --iter-time 5000 \
    --use-random

# –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
cryptsetup open "$DEVICE" "$MAPPER_NAME" --key-file "$SECURE_BOOT_DIR/luks.key"

echo "LUKS –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–∫—Ä—ã—Ç –∫–∞–∫ /dev/mapper/$MAPPER_NAME"
LUKS_EOF

    chmod +x "$SCRIPTS_DIR/setup-luks.sh"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Raspberry Pi Secure Boot"

    create_secure_boot_infrastructure
    configure_otp_memory
    prepare_secure_bootloader
    setup_encrypted_filesystem

    echo "Secure boot –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ö–ª—é—á–∏ –∏ —Å–∫—Ä–∏–ø—Ç—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ $SECURE_BOOT_DIR"
    echo "–í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∫–ª—é—á–µ–π –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!"
}

main "$@"
```

#### –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è secure boot –≤ —Å–ª–æ–π rpi-image-gen:
```yaml
# METABEGIN
# X-Env-Layer-Name: raspberrypi-secure-boot
# X-Env-Layer-Category: extension
# X-Env-Layer-Description: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è secure boot –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Raspberry Pi
# X-Env-Layer-Version: 1.0.0
# X-Env-Layer-Requires: essential,bootloader
# X-Env-VarPrefix: secureboot
#
# X-Env-Var-secureboot_enable: false
# X-Env-Var-secureboot_enable-Description: –í–∫–ª—é—á–∏—Ç—å secure boot
# X-Env-Var-secureboot_enable-Required: false
# X-Env-Var-secureboot_enable-Valid: true,false
#
# X-Env-Var-secureboot_encryption: false
# X-Env-Var-secureboot_encryption-Description: –í–∫–ª—é—á–∏—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
# X-Env-Var-secureboot_encryption-Required: false
# X-Env-Var-secureboot_encryption-Valid: true,false
#
# X-Env-Var-secureboot_key_size: 2048
# X-Env-Var-secureboot_key_size-Description: –†–∞–∑–º–µ—Ä –∫–ª—é—á–µ–π RSA
# X-Env-Var-secureboot_key_size-Required: false
# X-Env-Var-secureboot_key_size-Valid: 2048,3072,4096
# METAEND
---
mmdebstrap:
  packages:
    - openssl
    - cryptsetup
    - cryptsetup-initramfs
    - secure-boot-tools
    - raspberrypi-sb-provisioner
  customize-hooks:
    - |
      # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ secure boot –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
      setup_secure_boot() {
          echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Raspberry Pi secure boot"

          # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è secure boot
          SECURE_BOOT_DIR="/opt/rpi-secure-boot"
          mkdir -p "$SECURE_BOOT_DIR"/{keys,certs,scripts}

          # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–ª—é—á–µ–π
          generate_secure_boot_keys() {
              echo "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π secure boot"

              # –ö–æ—Ä–Ω–µ–≤–æ–π –∫–ª—é—á –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
              openssl genrsa -out "$SECURE_BOOT_DIR/keys/root.key" "${IGconf_secureboot_secureboot_key_size:-2048}"
              openssl req -new -x509 -key "$SECURE_BOOT_DIR/keys/root.key" \
                  -out "$SECURE_BOOT_DIR/certs/root.crt" \
                  -subj "/C=GB/ST=Cambridge/L=Cambridge/O=Raspberry Pi/OU=Secure Boot/CN=Root CA" \
                  -days 3650

              # –ö–ª—é—á –¥–ª—è bootloader
              openssl genrsa -out "$SECURE_BOOT_DIR/keys/bootloader.key" "${IGconf_secureboot_secureboot_key_size:-2048}"
              openssl req -new -key "$SECURE_BOOT_DIR/keys/bootloader.key" \
                  -out "$SECURE_BOOT_DIR/certs/bootloader.csr" \
                  -subj "/C=GB/ST=Cambridge/L=Cambridge/O=Raspberry Pi/OU=Secure Boot/CN=Bootloader"
              openssl x509 -req -in "$SECURE_BOOT_DIR/certs/bootloader.csr" \
                  -CA "$SECURE_BOOT_DIR/certs/root.crt" \
                  -CAkey "$SECURE_BOOT_DIR/keys/root.key" \
                  -CAcreateserial -out "$SECURE_BOOT_DIR/certs/bootloader.crt" \
                  -days 3650

              # –ö–ª—é—á –¥–ª—è OS
              openssl genrsa -out "$SECURE_BOOT_DIR/keys/os.key" "${IGconf_secureboot_secureboot_key_size:-2048}"
              openssl req -new -key "$SECURE_BOOT_DIR/keys/os.key" \
                  -out "$SECURE_BOOT_DIR/certs/os.csr" \
                  -subj "/C=GB/ST=Cambridge/L=Cambridge/O=Raspberry Pi/OU=Secure Boot/CN=Operating System"
              openssl x509 -req -in "$SECURE_BOOT_DIR/certs/os.csr" \
                  -CA "$SECURE_BOOT_DIR/certs/root.crt" \
                  -CAkey "$SECURE_BOOT_DIR/keys/os.key" \
                  -CAcreateserial -out "$SECURE_BOOT_DIR/certs/os.crt" \
                  -days 3650
          }

          # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
          setup_disk_encryption() {
              if [ "${IGconf_secureboot_secureboot_encryption:-false}" = "true" ]; then
                  echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞"

                  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
                  mkdir -p /etc/keys
                  dd if=/dev/urandom of=/etc/keys/rootfs.key bs=1 count=32

                  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ initramfs –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
                  echo "cryptsetup" >> /etc/initramfs-tools/modules
                  echo "dm-crypt" >> /etc/initramfs-tools/modules

                  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ initramfs
                  update-initramfs -u
              fi
          }

          # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ secure boot –≤ config.txt
          configure_secure_boot() {
              if [ "${IGconf_secureboot_secureboot_enable:-false}" = "true" ]; then
                  echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ secure boot –≤ config.txt"

                  cat >> /boot/firmware/config.txt << EOF

# Secure Boot Configuration
# Generated by rpi-image-gen secure boot extension
secure_boot=1
secure_boot_key_path=/opt/rpi-secure-boot/certs/root.crt
EOF
              fi
          }

          # –°–æ–∑–¥–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          create_management_scripts() {
              # –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è secure boot
              cat > /usr/local/bin/check-secure-boot-status.sh << 'STATUS_EOF'
#!/bin/bash
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è secure boot

SECURE_BOOT_DIR="/opt/rpi-secure-boot"

echo "=== –°–æ—Å—Ç–æ—è–Ω–∏–µ Secure Boot ==="

if [ -d "$SECURE_BOOT_DIR" ]; then
    echo "‚úì –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è secure boot —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"

    if [ -f "$SECURE_BOOT_DIR/certs/root.crt" ]; then
        echo "‚úì –ö–æ—Ä–Ω–µ–≤–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω"
        openssl x509 -in "$SECURE_BOOT_DIR/certs/root.crt" -text -noout | grep -E "(Subject|Not Before|Not After)" | head -3
    else
        echo "‚úó –ö–æ—Ä–Ω–µ–≤–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi

    if [ -f "$SECURE_BOOT_DIR/certs/bootloader.crt" ]; then
        echo "‚úì –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç bootloader –Ω–∞–π–¥–µ–Ω"
    else
        echo "‚úó –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç bootloader –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi

    if [ -f "$SECURE_BOOT_DIR/certs/os.crt" ]; then
        echo "‚úì –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç OS –Ω–∞–π–¥–µ–Ω"
    else
        echo "‚úó –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç OS –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
else
    echo "‚úó –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è secure boot –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
fi

echo -e "\n=== –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ ==="
if [ -f /etc/keys/rootfs.key ]; then
    echo "‚úì –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω"
else
    echo "‚úó –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

echo -e "\n=== OTP –ü–∞–º—è—Ç—å ==="
if command -v rpi-otp >/dev/null 2>&1; then
    echo "‚úì –£—Ç–∏–ª–∏—Ç–∞ rpi-otp –¥–æ—Å—Ç—É–ø–Ω–∞"
    rpi-otp -r 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å OTP"
else
    echo "‚úó –£—Ç–∏–ª–∏—Ç–∞ rpi-otp –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
fi
STATUS_EOF

              # –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è secure boot
              cat > /usr/local/bin/update-secure-boot.sh << 'UPDATE_EOF'
#!/bin/bash
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ secure boot

set -euo pipefail

SECURE_BOOT_DIR="/opt/rpi-secure-boot"
LOG_FILE="/var/log/secure-boot-update.log"

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') $*" | tee -a "$LOG_FILE"
}

update_secure_boot() {
    log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ secure boot –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"

    # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∫–ª—é—á–µ–π
    if [ -d "$SECURE_BOOT_DIR" ]; then
        backup_dir="/tmp/secure-boot-backup-$(date +%Y%m%d-%H%M%S)"
        cp -r "$SECURE_BOOT_DIR" "$backup_dir"
        log "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $backup_dir"
    fi

    # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (–µ—Å–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫)
    if openssl x509 -checkend 86400 -in "$SECURE_BOOT_DIR/certs/root.crt" 2>/dev/null; then
        log "–ö–æ—Ä–Ω–µ–≤–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
        # –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    else
        log "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤ –ø–æ—Ä—è–¥–∫–µ"
    fi

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ bootloader –ø–æ–¥–ø–∏—Å–µ–π
    if [ -d /boot/firmware ]; then
        log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π bootloader"
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ bootloader
    fi

    log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ secure boot –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

update_secure_boot
UPDATE_EOF

              chmod +x /usr/local/bin/check-secure-boot-status.sh
              chmod +x /usr/local/bin/update-secure-boot.sh
          }

          # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
          if [ "${IGconf_secureboot_secureboot_enable:-false}" = "true" ]; then
              generate_secure_boot_keys
              configure_secure_boot
              create_management_scripts
          fi

          if [ "${IGconf_secureboot_secureboot_encryption:-false}" = "true" ]; then
              setup_disk_encryption
          fi

          echo "Secure boot –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
      }

      setup_secure_boot
```

#### –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:
```bash
#!/bin/bash
# security-audit.sh

# –ê—É–¥–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Raspberry Pi

check_secure_boot_status() {
    echo "=== Secure Boot Status ==="

    if [ -f /boot/firmware/config.txt ] && grep -q "secure_boot=1" /boot/firmware/config.txt; then
        echo "‚úì Secure boot –≤–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    else
        echo "‚úó Secure boot –Ω–µ –≤–∫–ª—é—á–µ–Ω"
    fi

    if [ -d /opt/rpi-secure-boot ]; then
        echo "‚úì –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è secure boot —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        ls -la /opt/rpi-secure-boot/certs/ | grep -E "\.(crt|key)$" | wc -l
        echo "—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤/–∫–ª—é—á–µ–π –Ω–∞–π–¥–µ–Ω–æ"
    else
        echo "‚úó –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è secure boot –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

check_encryption_status() {
    echo "=== Encryption Status ==="

    if [ -f /etc/keys/rootfs.key ]; then
        echo "‚úì –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è rootfs –Ω–∞–π–¥–µ–Ω"
    else
        echo "‚úó –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è rootfs –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi

    if grep -q "cryptsetup" /etc/initramfs-tools/modules; then
        echo "‚úì –ú–æ–¥—É–ª–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ initramfs"
    else
        echo "‚úó –ú–æ–¥—É–ª–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ initramfs"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    encrypted_mounts=$(mount | grep -c "type crypt" || echo "0")
    echo "–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ: $encrypted_mounts"
}

check_security_hardening() {
    echo "=== Security Hardening ==="

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª—é—á–∞–º
    if [ -f /etc/keys/rootfs.key ]; then
        perms=$(stat -c %a /etc/keys/rootfs.key)
        if [ "$perms" = "600" ]; then
            echo "‚úì –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª—é—á—É —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"
        else
            echo "‚úó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª—é—á—É —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: $perms"
        fi
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è security tools
    security_tools=("openssl" "cryptsetup" "rpi-otp")
    for tool in "${security_tools[@]}"; do
        if command -v "$tool" >/dev/null 2>&1; then
            echo "‚úì $tool —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        else
            echo "‚úó $tool –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        fi
    done
}

check_audit_logs() {
    echo "=== Security Audit Logs ==="

    log_files=("/var/log/secure-boot-update.log" "/var/log/auth.log")

    for log_file in "${log_files[@]}"; do
        if [ -f "$log_file" ]; then
            echo "‚úì –õ–æ–≥ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $log_file"
            echo "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:"
            tail -3 "$log_file" 2>/dev/null | head -2 || echo "  (–ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
        else
            echo "‚úó –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $log_file"
        fi
    done
}

main() {
    check_secure_boot_status
    echo ""
    check_encryption_status
    echo ""
    check_security_hardening
    echo ""
    check_audit_logs
}

main "$@"
```

---

## –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
- [ ] –ü—Ä–∞–≤–∏–ª–æ –∏–∑—É—á–µ–Ω–æ –∏ –ø–æ–Ω—è—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- [ ] –°–æ–±–ª—é–¥–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤ CI/CD
- [ ] –ù–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –º–µ—Ä–¥–∂–∞
- [ ] –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞
- [ ] –†–µ–≥—É–ª—è—Ä–Ω—ã–π –∞—É–¥–∏—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞

### –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
- [ ] 100% —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –≤ –Ω–æ–≤–æ–º –∫–æ–¥–µ
- [ ] –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–µ—Ç–∫–∞—Ö
- [ ] –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏—è
- [ ] –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- [ ] –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫ –ø—Ä–∞–≤–∏–ª–∞

### –ò—Å—Ç–æ—á–Ω–∏–∫
–°–æ–∑–¥–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: https://github.com/raspberrypi/rpi-sb-provisioner