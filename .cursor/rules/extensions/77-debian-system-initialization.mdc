---
alwaysApply: ${cursor.file.content.includes("init") || cursor.file.content.includes("systemd")}
---


# –ü—Ä–∞–≤–∏–ª–æ 77: –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Debian

## –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã Debian GNU/Linux, –≤–∫–ª—é—á–∞—è systemd –∏ —Ä–∞–Ω–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏, –∏—Å–∫–ª—é—á–∞—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è Raspberry Pi –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.

## –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

## –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Debian

### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ systemd

#### –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è systemd –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö ARM64 —Å–∏—Å—Ç–µ–º:
```bash
#!/bin/bash
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ systemd –≤ Debian

systemd_optimization() {
    echo "=== –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è systemd –¥–ª—è Debian ARM64 ==="

    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ systemd
    configure_systemd_main() {
        echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ systemd..."

        mkdir -p /etc/systemd/system.conf.d

        cat > /etc/systemd/system.conf.d/10-arm64-performance.conf << EOF
# Performance optimizations for ARM64
[Manager]
DefaultTimeoutStartSec=30s
DefaultTimeoutStopSec=30s
DefaultRestartSec=5s
DefaultStartLimitIntervalSec=10s
DefaultStartLimitBurst=5

# Limit resources for services
DefaultLimitNOFILE=65536
DefaultLimitNPROC=4096

# Journal settings
LogLevel=info
LogTarget=journal-or-kmsg
EOF

        echo "‚úì –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã systemd –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    }

    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è journald
    configure_journald() {
        echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ journald..."

        mkdir -p /etc/systemd/journald.conf.d

        cat > /etc/systemd/journald.conf.d/10-arm64-journal.conf << EOF
# Journal configuration for ARM64
[Journal]
Storage=persistent
Compress=yes
Seal=yes
SplitMode=uid
SyncIntervalSec=5m
RateLimitInterval=30s
RateLimitBurst=1000
MaxRetentionSec=7day
MaxFileSec=1day
ForwardToSyslog=no
ForwardToKMsg=no
ForwardToConsole=no
EOF

        systemctl restart systemd-journald
        echo "‚úì Journald –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω"
    }

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤
    configure_timers() {
        echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤..."

        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤
        cat > /etc/systemd/system/apt-daily.timer << EOF
[Unit]
Description=Daily apt download activities
After=network-online.target
Wants=network-online.target

[Timer]
OnCalendar=daily
RandomizedDelaySec=12h
Persistent=true

[Install]
WantedBy=timers.target
EOF

        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        cat > /etc/systemd/system/system-cleanup.timer << EOF
[Unit]
Description=Weekly system cleanup
After=apt-daily.service

[Timer]
OnCalendar=weekly
Persistent=true

[Install]
WantedBy=timers.target
EOF

        systemctl daemon-reload
        systemctl enable apt-daily.timer
        systemctl enable system-cleanup.timer

        echo "‚úì –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    }

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–ª—É–∂–±
    create_custom_services() {
        echo "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–ª—É–∂–±..."

        # –°–ª—É–∂–±–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã
        cat > /etc/systemd/system/system-monitor.service << EOF
[Unit]
Description=System monitoring service
After=network.target
Wants=network.target

[Service]
Type=simple
ExecStart=/usr/local/bin/system-monitor.sh
Restart=always
RestartSec=30
User=root
Group=root

[Install]
WantedBy=multi-user.target
EOF

        # –°–ª—É–∂–±–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        cat > /etc/systemd/system/backup.service << EOF
[Unit]
Description=Automated backup service
After=network.target
Wants=network.target

[Service]
Type=oneshot
ExecStart=/usr/local/bin/backup.sh
User=root
Group=root

[Install]
WantedBy=multi-user.target
EOF

        # –¢–∞–π–º–µ—Ä –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        cat > /etc/systemd/system/backup.timer << EOF
[Unit]
Description=Daily backup timer

[Timer]
OnCalendar=daily
Persistent=true

[Install]
WantedBy=timers.target
EOF

        systemctl daemon-reload

        echo "‚úì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–ª—É–∂–±—ã —Å–æ–∑–¥–∞–Ω—ã"
    }

    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
    case "$1" in
        "main")
            configure_systemd_main
            ;;
        "journald")
            configure_journald
            ;;
        "timers")
            configure_timers
            ;;
        "services")
            create_custom_services
            ;;
        "all")
            configure_systemd_main
            echo ""
            configure_journald
            echo ""
            configure_timers
            echo ""
            create_custom_services
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <main|journald|timers|services|all>"
            exit 1
            ;;
    esac
}

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É–∂–±–∞–º–∏
service_management() {
    echo "=== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É–∂–±–∞–º–∏ systemd ==="

    # –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–ª—É–∂–±
    analyze_services() {
        echo "–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–ª—É–∂–±..."

        echo "–ù–µ—É–¥–∞—á–Ω—ã–µ —Å–ª—É–∂–±—ã:"
        systemctl --failed --no-pager | grep -v "UNIT\|LOAD" | while read -r unit status; do
            echo "  ‚úó $unit: $status"
        done

        echo -e "\n–°–ª—É–∂–±—ã —Å –æ—à–∏–±–∫–∞–º–∏:"
        journalctl -p err --since "1 hour ago" --no-pager | grep -i "systemd" | head -5

        echo -e "\n–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã:"
        systemctl list-units --type=service --state=loaded --no-pager | wc -l | {
            read count
            echo "  –í—Å–µ–≥–æ: $count —Å–ª—É–∂–±"
        }
    }

    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏
    optimize_autostart() {
        echo "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª—É–∂–±..."

        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Å–ª—É–∂–±
        unnecessary_services=(
            "bluetooth.service"
            "cups.service"
            "avahi-daemon.service"
            "ModemManager.service"
        )

        for service in "${unnecessary_services[@]}"; do
            if systemctl is-enabled "$service" >/dev/null 2>&1; then
                echo "–û—Ç–∫–ª—é—á–µ–Ω–∏–µ $service..."
                systemctl disable "$service" 2>/dev/null || true
            fi
        done

        # –í–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–ª—É–∂–±
        essential_services=(
            "sshd.service"
            "systemd-networkd.service"
            "systemd-resolved.service"
            "cron.service"
        )

        for service in "${essential_services[@]}"; do
            if ! systemctl is-enabled "$service" >/dev/null 2>&1; then
                echo "–í–∫–ª—é—á–µ–Ω–∏–µ $service..."
                systemctl enable "$service" 2>/dev/null || true
            fi
        done

        echo "‚úì –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
    }

    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª—É–∂–±
    monitor_services() {
        echo "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª—É–∂–± –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏..."

        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª—É–∂–±
        key_services=(
            "systemd-networkd"
            "systemd-resolved"
            "sshd"
            "cron"
            "rsyslog"
        )

        echo "–°—Ç–∞—Ç—É—Å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª—É–∂–±:"
        for service in "${key_services[@]}"; do
            status=$(systemctl is-active "$service" 2>/dev/null || echo "unknown")
            enabled=$(systemctl is-enabled "$service" 2>/dev/null || echo "unknown")
            echo "  $service: $status ($enabled)"
        done

        # –ü–∞–º—è—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Å–ª—É–∂–±–∞–º–∏
        echo -e "\n–ü–∞–º—è—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Å–ª—É–∂–±–∞–º–∏:"
        ps aux --sort=-%mem | head -10 | awk '{print "  " $4 "%\t" $11}'
    }

    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
    case "$1" in
        "analyze")
            analyze_services
            ;;
        "optimize")
            optimize_autostart
            ;;
        "monitor")
            monitor_services
            ;;
        "all")
            analyze_services
            echo ""
            optimize_autostart
            echo ""
            monitor_services
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <analyze|optimize|monitor|all>"
            exit 1
            ;;
    esac
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–Ω–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
early_boot_configuration() {
    echo "=== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–Ω–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ ==="

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ initramfs
    configure_initramfs() {
        echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ initramfs..."

        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π –≤ initramfs
        cat > /etc/initramfs-tools/modules << EOF
# ARM64 specific modules for initramfs
ext4
btrfs
xfs
squashfs
overlay
virtio_blk
virtio_net
virtio_pci
EOF

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ initramfs-tools
        cat > /etc/initramfs-tools/initramfs.conf << EOF
MODULES=most
BUSYBOX=y
KEYMAP=n
COMPRESS=gzip
DEVICE=
NFSROOT=auto
EOF

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ initramfs
        update-initramfs -u

        echo "‚úì Initramfs –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    }

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ tmpfiles
    configure_tmpfiles() {
        echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."

        cat > /etc/tmpfiles.d/debian-arm64.conf << EOF
# Temporary files configuration for ARM64
d /run/user 0755 root root -
d /tmp 1777 root root -
d /var/tmp 1777 root root -
d /var/cache 0755 root root -
d /var/log 0755 root root -

# Clean up old files
r! /tmp/*
r! /var/tmp/*
EOF

        systemd-tmpfiles --create

        echo "‚úì –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    }

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ udev
    configure_udev() {
        echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ udev..."

        # –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è ARM64 —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        cat > /etc/udev/rules.d/99-arm64-devices.rules << EOF
# ARM64 device rules
SUBSYSTEM=="block", KERNEL=="sd*", ATTR{queue/scheduler}="deadline"
SUBSYSTEM=="block", KERNEL=="nvme*", ATTR{queue/scheduler}="none"

# Network devices
SUBSYSTEM=="net", KERNEL=="eth*", ATTR{tx_queue_len}="1000"
SUBSYSTEM=="net", KERNEL=="wlan*", ATTR{tx_queue_len}="2000"
EOF

        udevadm control --reload-rules
        udevadm trigger

        echo "‚úì Udev –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    }

    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
    case "$1" in
        "initramfs")
            configure_initramfs
            ;;
        "tmpfiles")
            configure_tmpfiles
            ;;
        "udev")
            configure_udev
            ;;
        "all")
            configure_initramfs
            echo ""
            configure_tmpfiles
            echo ""
            configure_udev
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <initramfs|tmpfiles|udev|all>"
            exit 1
            ;;
    esac
}

main() {
    case "$1" in
        "systemd")
            shift
            systemd_optimization "$@"
            ;;
        "service")
            shift
            service_management "$@"
            ;;
        "early")
            shift
            early_boot_configuration "$@"
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <systemd|service|early> [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]"
            exit 1
            ;;
    esac
}

main "$@"
```

### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–æ–π

#### –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GRUB –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤:
```bash
#!/bin/bash
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–æ–π –≤ Debian

bootloader_management() {
    echo "=== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–º Debian ARM64 ==="

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GRUB
    configure_grub() {
        echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ GRUB..."

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ GRUB –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        cat > /etc/default/grub << EOF
# GRUB configuration for ARM64
GRUB_DEFAULT=0
GRUB_TIMEOUT=5
GRUB_DISTRIBUTOR=`lsb_release -i -s 2> /dev/null || echo Debian`
GRUB_CMDLINE_LINUX_DEFAULT="quiet"
GRUB_CMDLINE_LINUX=""

# ARM64 specific options
GRUB_TERMINAL=console
GRUB_GFXMODE=auto
GRUB_DISABLE_OS_PROBER=true
EOF

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ GRUB
        update-grub

        echo "‚úì GRUB –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    }

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ systemd-boot (–¥–ª—è EFI —Å–∏—Å—Ç–µ–º)
    configure_systemd_boot() {
        echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ systemd-boot..."

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ EFI
        if [ ! -d /sys/firmware/efi ]; then
            echo "–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ EFI —Ä–µ–∂–∏–º–µ"
            return 1
        fi

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ systemd-boot
        apt-get install -y systemd-boot-efi

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
        bootctl install

        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–æ—á–Ω–æ–π –∑–∞–ø–∏—Å–∏
        cat > /boot/loader/entries/debian.conf << EOF
title Debian GNU/Linux
linux /vmlinuz
initrd /initrd.img
options root=UUID=$(blkid -s UUID -o value $(df / | tail -1 | awk '{print $1}')) rw quiet
EOF

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
        bootctl update

        echo "‚úì systemd-boot –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    }

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ U-Boot (–¥–ª—è embedded —Å–∏—Å—Ç–µ–º)
    configure_uboot() {
        echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ U-Boot..."

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ U-Boot tools
        apt-get install -y u-boot-tools

        # –°–æ–∑–¥–∞–Ω–∏–µ boot.scr
        cat > /boot/boot.cmd << EOF
# U-Boot boot script for ARM64
setenv bootargs console=ttyAMA0,115200 root=/dev/mmcblk0p2 rw rootwait
load mmc 0:1 \${kernel_addr_r} vmlinuz
load mmc 0:1 \${ramdisk_addr_r} initrd.img
booti \${kernel_addr_r} \${ramdisk_addr_r}:\${filesize} \${fdt_addr_r}
EOF

        # –ö–æ–º–ø–∏–ª—è—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞
        mkimage -C none -A arm64 -T script -d /boot/boot.cmd /boot/boot.scr

        echo "‚úì U-Boot –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    }

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏
    manage_boot_entries() {
        echo "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏..."

        case "$1" in
            "list")
                echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ –∑–∞–ø–∏—Å–∏:"
                if command -v bootctl >/dev/null 2>&1; then
                    bootctl list
                elif [ -d /boot/grub ]; then
                    grep "^menuentry" /boot/grub/grub.cfg | sed 's/menuentry //' | sed 's/ {//'
                else
                    echo "–ó–∞–≥—Ä—É–∑—á–∏–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
                fi
                ;;
            "set-default")
                local entry="$2"
                echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $entry"

                if command -v bootctl >/dev/null 2>&1; then
                    bootctl set-default "$entry"
                elif [ -f /etc/default/grub ]; then
                    sed -i "s/GRUB_DEFAULT=.*/GRUB_DEFAULT=\"$entry\"/" /etc/default/grub
                    update-grub
                fi
                ;;
            *)
                echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: manage_boot_entries <list|set-default> [entry]"
                ;;
        esac
    }

    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
    case "$1" in
        "grub")
            configure_grub
            ;;
        "systemd-boot")
            configure_systemd_boot
            ;;
        "uboot")
            configure_uboot
            ;;
        "entries")
            shift
            manage_boot_entries "$@"
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <grub|systemd-boot|uboot|entries> [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]"
            exit 1
            ;;
    esac
}

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≥—Ä—É–∑–∫–∏
boot_monitoring() {
    echo "=== –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã ==="

    # –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
    analyze_boot_time() {
        echo "–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏..."

        # systemd-analyze
        if command -v systemd-analyze >/dev/null 2>&1; then
            echo "–û–±—â–µ–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏:"
            systemd-analyze | head -1

            echo -e "\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å:"
            systemd-analyze critical-chain | head -5

            echo -e "\n–í—Ä–µ–º—è –ø–æ —Å–ª—É–∂–±–∞–º:"
            systemd-analyze blame | head -10
        else
            echo "systemd-analyze –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
        fi
    }

    # –õ–æ–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    analyze_boot_logs() {
        echo "–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏..."

        echo "–°–æ–æ–±—â–µ–Ω–∏—è —è–¥—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:"
        journalctl -b -k | head -20

        echo -e "\n–û—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:"
        journalctl -b -p err | head -10

        echo -e "\n–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:"
        journalctl -b -p warning | head -10
    }

    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    optimize_boot() {
        echo "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏..."

        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Å–ª—É–∂–±
        slow_services=$(systemctl list-units --type=service --state=running --no-pager | \
                       grep -E "(bluetooth|cups|avahi|modem)" | awk '{print $1}')

        for service in $slow_services; do
            echo "–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –º–µ–¥–ª–µ–Ω–Ω–æ–π —Å–ª—É–∂–±—ã: $service"
            systemctl disable "$service" 2>/dev/null || true
        done

        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è fsck
        if [ -f /etc/systemd/system/systemd-fsck-root.service.d/override.conf ]; then
            mkdir -p /etc/systemd/system/systemd-fsck-root.service.d
            cat > /etc/systemd/system/systemd-fsck-root.service.d/override.conf << EOF
[Service]
StandardOutput=null
EOF
        fi

        systemctl daemon-reload

        echo "‚úì –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
    }

    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
    case "$1" in
        "time")
            analyze_boot_time
            ;;
        "logs")
            analyze_boot_logs
            ;;
        "optimize")
            optimize_boot
            ;;
        "all")
            analyze_boot_time
            echo ""
            analyze_boot_logs
            echo ""
            optimize_boot
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <time|logs|optimize|all>"
            exit 1
            ;;
    esac
}

main() {
    case "$1" in
        "bootloader")
            shift
            bootloader_management "$@"
            ;;
        "monitor")
            shift
            boot_monitoring "$@"
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <bootloader|monitor> [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]"
            exit 1
            ;;
    esac
}

main "$@"
```

---

## –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
- [ ] –ü—Ä–∞–≤–∏–ª–æ –∏–∑—É—á–µ–Ω–æ –∏ –ø–æ–Ω—è—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- [ ] –°–æ–±–ª—é–¥–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤ CI/CD
- [ ] –ù–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –º–µ—Ä–¥–∂–∞
- [ ] –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞
- [ ] –†–µ–≥—É–ª—è—Ä–Ω—ã–π –∞—É–¥–∏—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞

### –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
- [ ] 100% —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –≤ –Ω–æ–≤–æ–º –∫–æ–¥–µ
- [ ] –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–µ—Ç–∫–∞—Ö
- [ ] –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏—è
- [ ] –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- [ ] –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫ –ø—Ä–∞–≤–∏–ª–∞

### –ò—Å—Ç–æ—á–Ω–∏–∫
–°–æ–∑–¥–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–¥–µ–ª–∞ Debian system initialization