---
alwaysApply: ${cursor.file.content && (cursor.file.content.includes("tryboot") || cursor.file.content.includes("ab-boot") || cursor.file.content.includes("BOOT_ORDER"))}
---

# –ü—Ä–∞–≤–∏–ª–æ 79: A/B Boot —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ rpi-image-gen

## –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ A/B (Atomic) –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ rpi-image-gen.

## –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

## –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ A/B —Å–∏—Å—Ç–µ–º—ã

### –ü—Ä–∏–Ω—Ü–∏–ø—ã A/B –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
- **–ê—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç—å**: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–±–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É—Å–ø–µ—à–Ω–æ, –ª–∏–±–æ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç—Å—è
- **–ò–∑–æ–ª—è—Ü–∏—è**: –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Ç–µ–∫—É—â—É—é —Ä–∞–±–æ—Ç–∞—é—â—É—é —Å–∏—Å—Ç–µ–º—É
- **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å**: –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫–∞—Ç–∞ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
- **–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å**: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–±–æ—è—Ö

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–∑–¥–µ–ª–æ–≤
```bash
# –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ö–µ–º–∞ —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–ª—è A/B
# /dev/mmcblk0p1 - boot (FAT32, ~256MB) - –æ–±—â–∏–π –¥–ª—è –æ–±–æ–∏—Ö —Å–ª–æ—Ç–æ–≤
# /dev/mmcblk0p2 - root-a (ext4, –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–∑–º–µ—Ä) - —Å–ª–æ—Ç A
# /dev/mmcblk0p3 - root-b (ext4, –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–∑–º–µ—Ä) - —Å–ª–æ—Ç B
# /dev/mmcblk0p4 - data (ext4, –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ) - –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞–∑–¥–µ–ª–æ–≤
verify_ab_layout() {
    local boot_part="/dev/mmcblk0p1"
    local root_a="/dev/mmcblk0p2"
    local root_b="/dev/mmcblk0p3"
    local data_part="/dev/mmcblk0p4"

    if [[ ! -b "$boot_part" || ! -b "$root_a" || ! -b "$root_b" ]]; then
        die "A/B partition layout not found"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ GPT labels
    local label_a=$(blkid -s LABEL -o value "$root_a")
    local label_b=$(blkid -s LABEL -o value "$root_b")

    if [[ "$label_a" != "root-a" || "$label_b" != "root-b" ]]; then
        die "Incorrect GPT labels for A/B partitions"
    fi
}
```

## –ù–∞—Å—Ç—Ä–æ–π–∫–∞ EEPROM –∏ Bootloader

### –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Raspberry Pi EEPROM
```yaml
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ EEPROM –¥–ª—è A/B boot
customize-hooks:
  - |
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ boot order –¥–ª—è A/B
    rpi-eeprom-config --edit << EOF
BOOT_ORDER=0xf21
TFTP_PREFIX=tryboot
BOOT_DELAY=0
TFTP_ENABLED=1
EOF

    # –°–æ–∑–¥–∞–Ω–∏–µ tryboot –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    cat > /boot/tryboot.txt << 'EOF'
[tryboot]
kernel=kernel8.img
initramfs initrd.img followkernel
dtparam=i2c_arm=on
dtparam=spi=on
avoid_warnings=1
EOF
```

### –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Å–ª–æ—Ç–æ–≤
```bash
# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–æ–≤
select_boot_slot() {
    local current_order=$(rpi-eeprom-config | grep BOOT_ORDER | cut -d= -f2)
    local target_slot=""

    case "$current_order" in
        "0xf21")  # –¢–µ–∫—É—â–∏–π: —Å–ª–æ—Ç A, —Å–ª–µ–¥—É—é—â–∏–π: —Å–ª–æ—Ç B
            target_slot="0xf12"
            echo "Switching to slot B (0xf12)"
            ;;
        "0xf12")  # –¢–µ–∫—É—â–∏–π: —Å–ª–æ—Ç B, —Å–ª–µ–¥—É—é—â–∏–π: —Å–ª–æ—Ç A
            target_slot="0xf21"
            echo "Switching to slot A (0xf21)"
            ;;
        *)
            echo "Unknown boot order: $current_order, defaulting to slot A"
            target_slot="0xf21"
            ;;
    esac

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ boot order
    rpi-eeprom-config --edit "BOOT_ORDER=$target_slot"
}
```

## –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π

### –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
```yaml
# METABEGIN
# X-Env-Layer-Name: ab-update-manager
# X-Env-Layer-Category: extension
# X-Env-Layer-Description: –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è A/B –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
# X-Env-Layer-Version: 1.0.0
# X-Env-Layer-Requires: essential
# X-Env-VarPrefix: ab_update
#
# X-Env-Var-auto_update: true
# X-Env-Var-auto_update-Description: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
# X-Env-Var-auto_update-Required: false
# X-Env-Var-auto_update-Valid: true,false
# X-Env-Var-update_interval: 24h
# X-Env-Var-update_interval-Description: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
# X-Env-Var-update_interval-Required: false
# X-Env-Var-update_interval-Valid: 1h,6h,12h,24h,7d
# METAEND
---
mmdebstrap:
  packages:
    - rpi-eeprom
    - curl
    - jq
    - systemd
  customize-hooks:
    - |
      # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      cat > /usr/local/bin/ab-update-manager.sh << 'EOF'
#!/bin/bash
set -euo pipefail

LOG_FILE="/var/log/ab-updates.log"
UPDATE_URL="${IGconf_ab_update_url:-https://api.example.com/updates}"
AUTO_UPDATE="${IGconf_ab_update_auto_update:-true}"

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S'): $*" >> "$LOG_FILE"
}

check_for_updates() {
    log "Checking for updates..."

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
    local update_info=$(curl -s "$UPDATE_URL/latest" || echo "{}")

    if [[ "$update_info" == "{}" ]]; then
        log "No update information available"
        return 1
    fi

    local new_version=$(echo "$update_info" | jq -r '.version // empty')
    local current_version=$(cat /etc/rpi-image-version 2>/dev/null || echo "unknown")

    if [[ "$new_version" != "$current_version" ]]; then
        log "New version available: $new_version (current: $current_version)"
        return 0
    else
        log "System is up to date"
        return 1
    fi
}

perform_update() {
    log "Starting A/B update process..."

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
    local inactive_slot=$(determine_inactive_slot)

    if [[ -z "$inactive_slot" ]]; then
        log "ERROR: Could not determine inactive slot"
        return 1
    fi

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if download_and_apply_update "$inactive_slot"; then
        log "Update applied successfully to slot $inactive_slot"

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if validate_update "$inactive_slot"; then
            log "Update validation passed"

            # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã–π —Å–ª–æ—Ç
            switch_to_slot "$inactive_slot"

            # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            log "System will reboot to new slot in 60 seconds..."
            sleep 60
            reboot
        else
            log "Update validation failed, keeping current slot"
            return 1
        fi
    else
        log "Update download/application failed"
        return 1
    fi
}

determine_inactive_slot() {
    local current_slot=$(rpi-eeprom-config | grep BOOT_ORDER | cut -d= -f2)

    case "$current_slot" in
        "0xf21") echo "b" ;;
        "0xf12") echo "a" ;;
        *) echo "" ;;
    esac
}

download_and_apply_update() {
    local slot="$1"
    local mount_point="/tmp/slot-${slot}"

    # –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
    mkdir -p "$mount_point"
    mount "/dev/mmcblk0p$([[ "$slot" == "a" ]] && echo "2" || echo "3")" "$mount_point"

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    # (–ª–æ–≥–∏–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)

    umount "$mount_point"
    rmdir "$mount_point"
}

validate_update() {
    local slot="$1"
    # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    local mount_point="/tmp/validate-${slot}"

    mkdir -p "$mount_point"
    mount "/dev/mmcblk0p$([[ "$slot" == "a" ]] && echo "2" || echo "3")" "$mount_point"

    local is_valid=true

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —è–¥—Ä–∞
    if [[ ! -f "$mount_point/boot/kernel8.img" ]]; then
        is_valid=false
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ systemd
    if [[ ! -f "$mount_point/usr/lib/systemd/systemd" ]]; then
        is_valid=false
    fi

    umount "$mount_point"
    rmdir "$mount_point"

    $is_valid
}

switch_to_slot() {
    local slot="$1"
    local boot_order=""

    case "$slot" in
        "a") boot_order="0xf21" ;;
        "b") boot_order="0xf12" ;;
    esac

    if [[ -n "$boot_order" ]]; then
        rpi-eeprom-config --edit "BOOT_ORDER=$boot_order"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    if [[ "$AUTO_UPDATE" == "true" ]]; then
        if check_for_updates; then
            perform_update
        fi
    fi
}

main "$@"
EOF

      chmod +x /usr/local/bin/ab-update-manager.sh

      # –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞
      cat > /etc/systemd/system/ab-update.service << EOF
[Unit]
Description=A/B Update Manager
After=network.target
ConditionACPower=true

[Service]
Type=oneshot
ExecStart=/usr/local/bin/ab-update-manager.sh
EOF

      cat > /etc/systemd/system/ab-update.timer << EOF
[Unit]
Description=Run A/B Update Manager daily
Requires=ab-update.service

[Timer]
OnCalendar=daily
Persistent=true

[Install]
WantedBy=timers.target
EOF

      systemctl enable ab-update.timer
```

### –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ

#### –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
```bash
# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è A/B —Å–∏—Å—Ç–µ–º—ã
monitor_ab_system() {
    local log_file="/var/log/ab-monitor.log"

    while true; do
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤
        check_slot_integrity "a" >> "$log_file"
        check_slot_integrity "b" >> "$log_file"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ boot order
        local boot_order=$(rpi-eeprom-config | grep BOOT_ORDER | cut -d= -f2)
        echo "$(date): Current boot order: $boot_order" >> "$log_file"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ–±–æ–∏—Ö —Å–ª–æ—Ç–æ–≤
        if ! verify_slot_accessibility; then
            echo "$(date): WARNING - Slot accessibility issue detected" >> "$log_file"
            attempt_recovery
        fi

        sleep 3600  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
    done
}

check_slot_integrity() {
    local slot="$1"
    local part_num=$([[ "$slot" == "a" ]] && echo "2" || echo "3")
    local mount_point="/tmp/check-${slot}"

    mkdir -p "$mount_point"

    if mount "/dev/mmcblk0p${part_num}" "$mount_point" 2>/dev/null; then
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        local critical_files=(
            "/bin/bash"
            "/usr/lib/systemd/systemd"
            "/boot/kernel8.img"
        )

        local integrity_ok=true
        for file in "${critical_files[@]}"; do
            if [[ ! -f "${mount_point}${file}" ]]; then
                integrity_ok=false
                break
            fi
        done

        umount "$mount_point"
        rmdir "$mount_point"

        if $integrity_ok; then
            echo "$(date): Slot $slot integrity OK"
        else
            echo "$(date): Slot $slot integrity FAILED"
        fi
    else
        echo "$(date): Slot $slot mount FAILED"
    fi
}

verify_slot_accessibility() {
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–æ–∏—Ö —Å–ª–æ—Ç–æ–≤
    local slots=("a" "b")

    for slot in "${slots[@]}"; do
        local part_num=$([[ "$slot" == "a" ]] && echo "2" || echo "3")
        local mount_point="/tmp/access-${slot}"

        mkdir -p "$mount_point"

        if ! mount "/dev/mmcblk0p${part_num}" "$mount_point" 2>/dev/null; then
            umount "$mount_point" 2>/dev/null || true
            rmdir "$mount_point" 2>/dev/null || true
            return 1
        fi

        umount "$mount_point"
        rmdir "$mount_point"
    done

    return 0
}

attempt_recovery() {
    echo "$(date): Attempting A/B system recovery..."

    # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ª–æ—Ç
    local current_order=$(rpi-eeprom-config | grep BOOT_ORDER | cut -d= -f2)
    local recovery_order=""

    case "$current_order" in
        "0xf21") recovery_order="0xf12" ;;
        "0xf12") recovery_order="0xf21" ;;
        *) recovery_order="0xf21" ;;  # Fallback –Ω–∞ —Å–ª–æ—Ç A
    esac

    echo "$(date): Switching to recovery slot with order: $recovery_order"
    rpi-eeprom-config --edit "BOOT_ORDER=$recovery_order"

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ recovery –¥–µ–π—Å—Ç–≤–∏—è
    echo "$(date): Recovery action taken - rebooting in 30 seconds..." >> /var/log/ab-recovery.log

    sleep 30
    reboot
}
```

### –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å rpi-sb-provisioner

#### –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å secure boot
```yaml
# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å secure boot provisioning
customize-hooks:
  - |
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ secure boot –¥–ª—è A/B
    if command -v rpi-sb-provisioner >/dev/null 2>&1; then
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–π –¥–ª—è secure boot
        rpi-sb-provisioner create-keys

        # –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ –¥–ª—è –æ–±–æ–∏—Ö —Å–ª–æ—Ç–æ–≤
        for slot in a b; do
            local part_num=$([[ "$slot" == "a" ]] && echo "2" || echo "3")
            rpi-sb-provisioner sign-image "/dev/mmcblk0p${part_num}"
        done

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ EEPROM –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–µ–π
        rpi-eeprom-config --edit << EOF
BOOT_ORDER=0xf21
SECURE_BOOT=1
TFTP_ENABLED=1
EOF
    fi
```

## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ A/B —Å–∏—Å—Ç–µ–º—ã

### –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
```bash
# –¢–µ—Å—Ç—ã A/B —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
test_ab_functionality() {
    local test_results="/var/log/ab-tests.log"

    echo "$(date): Starting A/B functionality tests" >> "$test_results"

    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤
    test_slot_switching >> "$test_results"

    # –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
    test_slot_integrity >> "$test_results"

    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    test_recovery_mechanism >> "$test_results"

    echo "$(date): A/B tests completed" >> "$test_results"
}

test_slot_switching() {
    echo "Testing slot switching..."

    local original_order=$(rpi-eeprom-config | grep BOOT_ORDER | cut -d= -f2)

    # –ò–º–∏—Ç–∞—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    select_boot_slot

    local new_order=$(rpi-eeprom-config | grep BOOT_ORDER | cut -d= -f2)

    if [[ "$new_order" != "$original_order" ]]; then
        echo "‚úì Slot switching works"
    else
        echo "‚úó Slot switching failed"
    fi

    # –í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
    rpi-eeprom-config --edit "BOOT_ORDER=$original_order"
}

test_slot_integrity() {
    echo "Testing slot integrity..."

    if check_slot_integrity "a" && check_slot_integrity "b"; then
        echo "‚úì Slot integrity check passed"
    else
        echo "‚úó Slot integrity check failed"
    fi
}

test_recovery_mechanism() {
    echo "Testing recovery mechanism..."

    # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–µ–∫—É—â–∏–º —Å–ª–æ—Ç–æ–º
    local original_order=$(rpi-eeprom-config | grep BOOT_ORDER | cut -d= -f2)

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    attempt_recovery

    local recovery_order=$(rpi-eeprom-config | grep BOOT_ORDER | cut -d= -f2)

    if [[ "$recovery_order" != "$original_order" ]]; then
        echo "‚úì Recovery mechanism works"
    else
        echo "‚úó Recovery mechanism failed"
    fi

    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    rpi-eeprom-config --edit "BOOT_ORDER=$original_order"
}
```

## –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π

### –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
```bash
# –ü—Ä–æ–±–ª–µ–º–∞: –°–∏—Å—Ç–µ–º–∞ –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –Ω–æ–≤—ã–π —Å–ª–æ—Ç
# –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å BOOT_ORDER –≤ EEPROM
rpi-eeprom-config | grep BOOT_ORDER

# –ü—Ä–æ–±–ª–µ–º–∞: –°–ª–æ—Ç –Ω–µ –º–æ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è
# –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–∞–∑–¥–µ–ª–æ–≤
lsblk -f
blkid

# –ü—Ä–æ–±–ª–µ–º–∞: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è
# –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
journalctl -u ab-update.service
tail -f /var/log/ab-updates.log

# –ü—Ä–æ–±–ª–µ–º–∞: –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
# –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞
check_slot_integrity "a"
check_slot_integrity "b"
```

### –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
```bash
# –†—É—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
manual_recovery() {
    echo "Starting manual A/B recovery..."

    # –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ —Å–ª–æ—Ç–∞
    mkdir -p /mnt/recovery
    mount /dev/mmcblk0p2 /mnt/recovery  # –∏–ª–∏ p3 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏

    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    cp -r /mnt/recovery/boot/* /boot/

    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ boot order
    rpi-eeprom-config --edit "BOOT_ORDER=0xf21"  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–ª–æ—Ç A

    umount /mnt/recovery
    rmdir /mnt/recovery

    echo "Manual recovery completed. Rebooting..."
    reboot
}
```

## –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
- [ ] –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–∑–¥–µ–ª–æ–≤ A/B
- [ ] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ EEPROM –¥–ª—è A/B boot
- [ ] –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
- [ ] –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
- [ ] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏

### –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
- [ ] –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤ (>99%)
- [ ] –í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (<5 –º–∏–Ω—É—Ç)
- [ ] –†–∞–∑–º–µ—Ä overhead (<10% –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞)
- [ ] –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å secure boot
- [ ] –ü—Ä–æ—Å—Ç–æ—Ç–∞ –æ—Ç–∫–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π

### –ò—Å—Ç–æ—á–Ω–∏–∫
–°–æ–∑–¥–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ A/B –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è embedded —Å–∏—Å—Ç–µ–º