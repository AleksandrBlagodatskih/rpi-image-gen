# METABEGIN
# X-Env-Layer-Name: ${extension_name}
# X-Env-Layer-Category: extension
# X-Env-Layer-Description: ${description}
# X-Env-Layer-Version: 1.0.0
# X-Env-Layer-Requires: essential,net-misc
# X-Env-VarPrefix: app
#
# X-Env-Var-app_name: ${app_name}
# X-Env-Var-app_name-Description: Название приложения для развертывания
# X-Env-Var-app_name-Required: true
# X-Env-Var-app_name-Valid: regex:^[a-zA-Z0-9_-]+$
#
# X-Env-Var-service_port: 8080
# X-Env-Var-service_port-Description: Порт для веб-сервиса приложения
# X-Env-Var-service_port-Required: false
# X-Env-Var-service_port-Valid: int:1024-65535
#
# X-Env-Var-install_path: /opt/${app_name}
# X-Env-Var-install_path-Description: Директория для установки приложения
# X-Env-Var-install_path-Required: false
# X-Env-Var-install_path-Valid: regex:^/opt/|^/usr/local/
#
# X-Env-Var-auto_start: true
# X-Env-Var-auto_start-Description: Автоматический запуск сервиса после установки
# X-Env-Var-auto_start-Required: false
# X-Env-Var-auto_start-Valid: true,false
# METAEND
---
mmdebstrap:
  # ============================================================================
  # ЗАВИСИМОСТИ И ПАКЕТЫ
  # ============================================================================

  packages:
    # Python runtime и инструменты
    - python3
    - python3-pip
    - python3-venv

    # Веб-сервер и проксирование
    - nginx

    # Сетевые утилиты
    - curl
    - wget

    # Инструменты разработки
    - git

    # Дополнительные пакеты приложения (опционально)
    ${app_packages:-}

  # ============================================================================
  # ХУКИ УСТАНОВКИ
  # ============================================================================

  setup-hooks:
    - |
      #!/bin/bash
      # Hook: Application Setup - Подготовка окружения для приложения
      set -euo pipefail

      # Function for error handling
      die() {
        echo "ERROR: $*" >&2
        exit 1
      }

      # Валидация переменных окружения
      app_name="${IGconf_app_app_name:?app_name not configured}"
      install_path="${IGconf_app_install_path:-/opt/$app_name}"

      echo "🔧 Подготовка установки приложения: $app_name"

      # Создание dedicated пользователя для приложения
      if ! id -u "$app_name" >/dev/null 2>&1; then
        useradd --system --shell /bin/false --home "$install_path" --create-home "$app_name" || \
          die "Failed to create application user: $app_name"
      fi

      # Создание необходимых директорий с правильными правами
      mkdir -p "$install_path" || die "Failed to create install directory: $install_path"
      mkdir -p "/var/log/$app_name" || die "Failed to create log directory"
      mkdir -p "/var/lib/$app_name" || die "Failed to create data directory"

      # Настройка прав доступа для безопасности
      chown -R "$app_name:$app_name" "$install_path" || die "Failed to set ownership for install path"
      chown -R "$app_name:$app_name" "/var/log/$app_name" || die "Failed to set ownership for log directory"
      chown -R "$app_name:$app_name" "/var/lib/$app_name" || die "Failed to set ownership for data directory"

      # Настройка ограничительных прав для директорий
      chmod 755 "$install_path" || die "Failed to set permissions for install path"
      chmod 750 "/var/log/$app_name" || die "Failed to set permissions for log directory"
      chmod 750 "/var/lib/$app_name" || die "Failed to set permissions for data directory"

      echo "✅ Подготовка окружения для $app_name завершена"

  customize-hooks:
    - |
      #!/bin/bash
      # Hook: Application Installation and Configuration
      set -euo pipefail

      # Function for error handling
      die() {
        echo "ERROR: $*" >&2
        exit 1
      }

      # Валидация и установка переменных окружения
      app_name="${IGconf_app_app_name:?app_name not configured}"
      service_port="${IGconf_app_service_port:-8080}"
      install_path="${IGconf_app_install_path:-/opt/$app_name}"
      auto_start="${IGconf_app_auto_start:-true}"

      # Валидация service_port
      if ! [[ "$service_port" =~ ^[0-9]+$ ]] || [[ "$service_port" -lt 1024 ]] || [[ "$service_port" -gt 65535 ]]; then
        die "service_port must be integer between 1024 and 65535"
      fi

      echo "🔧 Установка и настройка приложения: $app_name"

      # ============================================================================
      # PYTHON ENVIRONMENT SETUP
      # ============================================================================

      echo "🐍 Настройка Python окружения..."

      # Создание изолированного виртуального окружения
      python3 -m venv "$install_path/venv" || die "Failed to create Python virtual environment"
      # shellcheck source=/dev/null
      source "$install_path/venv/bin/activate" || die "Failed to activate virtual environment"

      # Обновление pip и установка зависимостей
      pip install --upgrade pip setuptools wheel || die "Failed to upgrade pip"
      pip install flask gunicorn psycopg2-binary || die "Failed to install Python dependencies"

      # ============================================================================
      # APPLICATION DEPLOYMENT
      # ============================================================================

      echo "📦 Развертывание приложения..."

      # Создание основного Flask приложения
      cat > "$install_path/app.py" << EOF
#!/usr/bin/env python3
"""
$app_name - Web Application
Generated by rpi-image-gen application extension template
"""

from flask import Flask, jsonify, request
import socket
import time
import logging
import os

# Настройка логирования
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

@app.route('/')
def hello():
    """Основная страница приложения"""
    return jsonify({
        'message': f'Hello from $app_name!',
        'hostname': socket.gethostname(),
        'timestamp': time.time(),
        'app': '$app_name',
        'version': '1.0.0'
    })

@app.route('/health')
def health():
    """Проверка здоровья приложения"""
    return jsonify({
        'status': 'healthy',
        'timestamp': time.time(),
        'uptime': time.time() - app.start_time if hasattr(app, 'start_time') else 0
    })

@app.route('/info')
def info():
    """Информация о системе"""
    return jsonify({
        'app': '$app_name',
        'python_version': os.sys.version,
        'platform': os.uname().sysname,
        'hostname': socket.gethostname(),
        'port': $service_port
    })

@app.errorhandler(404)
def not_found(error):
    """Обработка 404 ошибки"""
    return jsonify({'error': 'Not found', 'status_code': 404}), 404

@app.errorhandler(500)
def internal_error(error):
    """Обработка 500 ошибки"""
    logger.error(f"Internal server error: {error}")
    return jsonify({'error': 'Internal server error', 'status_code': 500}), 500

if __name__ == '__main__':
    app.start_time = time.time()
    logger.info(f"Starting $app_name on port $service_port")
    app.run(host='0.0.0.0', port=$service_port, debug=False)
EOF

      # Создание production-ready скрипта запуска
      cat > "$install_path/run.sh" << EOF
#!/bin/bash
# Production startup script for $app_name
# Generated by rpi-image-gen application extension template

set -euo pipefail

# Переход в директорию приложения
cd "$install_path"

# Активация виртуального окружения
source venv/bin/activate

# Настройка переменных окружения
export FLASK_ENV=production
export FLASK_APP=app.py

# Запуск через gunicorn с оптимизациями
exec gunicorn \\
  --bind "0.0.0.0:$service_port" \\
  --workers 2 \\
  --worker-class gthread \\
  --threads 4 \\
  --user "$app_name" \\
  --group "$app_name" \\
  --log-level info \\
  --access-logfile "/var/log/$app_name/access.log" \\
  --error-logfile "/var/log/$app_name/error.log" \\
  --capture-output \\
  --pid "/var/run/$app_name.pid" \\
  app:app
EOF
      chmod 755 "$install_path/run.sh" || die "Failed to set permissions on run script"

      # ============================================================================
      # SYSTEMD SERVICE CONFIGURATION
      # ============================================================================

      echo "🔧 Настройка systemd сервиса..."

      # Создание production-ready systemd сервиса
      cat > "/etc/systemd/system/$app_name.service" << EOF
[Unit]
Description=$app_name Web Application Service
After=network.target
Wants=network.target
Documentation=https://github.com/rpi-image-gen/extensions

[Service]
Type=exec
User=$app_name
Group=$app_name
WorkingDirectory=$install_path
ExecStart=$install_path/run.sh
ExecReload=/bin/kill -HUP \$MAINPID
Restart=always
RestartSec=5
TimeoutStartSec=30
TimeoutStopSec=30

# Security hardening
NoNewPrivileges=yes
PrivateTmp=yes
ProtectHome=yes
ProtectSystem=strict
ProtectKernelTunables=yes
ProtectKernelModules=yes
ProtectControlGroups=yes
ReadWritePaths=$install_path /var/log/$app_name /var/lib/$app_name
ReadOnlyPaths=/usr /etc
InaccessiblePaths=/boot /sys /proc/sys

# Resource limits
MemoryLimit=256M
CPUQuota=50%

# Logging
StandardOutput=journal
StandardError=journal
SyslogIdentifier=$app_name

[Install]
WantedBy=multi-user.target
EOF

      # ============================================================================
      # NGINX REVERSE PROXY CONFIGURATION
      # ============================================================================

      echo "🌐 Настройка nginx reverse proxy..."

      # Настройка nginx (если установлен)
      if command -v nginx >/dev/null 2>&1 && [[ -d "/etc/nginx" ]]; then
        # Создание конфигурации сайта
        cat > "/etc/nginx/sites-available/$app_name" << EOF
# $app_name nginx configuration
# Generated by rpi-image-gen application extension template

upstream $app_name {
    server 127.0.0.1:$service_port;
    keepalive 32;
}

server {
    listen 80;
    server_name localhost;
    root $install_path/static;
    index index.html;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Main application location
    location / {
        proxy_pass http://$app_name;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;

        # Timeout settings
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # Health check endpoint
    location /health {
        proxy_pass http://$app_name/health;
        access_log off;

        # Allow from localhost only for security
        allow 127.0.0.1;
        allow ::1;
        deny all;
    }

    # Static files caching
    location /static/ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }

    # Deny access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
}
EOF

        # Включение сайта
        ln -sf "/etc/nginx/sites-available/$app_name" "/etc/nginx/sites-enabled/" || true
        rm -f "/etc/nginx/sites-enabled/default" 2>/dev/null || true
      fi

      # ============================================================================
      # SERVICE ACTIVATION
      # ============================================================================

      echo "🚀 Активация сервисов..."

      # Включение и запуск сервисов
      if [[ "$auto_start" == "true" ]]; then
        systemctl daemon-reload || die "Failed to reload systemd daemon"

        systemctl enable "$app_name" || die "Failed to enable $app_name service"
        echo "✅ Сервис $app_name включен для автозапуска"

        # Включение nginx если настроен
        if [[ -L "/etc/nginx/sites-enabled/$app_name" ]]; then
          systemctl enable nginx || die "Failed to enable nginx"
          systemctl reload nginx || systemctl start nginx || true
          echo "✅ Nginx настроен и перезагружен"
        fi
      fi

      # Создание флага успешной установки
      touch "/var/lib/$app_name/.installed" || true

      echo "✅ Приложение $app_name успешно установлено и настроено"
      echo "   🌐 Доступно на: http://localhost"
      echo "   🔍 Health check: http://localhost/health"
      echo "   📊 Информация: http://localhost/info"

  # ============================================================================
  # ОЧИСТКА ПОСЛЕ УСТАНОВКИ
  # ============================================================================

  cleanup-hooks:
    - |
      #!/bin/bash
      # Hook: Application Cleanup - Очистка после установки
      set -euo pipefail

      # Function for error handling
      die() {
        echo "ERROR: $*" >&2
        exit 1
      }

      # Валидация переменных (без прерывания если не установлены)
      app_name="${IGconf_app_app_name:-unknown-app}"
      install_path="${IGconf_app_install_path:-/opt/$app_name}"

      echo "🧹 Очистка после установки приложения: $app_name"

      # ============================================================================
      # PYTHON CACHE CLEANUP
      # ============================================================================

      echo "🐍 Очистка Python кэша..."

      # Очистка глобального pip кэша
      rm -rf /root/.cache/pip 2>/dev/null || true

      # Очистка пользовательского pip кэша
      if [[ -d "/home/$app_name" ]]; then
        rm -rf "/home/$app_name/.cache/pip" 2>/dev/null || true
      fi

      # Очистка кэша виртуального окружения
      if [[ -d "$install_path/venv" ]]; then
        rm -rf "$install_path/venv/pip-cache" 2>/dev/null || true
        rm -rf "$install_path/venv/share/python-wheels" 2>/dev/null || true
      fi

      # ============================================================================
      # PYTHON BYTECODE CLEANUP
      # ============================================================================

      echo "🗑️  Очистка Python bytecode..."

      # Удаление .pyc файлов
      find "$install_path" -name "*.pyc" -delete 2>/dev/null || true
      find "$install_path" -name "*.pyo" -delete 2>/dev/null || true

      # Удаление __pycache__ директорий
      find "$install_path" -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

      # ============================================================================
      # BUILD ARTIFACTS CLEANUP
      # ============================================================================

      echo "🔧 Очистка артефактов сборки..."

      # Удаление временных файлов сборки
      rm -f "$install_path/setup.py" 2>/dev/null || true
      rm -f "$install_path/requirements.txt" 2>/dev/null || true
      rm -f "$install_path/MANIFEST.in" 2>/dev/null || true

      # Очистка npm/node artifacts если есть
      if [[ -d "$install_path/node_modules" ]]; then
        rm -rf "$install_path/node_modules/.cache" 2>/dev/null || true
      fi

      # ============================================================================
      # PACKAGE MANAGER CACHE CLEANUP
      # ============================================================================

      echo "📦 Очистка кэша пакетных менеджеров..."

      # Очистка apt кэша (если есть права)
      if command -v apt-get >/dev/null 2>&1; then
        apt-get clean 2>/dev/null || true
        rm -rf /var/lib/apt/lists/* 2>/dev/null || true
      fi

      # ============================================================================
      # LOG ROTATION SETUP
      # ============================================================================

      echo "📝 Настройка ротации логов..."

      # Создание конфигурации logrotate для приложения
      if [[ -d "/var/log/$app_name" ]]; then
        cat > "/etc/logrotate.d/$app_name" << EOF 2>/dev/null || true
/var/log/$app_name/*.log {
    daily
    rotate 30
    compress
    delaycompress
    missingok
    notifempty
    create 644 $app_name $app_name
    postrotate
        systemctl reload $app_name.service || true
    endscript
}
EOF
      fi

      # ============================================================================
      # DISK SPACE OPTIMIZATION
      # ============================================================================

      echo "💾 Финальная оптимизация дискового пространства..."

      # Создание списка больших файлов для анализа (опционально)
      if [[ -d "$install_path" ]]; then
        find "$install_path" -type f -size +10M -exec ls -lh {} \; 2>/dev/null | head -10 > "$install_path/.large-files.txt" 2>/dev/null || true
      fi

      # ============================================================================
      # FINAL VERIFICATION
      # ============================================================================

      echo "✅ Проверка финального состояния..."

      # Проверка что основные файлы на месте
      if [[ -f "$install_path/app.py" ]] && [[ -f "$install_path/run.sh" ]] && [[ -x "$install_path/run.sh" ]]; then
        echo "✅ Основные файлы приложения присутствуют"
      else
        echo "⚠️  Некоторые файлы приложения могут отсутствовать"
      fi

      # Проверка прав доступа
      if [[ -d "$install_path" ]]; then
        app_owner=$(stat -c '%U' "$install_path" 2>/dev/null || echo "unknown")
        if [[ "$app_owner" == "$app_name" ]]; then
          echo "✅ Права доступа настроены корректно"
        else
          echo "⚠️  Права доступа могут быть некорректными (owner: $app_owner)"
        fi
      fi

      echo "✅ Очистка после установки $app_name завершена успешно"
