---
alwaysApply: ${cursor.file.path.includes("test/") || cursor.file.path.includes("spec/")}
---


# –ü—Ä–∞–≤–∏–ª–æ 03.01: –ú–æ–¥—É–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π

## –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –º–æ–¥—É–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π rpi-image-gen.

## –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–µ–≤
```bash
# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–ª–æ—è
rpi-image-gen layer --describe your-layer-name

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
rpi-image-gen layer --list --depends your-layer-name

# –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
rpi-image-gen metadata --lint layer/your-layer.yaml

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
bash -n hook-script.sh

# –í–∞–ª–∏–¥–∞—Ü–∏—è YAML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
python3 -c "import yaml; yaml.safe_load(open('layer.yaml'))"
```

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:
- [ ] –°–∏–Ω—Ç–∞–∫—Å–∏—Å –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏
- [ ] –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å YAML –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
- [ ] –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å–ª–æ–µ–≤
- [ ] –ù–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
- [ ] –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤

## –ü—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–µ–≤ üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –í–∞–ª–∏–¥–∞—Ü–∏—è METABEGIN –±–ª–æ–∫–∞
```bash
#!/bin/bash
# validate_layer_metadata.sh

validate_layer_metadata() {
    local layer_file="$1"

    echo "–í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å–ª–æ—è: $layer_file"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è METABEGIN
    if ! grep -q "^# METABEGIN" "$layer_file"; then
        echo "–û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç METABEGIN –±–ª–æ–∫"
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è METAEND
    if ! grep -q "^# METAEND" "$layer_file"; then
        echo "–û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç METAEND –±–ª–æ–∫"
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    local required_fields=("X-Env-Layer-Name" "X-Env-Layer-Category" "X-Env-Layer-Version")

    for field in "${required_fields[@]}"; do
        if ! grep -q "^# $field:" "$layer_file"; then
            echo "–û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ $field"
            return 1
        fi
    done

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤–µ—Ä—Å–∏–∏
    local version
    version=$(grep "^# X-Env-Layer-Version:" "$layer_file" | sed 's/.*: //' | tr -d ' ')

    if [[ ! "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        echo "–û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏: $version"
        return 1
    fi

    echo "–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–ª–æ—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"
    return 0
}
```

### –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
```bash
#!/bin/bash
# validate_layer_variables.sh

validate_layer_variables() {
    local layer_file="$1"

    echo "–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—è: $layer_file"

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ METABEGIN –±–ª–æ–∫–∞
    local variables
    variables=$(sed -n '/^# METABEGIN/,/^# METAEND/p' "$layer_file" | grep "^# X-Env-Var-" | sed 's/# X-Env-Var-//' | cut -d: -f1)

    for var in $variables; do
        echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: $var"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
        if ! grep -q "^# X-Env-Var-$var-Description:" "$layer_file"; then
            echo "–û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π $var"
            return 1
        fi

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        local required
        required=$(grep "^# X-Env-Var-$var-Required:" "$layer_file" | sed 's/.*: //' | tr -d ' ')

        if [[ "$required" != "true" && "$required" != "false" ]]; then
            echo "–û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Required –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π $var: $required"
            return 1
        fi

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if [[ "$required" = "false" ]]; then
            if ! grep -q "^# X-Env-Var-$var:" "$layer_file"; then
                echo "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π $var"
            fi
        fi
    done

    echo "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"
    return 0
}
```

## –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–π üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è bash —Å–∫—Ä–∏–ø—Ç–æ–≤
```bash
#!/bin/bash
# validate_bash_scripts.sh

validate_bash_scripts() {
    local script_dir="$1"

    echo "–í–∞–ª–∏–¥–∞—Ü–∏—è bash —Å–∫—Ä–∏–ø—Ç–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: $script_dir"

    local errors=0

    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö bash —Å–∫—Ä–∏–ø—Ç–æ–≤
    while IFS= read -r -d '' script; do
        echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞: $(basename "$script")"

        # –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if ! bash -n "$script"; then
            echo "–û–®–ò–ë–ö–ê: –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ $script"
            ((errors++))
        fi

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è shebang
        if ! head -1 "$script" | grep -q "^#!/.*bash"; then
            echo "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç shebang –≤ $script"
        fi

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ set -euo pipefail
        if ! grep -q "set -euo pipefail" "$script"; then
            echo "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'set -euo pipefail' –≤ $script"
        fi

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
        local functions
        functions=$(grep "^[a-zA-Z_][a-zA-Z0-9_]*()" "$script" | sed 's/().*//')

        for func in $functions; do
            if ! grep -q "^# –û–ø–∏—Å–∞–Ω–∏–µ:" "$script" && ! grep -A 2 "^$func()" "$script" | grep -q "^[[:space:]]*#"; then
                echo "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è $func –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞"
            fi
        done

    done < <(find "$script_dir" -name "*.sh" -type f -print0)

    if [[ $errors -gt 0 ]]; then
        echo "–ù–∞–π–¥–µ–Ω–æ $errors –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
        return 1
    fi

    echo "–í—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é"
    return 0
}
```

### –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Ñ—É–Ω–∫—Ü–∏–π
```bash
#!/bin/bash
# validate_function_dependencies.sh

validate_function_dependencies() {
    local script_file="$1"

    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Ñ—É–Ω–∫—Ü–∏–π –≤: $(basename "$script_file")"

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–π
    local functions
    functions=$(grep "^[a-zA-Z_][a-zA-Z0-9_]*()" "$script_file" | sed 's/().*//')

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
    local calls
    calls=$(grep -o '\b[a-zA-Z_][a-zA-Z0-9_]*\s*(' "$script_file" | sed 's/(.*/(/' | sort | uniq)

    for call in $calls; do
        call=${call%(*)}  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–∫–æ–±–∫–∏

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
        if ! grep -q "^$call()" "$script_file" && ! is_builtin_command "$call"; then
            echo "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –í—ã–∑–æ–≤ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: $call"
        fi
    done

    echo "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"
}

is_builtin_command() {
    local cmd="$1"

    # –°–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ bash
    local builtins=("echo" "printf" "read" "test" " [" "return" "exit" "cd" "pwd" "export" "unset" "readonly" "shift" "set" "eval" "exec" "source" "command" "type" "hash" "trap" "kill" "wait" "jobs" "fg" "bg" "disown")

    for builtin in "${builtins[@]}"; do
        if [[ "$cmd" = "$builtin" ]]; then
            return 0
        fi
    done

    return 1
}
```

## –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤ üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
```bash
#!/bin/bash
# validate_extension_structure.sh

validate_extension_structure() {
    local extension_dir="$1"

    echo "–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: $(basename "$extension_dir")"

    local errors=0

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    local required_files=("layer/extension.yaml" "README.md")

    for file in "${required_files[@]}"; do
        if [[ ! -f "$extension_dir/$file" ]]; then
            echo "–û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª: $file"
            ((errors++))
        fi
    done

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    local recommended_dirs=("config" "scripts" "tests")

    for dir in "${recommended_dirs[@]}"; do
        if [[ ! -d "$extension_dir/$dir" ]]; then
            echo "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: $dir"
        fi
    done

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º
    while IFS= read -r -d '' file; do
        local perms
        perms=$(stat -c %a "$file")

        # –°–∫—Ä–∏–ø—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏
        if [[ "$file" == *.sh ]]; then
            if [[ "${perms:2:1}" != [1,3,5,7] ]]; then
                echo "–û–®–ò–ë–ö–ê: –°–∫—Ä–∏–ø—Ç –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π: $file (–ø—Ä–∞–≤–∞: $perms)"
                ((errors++))
            fi
        fi

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏
        if [[ "$file" == *.yaml || "$file" == *.yml || "$file" == *.json ]]; then
            if [[ "${perms:2:1}" != [0,2,4,6] ]]; then
                echo "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π: $file (–ø—Ä–∞–≤–∞: $perms)"
            fi
        fi

    done < <(find "$extension_dir" -type f -print0)

    if [[ $errors -gt 0 ]]; then
        echo "–ù–∞–π–¥–µ–Ω–æ $errors –æ—à–∏–±–æ–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"
        return 1
    fi

    echo "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
    return 0
}
```

## –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –º–æ–¥—É–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç-—Å—å—é—Ç
```bash
#!/bin/bash
# run_unit_tests.sh

run_unit_tests() {
    local extension_dir="$1"
    local report_file="/tmp/unit-test-report-$(date +%Y%m%d-%H%M%S).json"

    echo "–ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: $(basename "$extension_dir")"

    local tests_passed=0
    local tests_failed=0
    local test_results=()

    # –¢–µ—Å—Ç 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    if validate_layer_metadata "$extension_dir/layer/extension.yaml" 2>/dev/null; then
        test_results+=('{"name": "metadata_validation", "status": "passed"}')
        ((tests_passed++))
    else
        test_results+=('{"name": "metadata_validation", "status": "failed"}')
        ((tests_failed++))
    fi

    # –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if validate_layer_variables "$extension_dir/layer/extension.yaml" 2>/dev/null; then
        test_results+=('{"name": "variable_validation", "status": "passed"}')
        ((tests_passed++))
    else
        test_results+=('{"name": "variable_validation", "status": "failed"}')
        ((tests_failed++))
    fi

    # –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤
    if validate_bash_scripts "$extension_dir" 2>/dev/null; then
        test_results+=('{"name": "script_validation", "status": "passed"}')
        ((tests_passed++))
    else
        test_results+=('{"name": "script_validation", "status": "failed"}')
        ((tests_failed++))
    fi

    # –¢–µ—Å—Ç 4: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if validate_extension_structure "$extension_dir" 2>/dev/null; then
        test_results+=('{"name": "structure_validation", "status": "passed"}')
        ((tests_passed++))
    else
        test_results+=('{"name": "structure_validation", "status": "failed"}')
        ((tests_failed++))
    fi

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    local test_summary
    test_summary=$(printf '%s,' "${test_results[@]}" | sed 's/,$//')

    cat > "$report_file" << EOF
    {
        "extension": "$(basename "$extension_dir")",
        "timestamp": "$(date -Iseconds)",
        "test_type": "unit",
        "summary": {
            "total": $((tests_passed + tests_failed)),
            "passed": $tests_passed,
            "failed": $tests_failed
        },
        "tests": [${test_summary}]
    }
EOF

    echo "–û—Ç—á–µ—Ç –º–æ–¥—É–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: $report_file"
    echo "–ü—Ä–æ–π–¥–µ–Ω–æ: $tests_passed, –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: $tests_failed"

    return $((tests_failed > 0))
}
```

## –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥—É–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è üî¥ –û–í–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï

### –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ–∫—Ä—ã—Ç–∏—è
- [ ] –í—Å–µ —Ñ–∞–π–ª—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
- [ ] –í—Å–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–ª–æ–µ–≤ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã
- [ ] –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã
- [ ] –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã
- [ ] –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º

### –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
- [ ] –ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
- [ ] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
- [ ] –û—Ç—á–µ—Ç—ã –æ –∫–∞—á–µ—Å—Ç–≤–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ
- [ ] –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CI/CD —Å–∏—Å—Ç–µ–º–∞–º–∏