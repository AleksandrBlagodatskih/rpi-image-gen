#!/usr/bin/env python

import json
import re
import argparse
import os
import copy
import sys


VERSION = "1.1.2"


IMAGE_KEYS = {"IGconf_device_class",
              "IGconf_device_variant",
              "IGconf_image_name",
              "IGconf_image_version",
              "IGconf_sys_outputdir"}


top_template = {
    "version": VERSION,
    "meta": [],
    "attributes": {
        "image-size": "0",
    },
    "layout": {
        "partition-table-type": "none",
        "partitions": []
    }
}


partition_template =  {
    "name": "default",
    "partition-type": None,
    "in-partition-table": "false",
    "fstab": {}
}


# mke2fs specifies the UUID with -U
def get_extfs_uuid(extraargs):
    match = re.search(r"-U\s+([a-fA-F0-9\-]+)", extraargs)
    return match.group(1).lower() if match else None


# mkdosfs specifies volume ID with -i
def get_vfat_uuid(extraargs):
    match = re.search(r"-i\s+([a-fA-F0-9\-]+)", extraargs)
    if match:
        uuid = match.group(1).upper()
        return f"{uuid[:4]}-{uuid[4:]}"
    return None


# genimage key value mapping
def map_genimage(key, value):
    gmap = {
        # https://github.com/pengutronix/genimage#the-image-section
        "partition-type-uuid":{
            ("L", "linux"):       "0fc63daf-8483-4772-8e79-3d69d8477de4",
            ("S", "swap"):        "0657fd6d-a4ab-43c4-84e5-0933c84b4f4f",
            ("H", "home"):        "933ac7e1-2eb4-4f13-b844-0e14e2aef915",
            ("U", "esp", "uefi"): "c12a7328-f81f-11d2-ba4b-00a0c93ec93b",
            ("R", "raid"):        "a19d880f-05fc-4d3b-a006-743f0f84911e",
            ("V", "lvm"):         "e6d6d379-f507-44c2-a23c-238f2a3df928",
            ("F", "fat32"):       "ebd0a0a2-b9e5-4433-87c0-68b6b72699c7"
        }
    }
    if key in gmap:
        translations = gmap[key]
        for possible_values, translated_value in translations.items():
            if value in possible_values:
                return translated_value

    return value


# General single line based key value reader with options
def read_kv(line, exclude_keys=None, translate_fn=None):
    if exclude_keys is None:
        exclude_keys = set() # Default - no exclusions

    for match in re.finditer(r"^\s*([\w-]+)\s*=\s*(\"[^\"]*\"|'[^']*'|[^#\n]+)", line, re.MULTILINE):
        key, value = match.groups()
        if key in exclude_keys:
            return (None, None)

        value = value.strip().strip('"').strip("'") # Remove quotes if present

        if translate_fn:
            value = translate_fn(key, value)

    return (key, value)


# Convert a libconfuse struct to nested dictionary with optional translate
# function and exclude filter for key value pairs
def confuse2dict(config_path, exclude_keys=None, tfn=None):
    with open(config_path, "r") as f:
        lines = f.readlines()

    root_structure = {}
    section_stack = [root_structure]

    # Match entry of section - type and optional subtype
    section_delimiter = r"([a-zA-Z0-9\-]+)(?:\s+([^\s]+))?\s*\{"

    for line in lines:
        line = line.strip()

        # remove any comments
        line = re.sub(r"\s*#.*", "", line).strip()
        if line == "" or not line:
            continue

        section = re.search(section_delimiter, line)
        if section:
            section_type = section.group(1)
            section_subtype = section.group(2)

            new_section = {}

            if section_subtype:
                if section_type not in section_stack[-1]:
                    section_stack[-1][section_type] = {} # new
                section_stack[-1][section_type][section_subtype] = new_section
                section_stack.append(new_section)
            else:
                section_stack[-1][section_type] = new_section
                section_stack.append(new_section)

            if '}' in line: # end of section on same line
                section_stack.pop()

            continue

        if "}" in line: # end of section
            if len(section_stack) > 1:
                section_stack.pop()
            else:
                raise ValueError("Unexpected closing brace")
            continue

        key, value = read_kv(line, exclude_keys, tfn)
        if key and value:
            if section_stack:
                section_stack[-1][key] = value

    if len(section_stack) != 1:
        raise ValueError("Parse error. Mismatched brace?")

    return root_structure


# Recursive find all sections by type
def find_sections(stype, data, sections=None):
    if sections is None:
        sections = {}

    for k, v in data.items():
        if isinstance(v, dict):
            if k == stype:
                for name, data in v.items():
                    sections[name] = data
            else:
                find_sections(stype, v, sections)
    return sections


def get_fs_label(section):
    label = section.get("label")
    if label:
        return label
    return None


def process_extfs(section):
    args = section.get("extraargs", "")
    values = {
        "fs_uuid": get_extfs_uuid(args),
        "fs_label": get_fs_label(section)
    }
    return {k: v for k, v in values.items() if v is not None}


def process_vfat(section):
    args = section.get("extraargs", "")
    values = {
        "fs_uuid": get_vfat_uuid(args),
        "fs_label": get_fs_label(section)
    }
    return {k: v for k, v in values.items() if v is not None}


IMAGE_PROCESSORS = {
    "vfat": process_vfat,
    "ext2": process_extfs,
    "ext3": process_extfs,
    "ext4": process_extfs
}


def parse_genimage_config(config_path):
    data = confuse2dict(config_path, {"exec-pre", "exec-post"}, map_genimage)

    images = find_sections("image", data)
    partitions = find_sections("partition", data)

    disk_attr = {}

    # Anchor to hdimage parent for top level attributes
    for iname, idata in images.items():
        if "hdimage" in idata:
            hdimage = idata.get("hdimage")
            disk_attr["partition-table-type"] = hdimage.get("partition-table-type")
            disk_attr["image-size"] = idata.get("size") if idata.get("size") else "0"

    # https://github.com/pengutronix/genimage?tab=readme-ov-file#the-image-configuration-options
    gtypes = ["android-sparse", "btrfs", "cpio", "cramfs", "ext2", "ext3",
              "ext4", "f2fs", "file", "FIT", "fip", "flash", "iso", "jffs2",
              "qemu", "rauc", "squashfs," "tar", "ubi", "vfat"]

    # Associate partitions with their images
    for pname, pattr in partitions.items():
        if "image" in pattr:
            iname = pattr["image"]
            if iname in images:
                # Found. Merge
                partitions[pname] = {**images[iname], **pattr}

                # Tag image type
                for t in gtypes:
                    s = find_sections(t, partitions[pname])
                    if s:
                        partitions[pname]["type"] = t
                        # Invoke the processor for this type
                        if t in IMAGE_PROCESSORS:
                            attr = IMAGE_PROCESSORS[t](s)
                            if attr:
                                partitions[pname].update(attr)

    return (disk_attr, partitions)


# Read all fstabs and store in a dict using UUID or label if we can,
# or a unique key if we can't.
def parse_fstab(fstab_paths):
    fstab_data = {}
    fcount = 1
    for fstab_path in fstab_paths:
        try:
            with open(fstab_path, "r") as f:
                lcount = 1
                for line in f:
                    line = line.strip()
                    if line.startswith("#") or line == "":
                        continue  # skip comments or empty

                    parts = line.split()
                    if len(parts) == 4:
                        device, mountpoint, fstype, options = parts[:4]
                        freq = "0"
                        passn = "0"
                    elif len(parts) == 5:
                        device, mountpoint, fstype, options, freq = parts[:5]
                        passn = "0"
                    elif len(parts) == 6:
                        device, mountpoint, fstype, options, freq, passn = parts[:6]
                    else:
                        continue  # skip unusable

                    mount_options = options.split(",")

                    # Supported fs_spec:
                    if device.startswith(("UUID=", "LABEL=", "PARTUUID=", "PARTLABEL=")):
                        deviceid = device.split("=", 1)[1]
                    elif device.startswith(("/dev/disk/by-label/", "/dev/disk/by-uuid/")):
                        deviceid = device.rsplit("/", 1)[-1]
                    else:
                        deviceid = f"fstab{fcount}_{lcount}"

                    # This will overwrite previous settings if the device exists in multiple fstabs
                    # under the same uuid/label.
                    fstab_data[deviceid] = {"fs_spec": device,
                                            "fs_file": mountpoint,
                                            "fs_vfstype": fstype,
                                            "fs_mntops": mount_options,
                                            "fs_freq": freq,
                                            "fs_passno": passn}
                    lcount += 1

        except FileNotFoundError:
            sys.exit('invalid fstab: %s' % fstab_path)

        fcount += 1

    return fstab_data


# Try to match a genimage partition with an fstab device entry to establish mount options.
# Try static uuid and label first, falling back to genimage mountpoint.
# This lookup can only give guaranteed matching results if there is no duplication of
# uuid, label or mountpoint in each fstab file provided.
# If a match is found, the fstab section of the partition is populated.
def merge_configs(genimage_partitions, fstab_data):
    for pname, pdata in genimage_partitions.items():
        label = pdata.get("fs_label")
        uuid = pdata.get("fs_uuid")

        if uuid and uuid in fstab_data:
            pdata["fstab"] = fstab_data[uuid]
        elif label and label in fstab_data:
            pdata["fstab"] = fstab_data[label]
        else:
            pmnt = pdata.get("mountpoint")
            if pmnt:
                for name, contents in fstab_data.items():
                    if pmnt == contents.get("fs_file"):
                        pdata["fstab"] = fstab_data[name]

    return genimage_partitions



def get_env_vars(prefix=None):
    if prefix:
        return {key: value for key,value in os.environ.items() if key.startswith(prefix)}
    return dict(os.environ)


# Returns IG config vars we want to bake into the json
def get_image_meta():
    vars = get_env_vars()
    image_vars = {}
    for key, value in vars.items():
        if key in IMAGE_KEYS:
            image_vars[key] = value

    return image_vars


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
            description='JSON layout generator')

    parser.add_argument("-g", "--genimage",
                        help="Path to genimage config file",
                        required=True)

    parser.add_argument("-f", "--fstab",
                        help="Paths to one or more fstab files",
                        nargs="*",
                        required=False)

    args = parser.parse_args()
    genimage_file = args.genimage;

    # Base info
    attributes, genimage_partitions = parse_genimage_config(genimage_file)

    # fstab is optional
    if args.fstab:
        fstab_files = args.fstab
        fstab_data = parse_fstab(fstab_files)
        partition_json = merge_configs(genimage_partitions, fstab_data)
    else:
        partition_json = genimage_partitions

    top_template["meta"] = get_image_meta()
    top_template["attributes"]["image-size"] = attributes.get("image-size")
    top_template["layout"]["partition-table-type"] = attributes.get("partition-table-type")
    top_template["layout"]["partitions"] = partition_json

    print(json.dumps(top_template, indent=4))
