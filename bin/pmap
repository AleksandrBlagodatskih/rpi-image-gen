#!/usr/bin/env python

# Provisioning Map Helper

import argparse
import json
import sys


# Print slot mapping
def slotvars(data):
    # Check for slotted system_type
    if not any(e.get("attributes", {}).get("system_type") == "slotted" for e in data):
        sys.stderr.write("Not slotted\n")
        sys.exit(1)

    for entry in data:
        # encrypted at the top level with slots
        if "encrypted" in entry and "slots" in entry["encrypted"]:
            mname = entry["encrypted"]["luks2"]["mname"]
            slots = entry["encrypted"]["slots"]
            for slot, slotval in slots.items():
                for part in slotval.get("partitions", []):
                    role = part.get("role", "")
                    id_ = part.get("id", "")
                    print(f"{role.upper()}{slot.upper()}={mname}{id_}")
                    print(f"{role.upper()}{slot.upper()}_ENCRYPTED=y")

        # slots at the top level with encapsulated unencrypted/encrypted
        elif "slots" in entry:
            slots = entry["slots"]
            for slot, slotval in slots.items():
                # Encrypted inside this slot
                if "encrypted" in slotval:
                    mname = slotval["encrypted"]["luks2"]["mname"]
                    for part in slotval["encrypted"].get("partitions", []):
                        role = part.get("role", "")
                        id_ = part.get("id", "")
                        print(f"{role.upper()}{slot.upper()}={mname}{id_}")
                        print(f"{role.upper()}{slot.upper()}_ENCRYPTED=y")

                # Unencrypted
                for part in slotval.get("partitions", []):
                    # Only print unencrypted if not also encrypted
                    if "encrypted" not in slotval:
                        role = part.get("role", "")
                        id_ = part.get("id", "")
                        print(f"{role.upper()}{slot.upper()}={id_}")
                        print(f"{role.upper()}{slot.upper()}_ENCRYPTED=n")



# Best effort general purpose JSON key retrieval
def get_key(data, key_path, default=None):
    keys = key_path.split('.')
    val = data
    for key in keys:
        if isinstance(val, dict):
            if key in val:
                val = val[key]
            else:
                return default
        elif isinstance(val, list):
            # Try to interpret key as an integer index
            try:
                idx = int(key)
                val = val[idx]
            except (ValueError, IndexError):
                # Optionally, search all items for the key
                for item in val:
                    if isinstance(item, dict) and key in item:
                        val = item[key]
                        break
                else:
                    return default
        else:
            return default
    return val



if __name__ == '__main__':
    parser = argparse.ArgumentParser(
            description='PMAP helper')

    parser.add_argument("-f", "--file",
                        help="Path to PMAP file",
                        required=True)

    parser.add_argument("-s", "--slotvars",
                        action="store_true",
                        help="Print slot map variables")

    parser.add_argument("--get-key",
                        help="Dot-separated key path to retrieve from PMAP JSON")

    args = parser.parse_args()

    with open(args.file) as f:
        data = json.load(f)

    if args.slotvars:
        slotvars(data)
        sys.exit(0);

    if args.get_key:
        value = get_key(data, args.get_key)
        if value is None:
            sys.exit(1)
        else:
            print(value)
            sys.exit(0)
