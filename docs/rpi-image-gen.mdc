# Правила проекта rpi-image-gen

## Структура проекта

Проект следует строгой архитектуре с четким разделением ответственности:

```
/home/admin/rpi-image-gen/
├── bin/           # Исполняемые файлы и утилиты
├── config/        # Конфигурационные файлы
├── layer/         # Библиотека слоев
├── layer-hooks/   # Общие хуки для слоев
├── lib/           # Вспомогательные скрипты
├── site/          # Основные Python классы
├── docs/          # Документация (включая данный файл)
├── examples/      # Примеры использования
├── image/         # Специфичные для образов ресурсы
├── device/        # Специфичные для устройств ресурсы
└── trash/         # Временные и вспомогательные файлы разработки
```

## Правила разработки

### 1. Не создавать лишних сущностей
- Каждый файл должен иметь четкое назначение
- Избегать дублирования функциональности
- Использовать существующие компоненты вместо создания новых

### 2. Строго следовать структуре проекта
- Размещать файлы только в предопределенных директориях
- Не создавать новые директории без необходимости
- Соблюдать иерархию и назначение каждой директории

### 3. Контекстные файлы проекта
- Файлы с описанием архитектуры размещаются в `docs/`
- Исполняемые файлы размещаются в `bin/`
- Конфигурационные файлы размещаются в `config/`
- Библиотеки слоев размещаются в `layer/`

### 4. Временные и вспомогательные файлы разработки
- Все временные файлы, черновики и экспериментальные разработки размещать в `trash/`
- Папка `trash/` предназначена для быстрого удаления вспомогательных файлов
- Не размещать в `trash/` файлы, необходимые для работы проекта
- Регулярно очищать папку `trash/` для поддержания чистоты проекта

## Категории файлов

### Документация (docs/)
- README.adoc - основная документация проекта
- index.adoc - оглавление документации
- rpi-image-gen.mdc - контекстные правила проекта (данный файл)
- Специфичные руководства и описания

### Исполняемые файлы (bin/)
- rpi-image-gen - основной оркестратор сборки
- ig - Python инструмент для управления слоями
- runner - исполнитель хуков в контейнерах
- uchroot - утилита chroot для безопасного выполнения

### Конфигурационные файлы (config/)
- YAML файлы с конфигурацией образов
- Примеры готовых конфигураций
- Корпоративные настройки безопасности

### Библиотека слоев (layer/)
- base/ - базовые слои инфраструктуры
- security/ - слои безопасности
- rpi/ - слои устройств Raspberry Pi
- suite/ - дистрибутивы Debian

### Временные файлы разработки (trash/)
- Временные конфигурации и черновики
- Экспериментальные слои и настройки
- Локальные тесты и отладочная информация
- Файлы для быстрого удаления при очистке проекта

## Принципы архитектуры

1. **Модульность** - каждый компонент имеет четкую ответственность
2. **Декларативность** - конфигурация через YAML файлы
3. **Безопасность** - встроенные механизмы защиты и аудита
4. **Масштабируемость** - поддержка различных устройств и конфигураций

## Процесс сборки

Система реализует 6-этапный конвейер сборки:
1. Parameter Assembly - сборка параметров
2. Collect Layers - сбор слоев
3. Prepare Build Config - подготовка конфигурации сборки
4. Generate Filesystem - генерация файловой системы
5. Generate Images - генерация образов
6. Deploy - развертывание артефактов

Каждый этап имеет четкие правила перехода и валидации.