# METABEGIN
# X-Env-Layer-Name: rpi5-hardware-config
# X-Env-Layer-Category: device
# X-Env-Layer-Desc: Raspberry Pi 5 hardware configuration with PCIe Gen 3.0, SATA controllers and USB optimizations
# X-Env-Layer-Version: 1.0.0
# X-Env-Layer-Requires: device-base,rpi-boot-firmware
# X-Env-Layer-Provides: rpi5-hardware,pcie-gen3,sata-controller
#
# X-Env-VarPrefix: rpi5_hw
#
# X-Env-Var-pcie_gen3: y
# X-Env-Var-pcie_gen3-Desc: Enable PCIe Gen 3.0 and SATA optimizations for JMB585 controller
# X-Env-Var-pcie_gen3-Required: n
# X-Env-Var-pcie_gen3-Valid: bool
# X-Env-Var-pcie_gen3-Set: immediate
#
# X-Env-Var-initramfs_sata: y
# X-Env-Var-initramfs_sata-Desc: Enable initramfs SATA initialization with RP1 and PCIe modules
# X-Env-Var-initramfs_sata-Required: n
# X-Env-Var-initramfs_sata-Valid: bool
# X-Env-Var-initramfs_sata-Set: immediate
#
# X-Env-Var-enable_gpio_power: n
# X-Env-Var-enable_gpio_power-Desc: Enable GPIO power management for HAT (experimental)
# X-Env-Var-enable_gpio_power-Required: n
# X-Env-Var-enable_gpio_power-Valid: bool
# X-Env-Var-enable_gpio_power-Set: immediate
# METAEND
---
mmdebstrap:
  customize-hooks:
    # PCIe Gen 3.0 and SATA optimizations for JMB585 controller (idempotent)
    - |
      set -eu
      CONFIG_FILE="$1/boot/firmware/config.txt"

      # Validate environment
      if [ ! -f "$CONFIG_FILE" ]; then
        echo "ERROR: config.txt not found at $CONFIG_FILE" >&2
        exit 1
      fi

      # Helper function for safe config addition (idempotent)
      add_config_if_not_exists() {
        local param="$1"
        local comment="$2"

        if ! grep -q "^${param%%=*}" "$CONFIG_FILE" 2>/dev/null; then
          echo "$comment" >> "$CONFIG_FILE"
          echo "$param" >> "$CONFIG_FILE"
          echo "" >> "$CONFIG_FILE"
          echo "‚úÖ Added PCIe/SATA config: $param"
        else
          echo "‚ö™ PCIe/SATA config already present: $param"
        fi
      }

      if [ "${IGconf_rpi5_hw_pcie_gen3:-y}" = "y" ]; then
        add_config_if_not_exists "dtparam=pciex1_gen=3" "# Radxa SATA Penta HAT: PCIe Gen 3.0 for JMB585"
        add_config_if_not_exists "dtparam=pciex1_aspm=off" ""
        add_config_if_not_exists "dtparam=pciex1" ""
        add_config_if_not_exists "dtparam=sata_aggressive_linkpwr=1" ""
      fi

    # Initramfs SATA initialization (idempotent)
    - |
      set -eu
      if [ "${IGconf_rpi5_hw_initramfs_sata:-y}" = "y" ]; then
        echo "üîß Setting up initramfs SATA initialization for JMB585"

        # Setup initramfs directories (idempotent)
        mkdir -p $1/etc/initramfs-tools/hooks
        mkdir -p $1/etc/initramfs-tools/scripts/local-top

        # Copy SATA hook (idempotent)
        HOOK_DEST="$1/etc/initramfs-tools/hooks/sata_penta"
        if [ ! -f "$HOOK_DEST" ]; then
          install -m 755 device/initramfs-tools/hooks/sata_penta "$HOOK_DEST"
          echo "‚úÖ Installed SATA initramfs hook"
        else
          echo "‚ö™ SATA initramfs hook already present"
        fi

        # Add SATA modules (idempotent)
        MODULES_FILE="$1/etc/initramfs-tools/modules"
        if ! grep -q "# Radxa SATA Penta HAT modules" "$MODULES_FILE" 2>/dev/null; then
          echo "# Radxa SATA Penta HAT modules" >> "$MODULES_FILE"
          grep -v '^#' device/initramfs-tools/modules/initramfs-modules | grep -v '^$' >> "$MODULES_FILE"
          echo "‚úÖ Added SATA modules to initramfs"
        else
          echo "‚ö™ SATA modules already configured in initramfs"
        fi

        # Configure initramfs (idempotent)
        INITRAMFS_CONF="$1/etc/initramfs-tools/initramfs.conf"
        if ! grep -q "MODULES=list" "$INITRAMFS_CONF" 2>/dev/null; then
          sed -i 's/MODULES=most/MODULES=list/' "$INITRAMFS_CONF"
          echo "‚úÖ Configured initramfs to load modules by list"
        else
          echo "‚ö™ Initramfs already configured for module list loading"
        fi

        # GPIO power management (experimental) - SECURE VERSION
        if [ "${IGconf_rpi5_hw_enable_gpio_power}" = "y" ]; then
          # Create systemd service for safe GPIO management
          mkdir -p $1/etc/systemd/system
          cat > $1/etc/systemd/system/radxa-sata-power.service << 'EOF'
[Unit]
Description=Radxa SATA Penta HAT Power Management
After=local-fs.target
ConditionPathExists=/sys/class/pci_bus/0000:01

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/local/bin/radxa-sata-power-control start
ExecStop=/usr/local/bin/radxa-sata-power-control stop
TimeoutStartSec=30
TimeoutStopSec=10

[Install]
WantedBy=multi-user.target
EOF

          # Create safe power control script
          mkdir -p $1/usr/local/bin
          cat > $1/usr/local/bin/radxa-sata-power-control << 'EOF'
#!/bin/bash
set -euo pipefail

# Safe GPIO power control for Radxa SATA Penta HAT
# Only allows specific, validated operations

GPIO_PIN=26
GPIO_CHIP="gpiochip4"

validate_environment() {
    # Validate that we're running in expected environment
    if [ ! -d "/sys/class/pci_bus/0000:01" ]; then
        echo "ERROR: PCIe bus not found - HAT may not be connected" >&2
        exit 1
    fi

    # Check for JMB585 controller presence
    if ! lspci -d "197b:0585" >/dev/null 2>&1; then
        echo "ERROR: JMB585 SATA controller not detected" >&2
        exit 1
    fi
}

setup_gpio() {
    local gpio_base="/sys/class/gpio"

    # Export GPIO pin if not already exported
    if [ ! -d "${gpio_base}/gpio${GPIO_PIN}" ]; then
        echo "${GPIO_PIN}" > "${gpio_base}/export" 2>/dev/null || {
            echo "WARNING: Could not export GPIO ${GPIO_PIN}" >&2
            return 1
        }
    fi

    # Set direction to output
    echo "out" > "${gpio_base}/gpio${GPIO_PIN}/direction" 2>/dev/null || {
        echo "WARNING: Could not set GPIO ${GPIO_PIN} direction" >&2
        return 1
    }

    return 0
}

power_on() {
    validate_environment

    if setup_gpio; then
        echo "1" > "/sys/class/gpio/gpio${GPIO_PIN}/value" 2>/dev/null || {
            echo "WARNING: Could not set GPIO ${GPIO_PIN} to high" >&2
            return 1
        }
        echo "Radxa SATA Penta HAT power enabled (GPIO ${GPIO_PIN})"
    else
        echo "WARNING: GPIO setup failed, HAT may not receive power" >&2
    fi
}

power_off() {
    if [ -d "/sys/class/gpio/gpio${GPIO_PIN}" ]; then
        echo "0" > "/sys/class/gpio/gpio${GPIO_PIN}/value" 2>/dev/null || {
            echo "WARNING: Could not set GPIO ${GPIO_PIN} to low" >&2
        }
        echo "Radxa SATA Penta HAT power disabled (GPIO ${GPIO_PIN})"
    fi
}

case "${1:-}" in
    start)
        power_on
        ;;
    stop)
        power_off
        ;;
    *)
        echo "Usage: $0 {start|stop}" >&2
        exit 1
        ;;
esac
EOF

          chmod 755 $1/usr/local/bin/radxa-sata-power-control

          # Enable the service
          chroot $1 systemctl enable radxa-sata-power.service 2>/dev/null || true

          echo "Secure GPIO power management configured for Radxa SATA Penta HAT"
        fi

        # Update initramfs
        chroot $1 update-initramfs -u -k all
      fi

    # Add SATA monitoring integration (optional)
    - |
      set -eu

      # Setup monitoring for Radxa SATA Penta HAT (optional)
      if command -v curl >/dev/null 2>&1 && systemctl is-active --quiet prometheus-node-exporter 2>/dev/null; then
        echo "üìä Setting up Radxa SATA Penta HAT monitoring integration"

        # Create Prometheus textfile collector for SATA metrics
        mkdir -p "$1/var/lib/prometheus/node-exporter"

        # Generate basic SATA controller metrics
        cat > "$1/var/lib/prometheus/node-exporter/radxa-sata.prom" << EOF
# Radxa SATA Penta HAT Metrics
rpi5_hw_hat_configured 1
rpi5_hw_devices_detected $(ls /dev/sd* 2>/dev/null | grep -c "^/dev/sd[a-z]$" || echo 0)
EOF

        # Create SATA status script
        mkdir -p "$1/usr/local/bin"
        cat > "$1/usr/local/bin/radxa-sata-status" << 'EOF'
#!/bin/bash
# Radxa SATA Penta HAT Status Script

echo "=== Radxa SATA Penta HAT Status ==="
echo

# Check controller presence
echo "1. SATA Controller:"
if lspci -d "197b:0585" >/dev/null 2>&1; then
    CONTROLLER_INFO=$(lspci -d "197b:0585" -v | head -1)
    echo "   ‚úÖ JMB585 SATA controller detected: $CONTROLLER_INFO"
else
    echo "   ‚ùå JMB585 SATA controller not detected"
fi

# Check PCIe configuration
echo
echo "2. PCIe Configuration:"
if grep -q "dtparam=pciex1_gen=3" /boot/firmware/config.txt 2>/dev/null; then
    echo "   ‚úÖ PCIe Gen 3.0 enabled"
else
    echo "   ‚ö†Ô∏è PCIe Gen 3.0 not enabled (may limit performance)"
fi

# Check connected drives
echo
echo "3. Connected SATA Devices:"
DEVICE_COUNT=$(ls /dev/sd* 2>/dev/null | grep -c "^/dev/sd[a-z]$" || echo 0)
if [ "$DEVICE_COUNT" -gt 0 ]; then
    echo "   ‚úÖ $DEVICE_COUNT SATA device(s) detected:"
    for device in /dev/sd[a-z]; do
        if [ -b "$device" ]; then
            SIZE=$(lsblk -b -n -o SIZE "$device" 2>/dev/null | head -1)
            MODEL=$(lsblk -n -o MODEL "$device" 2>/dev/null | head -1)
            echo "      $device: ${MODEL:-Unknown} (${SIZE:-Unknown} bytes)"
        fi
    done
else
    echo "   ‚ö†Ô∏è No SATA devices detected"
fi

# Check initramfs configuration
echo
echo "4. Initramfs Configuration:"
if [ -f /etc/initramfs-tools/hooks/sata_penta ]; then
    echo "   ‚úÖ SATA initramfs hook installed"
else
    echo "   ‚ö†Ô∏è SATA initramfs hook not found"
fi

# Check GPIO power management
echo
echo "5. Power Management:"
if systemctl is-enabled --quiet radxa-sata-power.service 2>/dev/null; then
    if systemctl is-active --quiet radxa-sata-power.service 2>/dev/null; then
        echo "   ‚úÖ GPIO power management active"
    else
        echo "   ‚ö†Ô∏è GPIO power management enabled but not active"
    fi
else
    echo "   ‚ö™ GPIO power management not configured"
fi

echo
echo "=== Performance Recommendations ==="
if [ "$DEVICE_COUNT" -gt 0 ]; then
    echo "‚Ä¢ Test performance: hdparm -tT /dev/sda"
    echo "‚Ä¢ Check SMART: smartctl -a /dev/sda"
    echo "‚Ä¢ Monitor temps: watch -n 5 'lsblk -o NAME,SIZE,MODEL,TYPE /dev/sd*'"
fi
echo "‚Ä¢ PCIe info: lspci -d 197b:0585 -vvv"
echo "‚Ä¢ SATA info: lsblk -o NAME,SIZE,MODEL,SERIAL /dev/sd*"
EOF

        chmod 755 "$1/usr/local/bin/radxa-sata-status"
        echo "üìà Radxa SATA monitoring configured"
        echo "   Status command: radxa-sata-status"
      fi
