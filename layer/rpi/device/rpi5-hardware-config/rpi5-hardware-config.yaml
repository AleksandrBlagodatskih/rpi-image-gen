# METABEGIN
# X-Env-Layer-Name: rpi5-hardware-config
# X-Env-Layer-Category: device
# X-Env-Layer-Desc: Raspberry Pi 5 hardware configuration with PCIe Gen 3.0, SATA controllers and USB optimizations
# X-Env-Layer-Version: 1.0.0
# X-Env-Layer-Requires: device-base,rpi-boot-firmware
# X-Env-Layer-Provides: rpi5-hardware,pcie-gen3,sata-controller
#
# X-Env-VarPrefix: rpi5_hw
#
# X-Env-Var-pcie_gen3: y
# X-Env-Var-pcie_gen3-Desc: Enable PCIe Gen 3.0 and SATA optimizations for JMB585 controller
# X-Env-Var-pcie_gen3-Required: n
# X-Env-Var-pcie_gen3-Valid: bool
# X-Env-Var-pcie_gen3-Set: immediate
#
# X-Env-Var-initramfs_sata: y
# X-Env-Var-initramfs_sata-Desc: Enable initramfs SATA initialization with RP1 and PCIe modules
# X-Env-Var-initramfs_sata-Required: n
# X-Env-Var-initramfs_sata-Valid: bool
# X-Env-Var-initramfs_sata-Set: immediate
#
# X-Env-Var-enable_gpio_power: n
# X-Env-Var-enable_gpio_power-Desc: Enable GPIO power management for HAT (experimental)
# X-Env-Var-enable_gpio_power-Required: n
# X-Env-Var-enable_gpio_power-Valid: bool
# X-Env-Var-enable_gpio_power-Set: immediate
# METAEND
---
mmdebstrap:
  customize-hooks:
    # PCIe Gen 3.0 and SATA optimizations for JMB585 controller (idempotent)
    - |
      set -euo pipefail
      CONFIG_FILE="$1/boot/firmware/config.txt"

      # Validate environment
      if [ ! -f "$CONFIG_FILE" ]; then
        echo "ERROR: config.txt not found at $CONFIG_FILE" >&2
        exit 1
      fi

      # Helper function for safe config addition (idempotent)
      add_config_if_not_exists() {
        local param="$1"
        local comment="$2"

        if ! grep -q "^${param%%=*}" "$CONFIG_FILE" 2>/dev/null; then
          echo "$comment" >> "$CONFIG_FILE"
          echo "$param" >> "$CONFIG_FILE"
          echo "" >> "$CONFIG_FILE"
          echo "âœ… Added PCIe/SATA config: $param"
        else
          echo "âšª PCIe/SATA config already present: $param"
        fi
      }

      if [ "${IGconf_rpi5_hw_pcie_gen3:-y}" = "y" ]; then
        add_config_if_not_exists "dtparam=pciex1_gen=3" "# Radxa SATA Penta HAT: PCIe Gen 3.0 for JMB585"
        add_config_if_not_exists "dtparam=pciex1_aspm=off" ""
        add_config_if_not_exists "dtparam=pciex1" ""
        add_config_if_not_exists "dtparam=sata_aggressive_linkpwr=1" ""
      fi

    # Initramfs SATA initialization (idempotent)
    - |
      set -euo pipefail
      if [ "${IGconf_rpi5_hw_initramfs_sata:-y}" = "y" ]; then
        echo "ðŸ”§ Setting up initramfs SATA initialization for JMB585"

        # Setup initramfs directories (idempotent)
        mkdir -p $1/etc/initramfs-tools/hooks
        mkdir -p $1/etc/initramfs-tools/scripts/local-top

        # Copy SATA hook (idempotent)
        HOOK_DEST="$1/etc/initramfs-tools/hooks/sata_penta"
        if [ ! -f "$HOOK_DEST" ]; then
          install -m 755 device/initramfs-tools/hooks/sata_penta "$HOOK_DEST"
          echo "âœ… Installed SATA initramfs hook"
        else
          echo "âšª SATA initramfs hook already present"
        fi

        # Add SATA modules (idempotent)
        MODULES_FILE="$1/etc/initramfs-tools/modules"
        if ! grep -q "# Radxa SATA Penta HAT modules" "$MODULES_FILE" 2>/dev/null; then
          echo "# Radxa SATA Penta HAT modules" >> "$MODULES_FILE"
          grep -v '^#' device/initramfs-tools/modules/initramfs-modules | grep -v '^$' >> "$MODULES_FILE"
          echo "âœ… Added SATA modules to initramfs"
        else
          echo "âšª SATA modules already configured in initramfs"
        fi

        # Configure initramfs (idempotent)
        INITRAMFS_CONF="$1/etc/initramfs-tools/initramfs.conf"
        if ! grep -q "MODULES=list" "$INITRAMFS_CONF" 2>/dev/null; then
          sed -i 's/MODULES=most/MODULES=list/' "$INITRAMFS_CONF"
          echo "âœ… Configured initramfs to load modules by list"
        else
          echo "âšª Initramfs already configured for module list loading"
        fi

        # GPIO power management (experimental) - SECURE VERSION
        if [ "${IGconf_rpi5_hw_enable_gpio_power}" = "y" ]; then
          # Create systemd service for safe GPIO management
          mkdir -p $1/etc/systemd/system
          printf '[Unit]\nDescription=Radxa SATA Penta HAT Power Management\nAfter=local-fs.target\nConditionPathExists=/sys/class/pci_bus/0000:01\n\n[Service]\nType=oneshot\nRemainAfterExit=yes\nExecStart=/usr/local/bin/radxa-sata-power-control start\nExecStop=/usr/local/bin/radxa-sata-power-control stop\nTimeoutStartSec=30\nTimeoutStopSec=10\n\n[Install]\nWantedBy=multi-user.target\n' > $1/etc/systemd/system/radxa-sata-power.service

          # Create safe power control script
          mkdir -p $1/usr/local/bin
          printf '#!/bin/bash\nset -euo pipefail\n\n# Safe GPIO power control for Radxa SATA Penta HAT\n# Only allows specific, validated operations\n\nGPIO_PIN=26\nGPIO_CHIP="gpiochip4"\n\nvalidate_environment() {\n    # Validate that we'\''re running in expected environment\n    if [ ! -d "/sys/class/pci_bus/0000:01" ]; then\n        echo "ERROR: PCIe bus not found - HAT may not be connected" >&2\n        exit 1\n    fi\n\n    # Check for JMB585 controller presence\n    if ! lspci -d "197b:0585" >/dev/null 2>&1; then\n        echo "ERROR: JMB585 SATA controller not detected" >&2\n        exit 1\n    fi\n}\n\nsetup_gpio() {\n    local gpio_base="/sys/class/gpio"\n\n    # Export GPIO pin if not already exported\n    if [ ! -d "${gpio_base}/gpio${GPIO_PIN}" ]; then\n        echo "${GPIO_PIN}" > "${gpio_base}/export" 2>/dev/null || {\n            echo "WARNING: Could not export GPIO ${GPIO_PIN}" >&2\n            return 1\n        }\n    fi\n\n    # Set direction to output\n    echo "out" > "${gpio_base}/gpio${GPIO_PIN}/direction" 2>/dev/null || {\n        echo "WARNING: Could not set GPIO ${GPIO_PIN} direction" >&2\n        return 1\n    }\n\n    return 0\n}\n\npower_on() {\n    validate_environment\n\n    if setup_gpio; then\n        echo "1" > "/sys/class/gpio/gpio${GPIO_PIN}/value" 2>/dev/null || {\n            echo "WARNING: Could not set GPIO ${GPIO_PIN} to high" >&2\n            return 1\n        }\n        echo "Radxa SATA Penta HAT power enabled (GPIO ${GPIO_PIN})"\n    else\n        echo "WARNING: GPIO setup failed, HAT may not receive power" >&2\n    fi\n}\n\npower_off() {\n    if [ -d "/sys/class/gpio/gpio${GPIO_PIN}" ]; then\n        echo "0" > "/sys/class/gpio/gpio${GPIO_PIN}/value" 2>/dev/null || {\n            echo "WARNING: Could not set GPIO ${GPIO_PIN} to low" >&2\n        }\n        echo "Radxa SATA Penta HAT power disabled (GPIO ${GPIO_PIN})"\n    fi\n}\n\ncase "${1:-}" in\n    start)\n        power_on\n        ;;\n    stop)\n        power_off\n        ;;\n    *)\n        echo "Usage: $0 {start|stop}" >&2\n        exit 1\n        ;;\nesac\n' > $1/usr/local/bin/radxa-sata-power-control

          chmod 755 $1/usr/local/bin/radxa-sata-power-control

          # Enable the service
          chroot $1 systemctl enable radxa-sata-power.service 2>/dev/null || true

          echo "Secure GPIO power management configured for Radxa SATA Penta HAT"
        fi

        # Update initramfs
        chroot $1 update-initramfs -u -k all
      fi

