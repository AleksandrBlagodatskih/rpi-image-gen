# METABEGIN
# X-Env-Layer-Name: apparmor
# X-Env-Layer-Category: security
# X-Env-Layer-Desc: AppArmor Mandatory Access Control with system access monitoring profiles
# X-Env-Layer-Version: 1.1.0
# X-Env-Layer-Requires: locale-base
# X-Env-Layer-Provides: apparmor
#
# X-Env-VarPrefix: apparmor
#
# X-Env-Var-enable: y
# X-Env-Var-enable-Desc: Enable AppArmor Mandatory Access Control
# X-Env-Var-enable-Required: n
# X-Env-Var-enable-Valid: bool
# X-Env-Var-enable-Set: immediate
#
# X-Env-Var-mode: enforce
# X-Env-Var-mode-Desc: AppArmor mode - enforce (block violations) or complain (log only)
# X-Env-Var-mode-Required: n
# X-Env-Var-mode-Valid: keywords:enforce,complain
# X-Env-Var-mode-Set: lazy
#
# X-Env-Var-system_monitoring: y
# X-Env-Var-system_monitoring-Desc: Enable comprehensive system access monitoring (authentication, file access, network)
# X-Env-Var-system_monitoring-Required: n
# X-Env-Var-system_monitoring-Valid: bool
# X-Env-Var-system_monitoring-Set: immediate
#
# X-Env-Var-profiles_enable: y
# X-Env-Var-profiles_enable-Desc: Enable installation of custom AppArmor profiles
# X-Env-Var-profiles_enable-Required: n
# X-Env-Var-profiles_enable-Valid: bool
# X-Env-Var-profiles_enable-Set: immediate
#
# X-Env-Var-initramfs_integration: y
# X-Env-Var-initramfs_integration-Desc: Enable AppArmor integration with initramfs for early boot protection
# X-Env-Var-initramfs_integration-Required: n
# X-Env-Var-initramfs_integration-Valid: bool
# X-Env-Var-initramfs_integration-Set: immediate
#
# X-Env-Var-logging_enable: y
# X-Env-Var-logging_enable-Desc: Enable AppArmor event logging to syslog/rsyslog
# X-Env-Var-logging_enable-Required: n
# X-Env-Var-logging_enable-Valid: bool
# X-Env-Var-logging_enable-Set: immediate
#
# X-Env-Var-container_support: y
# X-Env-Var-container_support-Desc: Enable AppArmor profiles for container runtimes (Docker, Podman)
# X-Env-Var-container_support-Required: n
# X-Env-Var-container_support-Valid: bool
# X-Env-Var-container_support-Set: immediate
#
# X-Env-Var-monitoring_support: y
# X-Env-Var-monitoring_support-Desc: Enable AppArmor profiles for monitoring services (Prometheus, Grafana)
# X-Env-Var-monitoring_support-Required: n
# X-Env-Var-monitoring_support-Valid: bool
# X-Env-Var-monitoring_support-Set: immediate
#
# X-Env-Var-audit_integration: n
# X-Env-Var-audit_integration-Desc: Enable integration with auditd for AppArmor event logging
# X-Env-Var-audit_integration-Required: n
# X-Env-Var-audit_integration-Valid: bool
# X-Env-Var-audit_integration-Set: immediate
# METAEND
---
mmdebstrap:
  includes:
    - apparmor
    - apparmor-utils
    - apparmor-profiles
    - apparmor-profiles-extra
    - initramfs-tools
    - rsyslog
  customize-hooks:
    # Настройка AppArmor для Raspberry Pi
    - |
      if [ "${IGconf_apparmor_enable:-n}" != "y" ]; then
        echo "AppArmor disabled by configuration"
        exit 0
      fi

      echo "Configuring AppArmor for Raspberry Pi compatibility..."

      # Включение AppArmor через Raspberry Pi bootloader
      if [ -f "$1/boot/firmware/cmdline.txt" ]; then
          # Для Raspberry Pi OS с firmware в /boot/firmware
          if ! grep -q "apparmor=1" "$1/boot/firmware/cmdline.txt"; then
              echo "Adding AppArmor parameters to /boot/firmware/cmdline.txt"
              sed -i 's/$/ apparmor=1 security=apparmor/' "$1/boot/firmware/cmdline.txt"
          else
              echo "AppArmor parameters already present in /boot/firmware/cmdline.txt"
          fi
      elif [ -f "$1/boot/cmdline.txt" ]; then
          # Альтернативный путь для других Raspberry Pi конфигураций
          if ! grep -q "apparmor=1" "$1/boot/cmdline.txt"; then
              echo "Adding AppArmor parameters to /boot/cmdline.txt"
              sed -i 's/$/ apparmor=1 security=apparmor/' "$1/boot/cmdline.txt"
          else
              echo "AppArmor parameters already present in /boot/cmdline.txt"
          fi
      else
          echo "Warning: Could not find Raspberry Pi bootloader cmdline.txt file"
      fi

      # Для Raspberry Pi OS - включение через initramfs
      if [ ! -f "$1/etc/apparmor/initramfs" ]; then
          # Создание директории если она не существует
          mkdir -p "$1/etc/apparmor"
          touch "$1/etc/apparmor/initramfs"
          # Обновление initramfs
          chroot "$1" update-initramfs -u 2>/dev/null || echo "initramfs update may require manual intervention"
      fi

      # Установка режима работы AppArmor
      APPARMOR_MODE="${IGconf_apparmor_mode:-enforce}"
      case "$APPARMOR_MODE" in
          complain)
              echo "Setting AppArmor to complain mode (logging only)"
              chroot "$1" aa-complain /etc/apparmor.d/* 2>/dev/null || true
              ;;
          enforce|*)
              echo "Setting AppArmor to enforce mode (blocking violations)"
              chroot "$1" aa-enforce /etc/apparmor.d/* 2>/dev/null || true
              ;;
      esac

      # Проверка дополнительных настроек
      PROFILES_ENABLE="${IGconf_apparmor_profiles_enable:-y}"
      INITRAMFS_INTEGRATION="${IGconf_apparmor_initramfs_integration:-y}"
      LOGGING_ENABLE="${IGconf_apparmor_logging_enable:-y}"
      MONITORING_SUPPORT="${IGconf_apparmor_monitoring_support:-y}"
      AUDIT_INTEGRATION="${IGconf_apparmor_audit_integration:-n}"
      SYSTEM_MONITORING="${IGconf_apparmor_system_monitoring:-y}"

      echo "AppArmor additional settings:"
      echo "- Profiles: $PROFILES_ENABLE"
      echo "- Initramfs integration: $INITRAMFS_INTEGRATION"
      echo "- Logging: $LOGGING_ENABLE"
      echo "- Monitoring support: $MONITORING_SUPPORT"
      echo "- Audit integration: $AUDIT_INTEGRATION"

      # Настройка логирования если включено
      if [ "$LOGGING_ENABLE" = "y" ]; then
          echo "Configuring AppArmor logging..."
          # Настройка rsyslog для AppArmor логов
          if [ ! -f "$1/etc/rsyslog.d/apparmor.conf" ]; then
              mkdir -p "$1/etc/rsyslog.d"
              cat > "$1/etc/rsyslog.d/apparmor.conf" << 'EOF'
# AppArmor log configuration
if $programname == 'kernel' and $msg contains 'apparmor' then /var/log/apparmor/apparmor.log
& stop
EOF
          fi
      fi

      # Настройка initramfs интеграции если включена
      if [ "$INITRAMFS_INTEGRATION" = "y" ]; then
          echo "Configuring initramfs AppArmor integration..."
          mkdir -p "$1/etc/initramfs-tools/hooks"
          mkdir -p "$1/etc/initramfs-tools/scripts/init-premount"

          # Создание хуков для initramfs
          cat > "$1/etc/initramfs-tools/hooks/apparmor" << 'EOF'
#!/bin/sh
PREREQ=""
prereqs() { echo "$PREREQ"; }
case $1 in prereqs) prereqs; exit 0 ;; esac

# Копирование базовых профилей для ранней загрузки
. /usr/share/initramfs-tools/hook-functions
copy_exec /sbin/apparmor_parser
for profile in sbin.init bin.systemd; do
    [ -f "/etc/apparmor.d/$profile" ] && copy_file profile "/etc/apparmor.d/$profile"
done
EOF

          chmod +x "$1/etc/initramfs-tools/hooks/apparmor"
      fi

      # Настройка интеграции с auditd если включена
      if [ "$AUDIT_INTEGRATION" = "y" ]; then
          echo "Configuring AppArmor audit integration..."
          # Настройка auditd для AppArmor событий
          if [ ! -f "$1/etc/audit/rules.d/apparmor.rules" ]; then
              mkdir -p "$1/etc/audit/rules.d"
              cat > "$1/etc/audit/rules.d/apparmor.rules" << 'EOF'
# AppArmor audit rules
# Мониторинг событий AppArmor для аудита безопасности

# Мониторинг попыток нарушения политик
-a always,exit -F arch=b64 -S open,openat,execve -F apparmor=1

# Мониторинг загрузки профилей
-w /etc/apparmor.d/ -p wa -k apparmor_profiles
-w /sys/kernel/security/apparmor/ -p wa -k apparmor_kernel

# Мониторинг событий аутентификации в контексте AppArmor
-a always,exit -F arch=b64 -S connect,accept,bind -F apparmor=1
EOF
          fi
      fi

      # Создание общих профилей мониторинга доступа к системе
      echo "Setting up system access monitoring profiles..."

      # Общий профиль для системных утилит мониторинга
      cat > "$1/etc/apparmor.d/usr.bin.system-monitoring" << 'EOF'
#include <tunables/global>
#include <tunables/global>

profile usr.bin.system-monitoring /usr/bin/*mon* {
    #include <abstractions/base>
    #include <abstractions/dbus>

    # Системные команды мониторинга
    /usr/bin/uptime mr,
    /usr/bin/free mr,
    /usr/bin/iostat mr,
    /usr/bin/vmstat mr,
    /usr/bin/mpstat mr,
    /usr/bin/pidstat mr,

    # Системные файлы для чтения
    /proc/** r,
    /sys/** r,
    /dev/** r,

    # Логи для анализа
    /var/log/** r,
    /run/log/** r,

    # Разрешенные сетевые протоколы (только локальные)
    unix stream,

    # Ограничение сетевого доступа
    deny network inet,
    deny network inet6,
    deny network raw,

    # Разрешенные возможности
    capability dac_override,
    capability dac_read_search,

    # Ограничение ptrace
    ptrace (complain) peer=@{profile_name},

    # Файловые операции только для чтения
    file /proc/**/* -> @{profile_name},
    file /sys/**/* -> @{profile_name},
}
EOF

      # Профиль для системных служб аутентификации
      cat > "$1/etc/apparmor.d/usr.sbin.authentication" << 'EOF'
#include <tunables/global>
#include <tunables/global>

profile usr.sbin.authentication /usr/sbin/*auth* {
    #include <abstractions/base>
    #include <abstractions/authentication>

    # Службы аутентификации
    /usr/sbin/sshd mr,
    /usr/sbin/dropbear mr,
    /usr/sbin/login mr,
    /usr/sbin/su mr,
    /usr/sbin/sudo mr,

    # Файлы аутентификации (только чтение)
    /etc/passwd r,
    /etc/shadow r,
    /etc/group r,
    /etc/sudoers r,
    /etc/ssh/** r,

    # Логи аутентификации
    /var/log/auth.log w,
    /var/log/sudo.log w,
    /var/log/ssh.log w,

    # Временные файлы для аутентификации
    /tmp/ssh-* rw,
    /tmp/sudo-* rw,

    # Разрешенные сетевые протоколы
    network inet stream,
    network inet6 stream,

    # Ограничение ptrace
    ptrace (complain) peer=@{profile_name},

    # Разрешенные возможности
    capability dac_override,
    capability dac_read_search,

    # Файловые операции
    file /etc/passwd -> @{profile_name},
    file /etc/shadow -> @{profile_name},
    file /var/log/auth.log -> @{profile_name},
}
EOF

      # Профиль для системных администраторов
      cat > "$1/etc/apparmor.d/usr.bin.admin-tools" << 'EOF'
#include <tunables/global>
#include <tunables/global>

profile usr.bin.admin-tools /usr/bin/admin* {
    #include <abstractions/base>
    #include <abstractions/admin>

    # Системные административные инструменты
    /usr/bin/systemctl mr,
    /usr/bin/journalctl mr,
    /usr/bin/service mr,
    /usr/bin/chmod mr,
    /usr/bin/chown mr,

    # Конфигурационные файлы
    /etc/systemd/** rw,
    /etc/sudoers r,
    /etc/passwd r,
    /etc/group r,

    # Логи системы
    /var/log/** rw,
    /run/log/** rw,

    # Временные файлы администратора
    /tmp/admin-* rw,
    @{HOME}/.admin/** rw,

    # Ограничение сетевого доступа
    deny network tcp,
    deny network udp,

    # Разрешенные локальные соединения
    unix peer=(label=@{profile_name}),

    # Ограничение ptrace
    ptrace (complain) peer=@{profile_name},

    # Разрешенные возможности
    capability dac_override,
    capability dac_read_search,

    # Файловые операции
    file /etc/systemd/**/* -> @{profile_name},
    file /var/log/**/* -> @{profile_name},
}
EOF

      echo "Common system access monitoring profiles setup completed"
