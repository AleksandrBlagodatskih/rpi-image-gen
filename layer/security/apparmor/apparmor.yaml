# METABEGIN
# X-Env-Layer-Name: apparmor
# X-Env-Layer-Category: security
# X-Env-Layer-Desc: AppArmor for Raspberry Pi with RPi-specific optimizations
# X-Env-Layer-Version: 1.0.0
# X-Env-Layer-Requires: locale-base
#
# X-Env-VarPrefix: apparmor
#
# X-Env-Var-enable: y
# X-Env-Var-enable-Desc: Enable AppArmor Mandatory Access Control
# X-Env-Var-enable-Required: n
# X-Env-Var-enable-Valid: bool
# X-Env-Var-enable-Set: y
#
# X-Env-Var-mode: enforce
# X-Env-Var-mode-Desc: AppArmor mode - enforce (block violations) or complain (log only)
# X-Env-Var-mode-Required: n
# X-Env-Var-mode-Valid: keywords:enforce,complain
# X-Env-Var-mode-Set: lazy
#
# X-Env-Var-rpi_optimized: y
# X-Env-Var-rpi_optimized-Desc: Enable Raspberry Pi specific optimizations
# X-Env-Var-rpi_optimized-Required: n
# X-Env-Var-rpi_optimized-Valid: bool
# X-Env-Var-rpi_optimized-Set: lazy
#
# X-Env-Var-mode: enforce
# X-Env-Var-mode-Desc: AppArmor mode - enforce (block violations) or complain (log only)
# X-Env-Var-mode-Required: n
# X-Env-Var-mode-Valid: keywords:enforce,complain
# X-Env-Var-mode-Set: lazy
# METAEND
---
mmdebstrap:
  includes:
    - apparmor
    - apparmor-utils
    - apparmor-profiles-extra
  customize-hooks:
    # Настройка AppArmor для Raspberry Pi
    - |
      igconf isy IGconf_apparmor_enable || exit 0

      echo "Configuring AppArmor for Raspberry Pi compatibility..."

      # Включение AppArmor через Raspberry Pi bootloader
      if [ -f "$1/boot/firmware/cmdline.txt" ]; then
          # Для Raspberry Pi OS с firmware в /boot/firmware
          if ! grep -q "apparmor=1" "$1/boot/firmware/cmdline.txt"; then
              echo "Adding AppArmor parameters to /boot/firmware/cmdline.txt"
              sed -i 's/$/ apparmor=1 security=apparmor/' "$1/boot/firmware/cmdline.txt"
          else
              echo "AppArmor parameters already present in /boot/firmware/cmdline.txt"
          fi
      elif [ -f "$1/boot/cmdline.txt" ]; then
          # Альтернативный путь для других Raspberry Pi конфигураций
          if ! grep -q "apparmor=1" "$1/boot/cmdline.txt"; then
              echo "Adding AppArmor parameters to /boot/cmdline.txt"
              sed -i 's/$/ apparmor=1 security=apparmor/' "$1/boot/cmdline.txt"
          else
              echo "AppArmor parameters already present in /boot/cmdline.txt"
          fi
      else
          echo "Warning: Could not find Raspberry Pi bootloader cmdline.txt file"
      fi

      # Для Raspberry Pi OS - включение через initramfs
      if [ ! -f "$1/etc/apparmor/initramfs" ]; then
          touch "$1/etc/apparmor/initramfs"
          # Обновление initramfs
          chroot "$1" update-initramfs -u 2>/dev/null || echo "initramfs update may require manual intervention"
      fi

      # Установка режима работы AppArmor
      APPARMOR_MODE=$(igconf getval IGconf_apparmor_mode)
      case "$APPARMOR_MODE" in
          complain)
              echo "Setting AppArmor to complain mode (logging only)"
              chroot "$1" aa-complain /etc/apparmor.d/* 2>/dev/null || true
              ;;
          enforce|*)
              echo "Setting AppArmor to enforce mode (blocking violations)"
              chroot "$1" aa-enforce /etc/apparmor.d/* 2>/dev/null || true
              ;;
      esac

      # Raspberry Pi специфические настройки безопасности
      if igconf isy IGconf_apparmor_rpi_optimized; then
          echo "Applying Raspberry Pi specific AppArmor optimizations..."

          # Создание tunables для RPi
          cat > "$1/etc/apparmor.d/tunables/rpi" << 'EOF'
      # Raspberry Pi specific tunables for AppArmor
      # Generated by rpi-image-gen apparmor layer

      # VideoCore GPU access
      @{VC_PATH}=/opt/vc/**
      @{VC_LIB}=/opt/vc/lib/**
      @{VC_BIN}=/opt/vc/bin/**

      # Raspberry Pi firmware and boot
      @{RPI_FIRMWARE}=/boot/firmware/**
      @{RPI_BOOT}=/boot/**

      # GPIO access for user applications
      @{GPIO}=/sys/class/gpio/**
      @{GPIO_EXPORT}=/sys/class/gpio/export
      @{GPIO_UNEXPORT}=/sys/class/gpio/unexport

      # I2C/SPI access
      @{I2C}=/dev/i2c-*
      @{SPI}=/dev/spidev*

      # Video4Linux (camera)
      @{V4L}=/dev/video*
      @{V4L_SYS}=/sys/class/video4linux/**
      EOF

          # Профиль для VideoCore
          cat > "$1/etc/apparmor.d/opt.vc" << 'EOF'
      # AppArmor profile for Raspberry Pi VideoCore
      # Author: rpi-image-gen apparmor layer
      # Compatible with Raspberry Pi OS

      #include <tunables/global>
      #include <tunables/rpi>

      # VideoCore binaries
      /opt/vc/bin/* {
        #include <abstractions/base>
        #include <abstractions/consoles>

        # VideoCore access
        @{VC_PATH} r,
        @{VC_LIB} r,
        @{VC_BIN} r,
        /opt/vc/lib/*.{so,so.*} r,

        # Device access
        /dev/vchiq rwk,
        /dev/vcsm rwk,
        /dev/vc-mem rwk,
        /dev/fb* rwk,
        /dev/dri/* rwk,

        # System information
        @{V4L_SYS} r,
        /proc/device-tree/** r,
        /proc/cpuinfo r,

        # GPIO for video applications
        @{GPIO} r,
        @{GPIO_EXPORT} w,
        @{GPIO_UNEXPORT} w,

        # Firmware access
        @{RPI_FIRMWARE} r,
        @{RPI_BOOT}/config.txt r,
        @{RPI_BOOT}/cmdline.txt r,
      }
      EOF

          # Профиль для Raspberry Pi GPIO
          cat > "$1/etc/apparmor.d/usr.bin.python3-gpio" << 'EOF'
      # AppArmor profile for Python GPIO access on Raspberry Pi
      # Author: rpi-image-gen apparmor layer

      #include <tunables/global>
      #include <tunables/rpi>

      # Python GPIO programs
      /usr/bin/python* {
        #include <abstractions/base>
        #include <abstractions/python>

        # GPIO access
        @{GPIO} rwk,
        @{GPIO_EXPORT} w,
        @{GPIO_UNEXPORT} w,

        # I2C/SPI for sensors
        @{I2C} rwk,
        @{SPI} rwk,

        # System information
        /proc/cpuinfo r,
        /proc/device-tree/** r,
      }
      EOF

      fi

      # Перезагрузка AppArmor для применения изменений
      chroot "$1" systemctl reload apparmor 2>/dev/null || true

      # Применение новых профилей
      if [ -f "$1/etc/apparmor.d/opt.vc" ]; then
          chroot "$1" apparmor_parser -r "$1/etc/apparmor.d/opt.vc" 2>/dev/null || echo "VideoCore profile parsing failed"
      fi

      if [ -f "$1/etc/apparmor.d/usr.bin.python3-gpio" ]; then
          chroot "$1" apparmor_parser -r "$1/etc/apparmor.d/usr.bin.python3-gpio" 2>/dev/null || echo "GPIO profile parsing failed"
      fi

      # Финальная проверка
      echo "AppArmor configuration completed"
      if chroot "$1" apparmor_status >/dev/null 2>&1; then
          echo "AppArmor is active and loaded"
      else
          echo "AppArmor may not be fully loaded yet (common after first boot)"
      fi
