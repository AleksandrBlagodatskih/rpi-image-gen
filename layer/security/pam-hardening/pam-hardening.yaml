# METABEGIN
# X-Env-Layer-Name: pam-hardening
# X-Env-Layer-Category: security
# X-Env-Layer-Desc: PAM (Pluggable Authentication Modules) security hardening for authentication policies
# X-Env-Layer-Version: 1.0.0
# X-Env-Layer-Requires: locale-base
#
# X-Env-VarPrefix: pam_hardening
#
# X-Env-Var-enable: y
# X-Env-Var-enable-Desc: Enable PAM security hardening
# X-Env-Var-enable-Required: n
# X-Env-Var-enable-Valid: bool
# X-Env-Var-enable-Set: y
#
# X-Env-Var-pwquality_enable: y
# X-Env-Var-pwquality_enable-Desc: Enable pam_pwquality for password strength checking
# X-Env-Var-pwquality_enable-Required: n
# X-Env-Var-pwquality_enable-Valid: bool
# X-Env-Var-pwquality_enable-Set: lazy
#
# X-Env-Var-pwquality_minlen: 14
# X-Env-Var-pwquality_minlen-Desc: Minimum password length
# X-Env-Var-pwquality_minlen-Required: n
# X-Env-Var-pwquality_minlen-Valid: int
# X-Env-Var-pwquality_minlen-Set: lazy
#
# X-Env-Var-pwquality_dcredit: -1
# X-Env-Var-pwquality_dcredit-Desc: Minimum number of digits required
# X-Env-Var-pwquality_dcredit-Required: n
# X-Env-Var-pwquality_dcredit-Valid: int
# X-Env-Var-pwquality_dcredit-Set: lazy
#
# X-Env-Var-pwquality_ucredit: -1
# X-Env-Var-pwquality_ucredit-Desc: Minimum number of uppercase letters required
# X-Env-Var-pwquality_ucredit-Required: n
# X-Env-Var-pwquality_ucredit-Valid: int
# X-Env-Var-pwquality_ucredit-Set: lazy
#
# X-Env-Var-pwquality_lcredit: -1
# X-Env-Var-pwquality_lcredit-Desc: Minimum number of lowercase letters required
# X-Env-Var-pwquality_lcredit-Required: n
# X-Env-Var-pwquality_lcredit-Valid: int
# X-Env-Var-pwquality_lcredit-Set: lazy
#
# X-Env-Var-pwquality_ocredit: -1
# X-Env-Var-pwquality_ocredit-Desc: Minimum number of special characters required
# X-Env-Var-pwquality_ocredit-Required: n
# X-Env-Var-pwquality_ocredit-Valid: int
# X-Env-Var-pwquality_ocredit-Set: lazy
#
# X-Env-Var-pwquality_retry: 3
# X-Env-Var-pwquality_retry-Desc: Number of retries allowed for password entry
# X-Env-Var-pwquality_retry-Required: n
# X-Env-Var-pwquality_retry-Valid: int
# X-Env-Var-pwquality_retry-Set: lazy
#
# X-Env-Var-faillock_enable: y
# X-Env-Var-faillock_enable-Desc: Enable pam_faillock for account lockout on failed attempts
# X-Env-Var-faillock_enable-Required: n
# X-Env-Var-faillock_enable-Valid: bool
# X-Env-Var-faillock_enable-Set: lazy
#
# X-Env-Var-faillock_deny: 5
# X-Env-Var-faillock_deny-Desc: Number of failed attempts before lockout
# X-Env-Var-faillock_deny-Required: n
# X-Env-Var-faillock_deny-Valid: int
# X-Env-Var-faillock_deny-Set: lazy
#
# X-Env-Var-faillock_unlock_time: 900
# X-Env-Var-faillock_unlock_time-Desc: Lockout time in seconds
# X-Env-Var-faillock_unlock_time-Required: n
# X-Env-Var-faillock_unlock_time-Valid: int
# X-Env-Var-faillock_unlock_time-Set: lazy
#
# X-Env-Var-limits_enable: y
# X-Env-Var-limits_enable-Desc: Enable pam_limits for resource limits
# X-Env-Var-limits_enable-Required: n
# X-Env-Var-limits_enable-Valid: bool
# X-Env-Var-limits_enable-Set: lazy
#
# X-Env-Var-tally2_enable: y
# X-Env-Var-tally2_enable-Desc: Enable pam_tally2 for failed login tracking
# X-Env-Var-tally2_enable-Required: n
# X-Env-Var-tally2_enable-Valid: bool
# X-Env-Var-tally2_enable-Set: lazy
#
# X-Env-Var-unix_auth_enable: y
# X-Env-Var-unix_auth_enable-Desc: Enable pam_unix for traditional Unix authentication
# X-Env-Var-unix_auth_enable-Required: n
# X-Env-Var-unix_auth_enable-Valid: bool
# X-Env-Var-unix_auth_enable-Set: lazy
#
# X-Env-Var-shadow_auth: y
# X-Env-Var-shadow_auth-Desc: Use shadow passwords for authentication
# X-Env-Var-shadow_auth-Required: n
# X-Env-Var-shadow_auth-Valid: bool
# X-Env-Var-shadow_auth-Set: lazy
# METAEND
---
mmdebstrap:
  includes:
    - libpam-pwquality
    - libpam-modules
  customize-hooks:
    # Настройка PAM hardening
    - |
      igconf isy IGconf_pam_hardening_enable || exit 0

      echo "Configuring PAM security hardening..."

      # Настройка pam_pwquality для проверки силы паролей
      if igconf isy IGconf_pam_hardening_pwquality_enable; then
        PWQUALITY_CONF="/etc/security/pwquality.conf"

        # Создание базового конфигурационного файла
        cat > "$1$PWQUALITY_CONF" << 'EOF'
# PAM password quality configuration
# Generated by rpi-image-gen pam-hardening layer
# Based on CIS benchmarks

# Minimum password length
minlen = 14

# Password complexity requirements
dcredit = -1    # At least 1 digit
ucredit = -1    # At least 1 uppercase letter
lcredit = -1    # At least 1 lowercase letter
ocredit = -1    # At least 1 special character

# Number of retries allowed
retry = 3

# Prevent simple passwords
dictcheck = 1
usercheck = 1
enforcing = 1

# Maximum password age (days)
maxdays = 90

# Password change warning (days)
warndays = 7
EOF

        # Применение кастомных настроек
        MINLEN=$(igconf getval IGconf_pam_hardening_pwquality_minlen)
        DCREDIT=$(igconf getval IGconf_pam_hardening_pwquality_dcredit)
        UCREDIT=$(igconf getval IGconf_pam_hardening_pwquality_ucredit)
        LCREDIT=$(igconf getval IGconf_pam_hardening_pwquality_lcredit)
        OCREDIT=$(igconf getval IGconf_pam_hardening_pwquality_ocredit)
        RETRY=$(igconf getval IGconf_pam_hardening_pwquality_retry)

        echo "Setting pwquality parameters: minlen=$MINLEN, dcredit=$DCREDIT, ucredit=$UCREDIT, lcredit=$LCREDIT, ocredit=$OCREDIT, retry=$RETRY"

        chroot "$1" sed -i "s|^minlen = 14|minlen = $MINLEN|" "$PWQUALITY_CONF"
        chroot "$1" sed -i "s|^dcredit = -1|dcredit = $DCREDIT|" "$PWQUALITY_CONF"
        chroot "$1" sed -i "s|^ucredit = -1|ucredit = $UCREDIT|" "$PWQUALITY_CONF"
        chroot "$1" sed -i "s|^lcredit = -1|lcredit = $LCREDIT|" "$PWQUALITY_CONF"
        chroot "$1" sed -i "s|^ocredit = -1|ocredit = $OCREDIT|" "$PWQUALITY_CONF"
        chroot "$1" sed -i "s|^retry = 3|retry = $RETRY|" "$PWQUALITY_CONF"

        echo "PAM pwquality configured successfully"
      fi

      # Настройка pam_faillock для блокировки аккаунтов
      if igconf isy IGconf_pam_hardening_faillock_enable; then
        FAILLOCK_CONF="/etc/security/faillock.conf"

        # Создание конфигурационного файла faillock
        cat > "$1$FAILLOCK_CONF" << 'EOF'
# PAM faillock configuration
# Generated by rpi-image-gen pam-hardening layer

# Deny access after failed attempts
deny = 5

# Unlock time (seconds)
unlock_time = 900

# Don't reset count on successful login
reset

# Show failed attempts
show_failed_attempts
EOF

        # Применение кастомных настроек
        DENY=$(igconf getval IGconf_pam_hardening_faillock_deny)
        UNLOCK_TIME=$(igconf getval IGconf_pam_hardening_faillock_unlock_time)

        echo "Setting faillock parameters: deny=$DENY, unlock_time=$UNLOCK_TIME"

        chroot "$1" sed -i "s|^deny = 5|deny = $DENY|" "$FAILLOCK_CONF"
        chroot "$1" sed -i "s|^unlock_time = 900|unlock_time = $UNLOCK_TIME|" "$FAILLOCK_CONF"

        echo "PAM faillock configured successfully"
      fi

      # Настройка PAM для common-password
      COMMON_PASSWORD="/etc/pam.d/common-password"
      if [ -f "$1$COMMON_PASSWORD" ]; then
        # Добавление pam_pwquality если включено
        if igconf isy IGconf_pam_hardening_pwquality_enable; then
          if ! grep -q "pam_pwquality.so" "$1$COMMON_PASSWORD"; then
            chroot "$1" sed -i '1i password\trequisite\t\t\tpam_pwquality.so retry=3' "$COMMON_PASSWORD"
            echo "Added pam_pwquality to common-password"
          fi
        fi

        # Добавление pam_faillock если включено
        if igconf isy IGconf_pam_hardening_faillock_enable; then
          if ! grep -q "pam_faillock.so" "$1$COMMON_PASSWORD"; then
            # Добавляем faillock перед pam_unix
            chroot "$1" sed -i '/pam_unix.so/ i auth\trequired\t\t\tpam_faillock.so preauth' "$COMMON_PASSWORD"
            chroot "$1" sed -i '/pam_unix.so/ a auth\t[success=1 default=bad]\tpam_faillock.so authfail' "$COMMON_PASSWORD"
            chroot "$1" sed -i '/pam_unix.so/ a auth\tsufficient\t\t\tpam_faillock.so authsucc' "$COMMON_PASSWORD"
            echo "Added pam_faillock to common-password"
          fi
        fi
      fi

      # Настройка PAM для common-auth
      COMMON_AUTH="/etc/pam.d/common-auth"
      if [ -f "$1$COMMON_AUTH" ]; then
        # Добавление pam_faillock в common-auth
        if igconf isy IGconf_pam_hardening_faillock_enable; then
          if ! grep -q "pam_faillock.so" "$1$COMMON_AUTH"; then
            chroot "$1" sed -i '1i auth\trequired\t\t\tpam_faillock.so' "$COMMON_AUTH"
            echo "Added pam_faillock to common-auth"
          fi
        fi
      fi

      # Настройка PAM для common-account
      COMMON_ACCOUNT="/etc/pam.d/common-account"
      if [ -f "$1$COMMON_ACCOUNT" ]; then
        # Добавление pam_faillock в common-account
        if igconf isy IGconf_pam_hardening_faillock_enable; then
          if ! grep -q "pam_faillock.so" "$1$COMMON_ACCOUNT"; then
            chroot "$1" sed -i '1i account\trequired\t\t\tpam_faillock.so' "$COMMON_ACCOUNT"
            echo "Added pam_faillock to common-account"
          fi
        fi
      fi

      # Настройка PAM limits если включено
      if igconf isy IGconf_pam_hardening_limits_enable; then
        COMMON_SESSION="/etc/pam.d/common-session"
        if [ -f "$1$COMMON_SESSION" ]; then
          if ! grep -q "pam_limits.so" "$1$COMMON_SESSION"; then
            chroot "$1" sed -i '1i session\trequired\t\t\tpam_limits.so' "$COMMON_SESSION"
            echo "Added pam_limits to common-session"
          fi
        fi
      fi

      # Настройка PAM для common-session-noninteractive
      COMMON_SESSION_NI="/etc/pam.d/common-session-noninteractive"
      if [ -f "$1$COMMON_SESSION_NI" ]; then
        if igconf isy IGconf_pam_hardening_limits_enable; then
          if ! grep -q "pam_limits.so" "$1$COMMON_SESSION_NI"; then
            chroot "$1" sed -i '1i session\trequired\t\t\tpam_limits.so' "$COMMON_SESSION_NI"
            echo "Added pam_limits to common-session-noninteractive"
          fi
        fi
      fi

      # Настройка pam_tally2 если включено
      if igconf isy IGconf_pam_hardening_tally2_enable; then
        TALLY2_CONF="/etc/security/pam_tally2.conf"
        cat > "$1$TALLY2_CONF" << 'EOF'
# PAM tally2 configuration
# Generated by rpi-image-gen pam-hardening layer

# File to store tally data
file = /var/log/tallylog

# Lock account after this many failures
deny = 3

# Reset count on successful login
reset

# Unlock time (seconds)
unlock_time = 600
EOF
        echo "Created pam_tally2 configuration"
      fi

      # Настройка shadow passwords если включено
      if igconf isy IGconf_pam_hardening_shadow_auth; then
        # Убеждаемся что shadow используется
        if [ -f "$1/etc/shadow" ] && [ -f "$1/etc/passwd" ]; then
          # Проверяем что пароли в shadow
          if ! chroot "$1" pwck -q /etc/passwd /etc/shadow; then
            echo "Warning: Shadow password check failed, but continuing"
          fi
        fi
      fi

      # Проверка PAM конфигурации
      echo "Verifying PAM configuration..."
      chroot "$1" pam_tally2 --help >/dev/null 2>&1 || echo "pam_tally2 not available"
      chroot "$1" faillock --help >/dev/null 2>&1 || echo "faillock not available"

      echo "PAM security hardening completed successfully"
