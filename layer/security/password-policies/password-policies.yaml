# METABEGIN
# X-Env-Layer-Name: password-policies
# X-Env-Layer-Category: security
# X-Env-Layer-Desc: Password aging and account security policies for user accounts
# X-Env-Layer-Version: 1.0.0
# X-Env-Layer-Requires: locale-base
#
# X-Env-VarPrefix: password_policies
#
# X-Env-Var-enable: y
# X-Env-Var-enable-Desc: Enable password aging and account security policies
# X-Env-Var-enable-Required: n
# X-Env-Var-enable-Valid: bool
# X-Env-Var-enable-Set: y
#
# X-Env-Var-pass_max_days: 90
# X-Env-Var-pass_max_days-Desc: Maximum password age in days
# X-Env-Var-pass_max_days-Required: n
# X-Env-Var-pass_max_days-Valid: int
# X-Env-Var-pass_max_days-Set: lazy
#
# X-Env-Var-pass_min_days: 7
# X-Env-Var-pass_min_days-Desc: Minimum days between password changes
# X-Env-Var-pass_min_days-Required: n
# X-Env-Var-pass_min_days-Valid: int
# X-Env-Var-pass_min_days-Set: lazy
#
# X-Env-Var-pass_warn_age: 7
# X-Env-Var-pass_warn_age-Desc: Days before password expires to warn user
# X-Env-Var-pass_warn_age-Required: n
# X-Env-Var-pass_warn_age-Valid: int
# X-Env-Var-pass_warn_age-Set: lazy
#
# X-Env-Var-inactive: 30
# X-Env-Var-inactive-Desc: Days after password expires before account is locked
# X-Env-Var-inactive-Required: n
# X-Env-Var-inactive-Valid: int
# X-Env-Var-inactive-Set: lazy
#
# X-Env-Var-account_expiry: 365
# X-Env-Var-account_expiry-Desc: Account expiry in days (0 = never expire)
# X-Env-Var-account_expiry-Required: n
# X-Env-Var-account_expiry-Valid: int
# X-Env-Var-account_expiry-Set: lazy
#
# X-Env-Var-root_password_expiry: 0
# X-Env-Var-root_password_expiry-Desc: Root password expiry (0 = never expire)
# X-Env-Var-root_password_expiry-Required: n
# X-Env-Var-root_password_expiry-Valid: int
# X-Env-Var-root_password_expiry-Set: lazy
#
# X-Env-Var-lock_inactive_users: y
# X-Env-Var-lock_inactive_users-Desc: Lock accounts of inactive users
# X-Env-Var-lock_inactive_users-Required: n
# X-Env-Var-lock_inactive_users-Valid: bool
# X-Env-Var-lock_inactive_users-Set: lazy
#
# X-Env-Var-password_history_remember: 5
# X-Env-Var-password_history_remember-Desc: Number of old passwords to remember (prevent reuse)
# X-Env-Var-password_history_remember-Required: n
# X-Env-Var-password_history_remember-Valid: int
# X-Env-Var-password_history_remember-Set: lazy
#
# X-Env-Var-password_consecutive_characters: 3
# X-Env-Var-password_consecutive_characters-Desc: Maximum consecutive characters from same class
# X-Env-Var-password_consecutive_characters-Required: n
# X-Env-Var-password_consecutive_characters-Valid: int
# X-Env-Var-password_consecutive_characters-Set: lazy
#
# X-Env-Var-password_max_sequential_characters: 3
# X-Env-Var-password_max_sequential_characters-Desc: Maximum sequential characters (123, abc)
# X-Env-Var-password_max_sequential_characters-Required: n
# X-Env-Var-password_max_sequential_characters-Valid: int
# X-Env-Var-password_max_sequential_characters-Set: lazy
#
# X-Env-Var-password_last_change_past: 30
# X-Env-Var-password_last_change_past-Desc: Days since last password change to force change
# X-Env-Var-password_last_change_past-Required: n
# X-Env-Var-password_last_change_past-Valid: int
# X-Env-Var-password_last_change_past-Set: lazy
#
# X-Env-Var-password_failed_lockout: 5
# X-Env-Var-password_failed_lockout-Desc: Failed login attempts before temporary lockout
# X-Env-Var-password_failed_lockout-Required: n
# X-Env-Var-password_failed_lockout-Valid: int
# X-Env-Var-password_failed_lockout-Set: lazy
#
# X-Env-Var-password_unlock_time: 600
# X-Env-Var-password_unlock_time-Desc: Lockout time in seconds after failed attempts
# X-Env-Var-password_unlock_time-Required: n
# X-Env-Var-password_unlock_time-Valid: int
# X-Env-Var-password_unlock_time-Set: lazy
# METAEND
---
mmdebstrap:
  includes:
    - login
    - passwd
  customize-hooks:
    # Настройка политик паролей и старения учетных записей
    - |
      igconf isy IGconf_password_policies_enable || exit 0

      echo "Configuring password aging and account security policies..."

      # Настройка глобальных политик паролей в login.defs
      LOGIN_DEFS="/etc/login.defs"

      # Применение настроек старения паролей
      PASS_MAX_DAYS=$(igconf getval IGconf_password_policies_pass_max_days)
      PASS_MIN_DAYS=$(igconf getval IGconf_password_policies_pass_min_days)
      PASS_WARN_AGE=$(igconf getval IGconf_password_policies_pass_warn_age)
      INACTIVE=$(igconf getval IGconf_password_policies_inactive)
      ACCOUNT_EXPIRY=$(igconf getval IGconf_password_policies_account_expiry)
      ROOT_PASSWORD_EXPIRY=$(igconf getval IGconf_password_policies_root_password_expiry)

      echo "Setting password aging: max_days=$PASS_MAX_DAYS, min_days=$PASS_MIN_DAYS, warn_age=$PASS_WARN_AGE"

      chroot "$1" sed -i "s|^PASS_MAX_DAYS.*|PASS_MAX_DAYS\t$PASS_MAX_DAYS|" "$LOGIN_DEFS"
      chroot "$1" sed -i "s|^PASS_MIN_DAYS.*|PASS_MIN_DAYS\t$PASS_MIN_DAYS|" "$LOGIN_DEFS"
      chroot "$1" sed -i "s|^PASS_WARN_AGE.*|PASS_WARN_AGE\t$PASS_WARN_AGE|" "$LOGIN_DEFS"

      # Настройка для root пользователя
      if [ "$ROOT_PASSWORD_EXPIRY" -gt 0 ]; then
        chroot "$1" chage -M "$ROOT_PASSWORD_EXPIRY" root
        echo "Set root password expiry to $ROOT_PASSWORD_EXPIRY days"
      else
        chroot "$1" chage -M 99999 root
        echo "Root password never expires"
      fi

      # Настройка блокировки неактивных пользователей
      if igconf isy IGconf_password_policies_lock_inactive_users; then
        echo "Enabling inactive user account locking"
        # Создание скрипта для ежедневной проверки неактивных пользователей
        cat > "$1/usr/local/bin/lock-inactive-users" << 'EOF'
#!/bin/bash
# Lock inactive user accounts
# Generated by rpi-image-gen password-policies layer

# Lock accounts that haven't been used for more than 30 days
for user in $(awk -F: '$2 != "!" && $2 != "*" {print $1}' /etc/shadow); do
    last_login=$(chage -l "$user" | grep "Last password change" | cut -d: -f2 | sed 's/^ *//')
    if [ "$last_login" = "never" ]; then
        continue
    fi

    days_since_change=$(($(date +%s) - $(date -d "$last_login" +%s))) / 86400

    if [ "$days_since_change" -gt 30 ]; then
        usermod -L "$user"
        echo "Locked inactive user: $user (last change: $last_login)"
    fi
done
EOF
        chmod +x "$1/usr/local/bin/lock-inactive-users"

        # Добавление в cron для ежедневного запуска
        echo "0 2 * * * root /usr/local/bin/lock-inactive-users" >> "$1/etc/crontab"
        echo "Added daily check for inactive users"
      fi

      # Настройка истории паролей (если поддерживается)
      HISTORY_REMEMBER=$(igconf getval IGconf_password_policies_password_history_remember)
      if [ "$HISTORY_REMEMBER" -gt 0 ]; then
        # Создание конфигурации для pam_pwhistory
        PWHISTORY_CONF="/etc/security/pwhistory.conf"
        cat > "$1$PWHISTORY_CONF" << EOF
# Password history configuration
# Generated by rpi-image-gen password-policies layer

# Remember last passwords
remember = $HISTORY_REMEMBER

# Enforce history checking
enforce_for_root

# File to store password history
file = /etc/security/opasswd
EOF
        echo "Password history configured to remember $HISTORY_REMEMBER passwords"
      fi

      # Настройка дополнительных проверок паролей
      CONSECUTIVE=$(igconf getval IGconf_password_policies_password_consecutive_characters)
      MAX_SEQUENTIAL=$(igconf getval IGconf_password_policies_password_max_sequential_characters)
      LAST_CHANGE=$(igconf getval IGconf_password_policies_password_last_change_past)
      FAILED_LOCKOUT=$(igconf getval IGconf_password_policies_password_failed_lockout)
      UNLOCK_TIME=$(igconf getval IGconf_password_policies_password_unlock_time)

      # Создание конфигурации для дополнительных проверок
      PASSWORD_CONF="/etc/security/password.conf"
      cat > "$1$PASSWORD_CONF" << EOF
# Additional password security configuration
# Generated by rpi-image-gen password-policies layer

# Maximum consecutive characters from same class
max_consecutive = $CONSECUTIVE

# Maximum sequential characters (123, abc)
max_sequential = $MAX_SEQUENTIAL

# Force password change if last change was more than N days ago
force_change_past_days = $LAST_CHANGE

# Failed login lockout
failed_lockout_attempts = $FAILED_LOCKOUT
failed_lockout_time = $UNLOCK_TIME
EOF

      # Применение политик к существующим пользователям
      echo "Applying password policies to existing users..."

      # Получение списка пользователей (исключая системные)
      for user in $(chroot "$1" awk -F: '$3 >= 1000 && $3 < 65534 {print $1}' /etc/passwd); do
        # Пропускаем root если не указано иное
        [ "$user" = "root" ] && [ "$ROOT_PASSWORD_EXPIRY" -eq 0 ] && continue

        echo "Setting password policies for user: $user"

        # Установка максимального возраста пароля
        chroot "$1" chage -M "$PASS_MAX_DAYS" "$user"

        # Установка минимального возраста пароля
        chroot "$1" chage -m "$PASS_MIN_DAYS" "$user"

        # Установка предупреждения
        chroot "$1" chage -W "$PASS_WARN_AGE" "$user"

        # Установка срока действия аккаунта
        if [ "$ACCOUNT_EXPIRY" -gt 0 ]; then
          expiry_date=$(date -d "+$ACCOUNT_EXPIRY days" +%Y-%m-%d)
          chroot "$1" chage -E "$expiry_date" "$user"
        fi

        # Установка неактивного периода
        chroot "$1" chage -I "$INACTIVE" "$user"
      done

      # Проверка настроек
      echo "Verifying password policies..."
      chroot "$1" chage -l root || echo "Warning: chage command not available"

      echo "Password aging and account security policies configured successfully"
