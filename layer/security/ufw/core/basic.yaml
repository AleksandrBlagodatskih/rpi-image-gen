# METABEGIN
# X-Env-Layer-Name: ufw-core-basic
# X-Env-Layer-Category: extension
# X-Env-Layer-Desc: Basic UFW firewall configuration with core policies
# X-Env-Layer-Version: 2.0.0
# X-Env-Layer-Requires: locale-base
# X-Env-Layer-Provides: firewall-basic
# X-Env-VarPrefix: ufw
# X-Env-Var-enable: y
# X-Env-Var-enable-Desc: Enable UFW firewall core functionality
# X-Env-Var-enable-Required: n
# X-Env-Var-enable-Set: immediate
# X-Env-Var-default_input_policy: DROP
# X-Env-Var-default_input_policy-Desc: Default input policy (ACCEPT/DROP/REJECT)
# X-Env-Var-default_input_policy-Required: n
# X-Env-Var-default_input_policy-Valid: ACCEPT,DROP,REJECT
# X-Env-Var-default_input_policy-Set: lazy
# X-Env-Var-default_output_policy: ACCEPT
# X-Env-Var-default_output_policy-Desc: Default output policy (ACCEPT/DROP/REJECT)
# X-Env-Var-default_output_policy-Required: n
# X-Env-Var-default_output_policy-Valid: ACCEPT,DROP,REJECT
# X-Env-Var-default_output_policy-Set: lazy
# X-Env-Var-default_forward_policy: DROP
# X-Env-Var-default_forward_policy-Desc: Default forward policy (ACCEPT/DROP/REJECT)
# X-Env-Var-default_forward_policy-Required: n
# X-Env-Var-default_forward_policy-Valid: ACCEPT,DROP,REJECT
# X-Env-Var-default_forward_policy-Set: lazy
# X-Env-Var-allow_ssh: n
# X-Env-Var-allow_ssh-Desc: Allow SSH access from anywhere (not recommended for security)
# X-Env-Var-allow_ssh-Required: n
# X-Env-Var-allow_ssh-Valid: bool
# X-Env-Var-allow_ssh-Set: lazy
#
# X-Env-Var-ssh_allowed_ips: ""
# X-Env-Var-ssh_allowed_ips-Desc: Comma-separated list of IP addresses/networks allowed SSH access
# X-Env-Var-ssh_allowed_ips-Required: n
# X-Env-Var-ssh_allowed_ips-Valid: string
# X-Env-Var-ssh_allowed_ips-Set: lazy
# X-Env-Var-allow_http: n
# X-Env-Var-allow_http-Desc: Allow HTTP access from anywhere
# X-Env-Var-allow_http-Required: n
# X-Env-Var-allow_http-Valid: bool
# X-Env-Var-allow_http-Set: lazy
# X-Env-Var-allow_https: n
# X-Env-Var-allow_https-Desc: Allow HTTPS access from anywhere
# X-Env-Var-allow_https-Required: n
# X-Env-Var-allow_https-Valid: bool
# X-Env-Var-allow_https-Set: lazy
# X-Env-Var-logging_level: low
# X-Env-Var-logging_level-Desc: UFW logging level (off/low/medium/high/full)
# X-Env-Var-logging_level-Required: n
# X-Env-Var-logging_level-Valid: off,low,medium,high,full
# X-Env-Var-logging_level-Set: lazy
# X-Env-Var-rate_limit: y
# X-Env-Var-rate_limit-Desc: Enable rate limiting for new connections
# X-Env-Var-rate_limit-Required: n
# X-Env-Var-rate_limit-Valid: bool
# X-Env-Var-rate_limit-Set: lazy
# X-Env-Var-ipv6_enable: y
# X-Env-Var-ipv6_enable-Desc: Enable IPv6 support in UFW
# X-Env-Var-ipv6_enable-Required: n
# X-Env-Var-ipv6_enable-Valid: bool
# X-Env-Var-ipv6_enable-Set: lazy
# X-Env-Var-apply_rules: n
# X-Env-Var-apply_rules-Desc: Apply firewall rules during build (dangerous, use post-build)
# X-Env-Var-apply_rules-Required: n
# X-Env-Var-apply_rules-Valid: bool
# X-Env-Var-apply_rules-Set: immediate
# METAEND
---
mmdebstrap:
  includes:
    - ufw
    - curl
    - wget
  customize-hooks:
    - |
      # PHASE 0: Enable check
      if [ "${IGconf_ufw_enable:-n}" != "y" ]; then
        echo "🛡️ UFW disabled by configuration"
        exit 0
      fi

      echo "🛡️ Installing UFW firewall basic configuration..."

      # PHASE 1: Validation
      echo "🔍 Validating UFW installation..."

      # Check that ufw is installed
      if ! chroot "$1" dpkg -l ufw | grep -q "^ii"; then
        echo "❌ ERROR: ufw package not installed"
        exit 1
      fi

      # Check for required commands
      for cmd in ufw systemctl; do
        if ! chroot "$1" command -v "$cmd" >/dev/null 2>&1; then
          echo "❌ ERROR: $cmd not available in chroot"
          exit 1
        fi
      done

      echo "✅ UFW validated successfully"


      # PHASE 3: Core Configuration
      echo "🔧 Configuring UFW basic settings..."

      # Main configuration file
      LOGLEVEL=$(igconf getval IGconf_ufw_logging_level)
      install -m 644 "templates/security/ufw/ufw.conf" "$1/etc/ufw/ufw.conf"

      # Default policies configuration
      INPUT_POLICY=$(igconf getval IGconf_ufw_default_input_policy)
      OUTPUT_POLICY=$(igconf getval IGconf_ufw_default_output_policy)
      FORWARD_POLICY=$(igconf getval IGconf_ufw_default_forward_policy)
      IPV6_ENABLE=$(igconf isy IGconf_ufw_ipv6_enable && echo "yes" || echo "no")

      install -m 644 "templates/security/ufw/ufw" "$1/etc/default/ufw"

      echo "✅ UFW default policies configured:"
      echo "   Input: ${INPUT_POLICY}, Output: ${OUTPUT_POLICY}, Forward: ${FORWARD_POLICY}"
      echo "   IPv6: ${IPV6_ENABLE}, Logging: ${LOGLEVEL}"

      echo ""
      echo "✅ UFW firewall basic configuration completed!"
  rootfs-overlay:
    usr/local/bin/ufw-status: |
      #!/bin/bash
      # UFW Status Script
      # Provides comprehensive status information about UFW firewall

      echo "=== UFW Firewall Status ==="
      echo

      # Check if UFW is installed
      echo "1. UFW Installation:"
      if command -v ufw >/dev/null 2>&1; then
          ufw_version=$(ufw --version 2>/dev/null | head -1 | awk '{print $2}')
          echo "   ✅ UFW installed: $ufw_version"
      else
          echo "   ❌ UFW not installed"
          exit 1
      fi

      # Check UFW service
      echo
      echo "2. UFW Service:"
      if systemctl is-active --quiet ufw 2>/dev/null; then
          echo "   ✅ UFW service is active"
      else
          echo "   ⚠️ UFW service not active"
      fi

      # Check UFW status
      echo
      echo "3. Firewall Status:"
      ufw_status=$(ufw status 2>/dev/null | head -1)
      if echo "$ufw_status" | grep -q "active\|inactive"; then
          echo "   🔥 Status: $ufw_status"
      else
          echo "   ❓ Status: unknown"
      fi

      # Check configuration files
      echo
      echo "4. Configuration Files:"
      config_files=(
          "/etc/ufw/ufw.conf"
          "/etc/default/ufw"
          "/etc/ufw/before.rules"
          "/etc/ufw/after.rules"
      )

      for file in "${config_files[@]}"; do
          if [[ -f "$file" ]]; then
              echo "   ✅ $file exists"
          else
              echo "   ❌ $file missing"
          fi
      done

      # Check default policies
      echo
      echo "5. Default Policies:"
      if [[ -f /etc/default/ufw ]]; then
          default_input=$(grep "^DEFAULT_INPUT_POLICY" /etc/default/ufw | cut -d'"' -f2)
          default_output=$(grep "^DEFAULT_OUTPUT_POLICY" /etc/default/ufw | cut -d'"' -f2)
          default_forward=$(grep "^DEFAULT_FORWARD_POLICY" /etc/default/ufw | cut -d'"' -f2)

          echo "   📥 Input: ${default_input:-unknown}"
          echo "   📤 Output: ${default_output:-unknown}"
          echo "   🔄 Forward: ${default_forward:-unknown}"
      fi

      # Check active rules
      echo
      echo "6. Active Rules:"
      if command -v ufw >/dev/null 2>&1; then
          rule_count=$(ufw status numbered 2>/dev/null | grep -c "^\[" || echo "0")
          if [[ "$rule_count" -gt 0 ]]; then
              echo "   📋 Total rules: $rule_count"
              echo "   📋 Sample rules:"
              ufw status numbered 2>/dev/null | head -5 | sed 's/^/      /'
          else
              echo "   ⚠️ No active rules"
          fi
      fi

      # Check logging
      echo
      echo "7. Logging Configuration:"
      if [[ -f /etc/ufw/ufw.conf ]]; then
          loglevel=$(grep "^LOGLEVEL" /etc/ufw/ufw.conf | cut -d'"' -f2)
          echo "   📊 Log level: ${loglevel:-unknown}"
      fi

      # Check IPv6 support
      echo
      echo "8. IPv6 Support:"
      if [[ -f /etc/default/ufw ]]; then
          ipv6=$(grep "^IPV6" /etc/default/ufw | cut -d'=' -f2 | tr -d '"')
          if [[ "$ipv6" = "yes" ]]; then
              echo "   ✅ IPv6 support enabled"
          else
              echo "   ❌ IPv6 support disabled"
          fi
      fi

      # Check recent activity
      echo
      echo "9. Recent Activity:"
      if [[ -f /var/log/ufw.log ]]; then
          recent_entries=$(tail -20 /var/log/ufw.log 2>/dev/null | grep -c "UFW" || echo "0")
          echo "   📈 Recent log entries: $recent_entries"

          if [[ "$recent_entries" -gt 0 ]]; then
              echo "   📋 Last blocked attempts:"
              tail -5 /var/log/ufw.log 2>/dev/null | grep "UFW BLOCK" | tail -3 | sed 's/^/      /' || true
          fi
      else
          echo "   📭 No UFW log file found"
      fi

      echo
      echo "=== Recommendations ==="
      echo "• Check detailed status: ufw status verbose"
      echo "• View numbered rules: ufw status numbered"
      echo "• Monitor logs: tail -f /var/log/ufw.log"
      echo "• Test rules: ufw allow from <ip> to any port <port>"
      echo "• Reload after changes: ufw reload"
    etc/profile.d/ufw-status.sh: |
      # UFW status profile for bash
      # This file is sourced by /etc/profile.d/ to show UFW status on login

      # Only show status if running interactively and not in scripts
      if [[ $- == *i* ]] && [ -z "${UFW_STATUS_SHOWN:-}" ]; then
          export UFW_STATUS_SHOWN=1

          # Check if UFW is available and active
          if command -v ufw >/dev/null 2>&1 && systemctl is-active --quiet ufw 2>/dev/null; then
              echo "🛡️ UFW Status:"
              ufw_status=$(ufw status 2>/dev/null | head -1)
              if echo "$ufw_status" | grep -q "active"; then
                  rule_count=$(ufw status numbered 2>/dev/null | grep -c "^\[" || echo "0")
                  echo "   🔥 Active: $rule_count rules"
              else
                  echo "   💤 Inactive"
              fi

              echo
          fi
      fi
