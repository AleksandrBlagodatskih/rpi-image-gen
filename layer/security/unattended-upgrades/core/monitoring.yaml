# METABEGIN
# X-Env-Layer-Name: unattended-upgrades-core-monitoring
# X-Env-Layer-Category: extension
# X-Env-Layer-Desc: Monitoring and alerting system for unattended-upgrades activities
# X-Env-Layer-Version: 2.0.0
# X-Env-Layer-Requires: unattended-upgrades-core-basic
# X-Env-Layer-Provides: package-updates-monitoring
# X-Env-VarPrefix: unattended
# X-Env-Var-monitoring: y
# X-Env-Var-monitoring-Desc: Enable monitoring and alerting for upgrade activities
# X-Env-Var-monitoring-Required: false
# X-Env-Var-monitoring-Valid: bool
# X-Env-Var-monitoring-Set: lazy
# METAEND
---
mmdebstrap:
  customize-hooks:
    - |
      # PHASE 0: Enable check
      igconf isy IGconf_unattended_monitoring || exit 0

      echo "üëÅÔ∏è Installing unattended-upgrades monitoring..."

      # Monitoring and alerting
      echo "üëÅÔ∏è Setting up upgrade monitoring..."

      # Add to cron for periodic monitoring
      echo "0 */6 * * * root /usr/local/bin/unattended-upgrades-monitor" >> "$1/etc/crontab"
      echo "‚úÖ Upgrade monitoring configured (runs every 6 hours)"

      # PHASE 10: Final validation and testing
      echo "üîç Running final validation..."

      # Test configuration syntax
      if chroot "$1" unattended-upgrade --dry-run >/dev/null 2>&1; then
        echo "‚úÖ Configuration syntax is valid"
      else
        echo "‚ö†Ô∏è Configuration syntax issues detected (may be normal for build environment)"
      fi

      # Test monitoring if enabled
      if igconf isy IGconf_unattended_monitoring && [ -f "$1/usr/local/bin/unattended-upgrades-monitor" ]; then
        if chroot "$1" /usr/local/bin/unattended-upgrades-monitor >/dev/null 2>&1; then
          echo "‚úÖ Monitoring script functional"
        else
          echo "‚ö†Ô∏è Monitoring script may have issues"
        fi
      fi

      echo ""
      echo "‚úÖ Unattended-upgrades monitoring completed!"
      echo "   Status check: unattended-upgrades-status"
      echo "   View alerts: tail -f /var/log/unattended-upgrades-alerts.log"
      echo "   Monitor logs: tail -f /var/log/unattended-upgrades-security.log"
  rootfs-overlay:
    usr/local/bin/unattended-upgrades-monitor: |
      #!/bin/bash
      # Unattended Upgrades Monitor Script
      # This script monitors unattended upgrades and sends notifications

      set -euo pipefail

      LOG_FILE="/var/log/unattended-upgrades/monitor.log"
      TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

      echo "[$TIMESTAMP] Running unattended upgrades monitor" >> "$LOG_FILE"

      # Check if unattended-upgrades ran recently
      if [ -f /var/log/unattended-upgrades/unattended-upgrades.log ]; then
          # Get last run time
          last_run=$(grep "Starting unattended upgrades" /var/log/unattended-upgrades/unattended-upgrades.log 2>/dev/null | tail -1 | cut -d' ' -f1-3 || echo "")

          if [ -n "$last_run" ]; then
              echo "[$TIMESTAMP] Last unattended upgrades run: $last_run" >> "$LOG_FILE"

              # Check for errors in the last run
              errors=$(grep -A5 -B5 "ERROR" /var/log/unattended-upgrades/unattended-upgrades.log 2>/dev/null | tail -20 || echo "")
              if [ -n "$errors" ]; then
                  echo "[$TIMESTAMP] ERRORS found in last run:" >> "$LOG_FILE"
                  echo "$errors" >> "$LOG_FILE"

                  # Send notification if available
                  if command -v wall >/dev/null 2>&1; then
                      echo "Unattended upgrades encountered errors. Check /var/log/unattended-upgrades/unattended-upgrades.log" | wall
                  fi
              fi

              # Check for successful upgrades
              upgraded_packages=$(grep "Packages that were upgraded:" /var/log/unattended-upgrades/unattended-upgrades.log 2>/dev/null | tail -1 || echo "")
              if [ -n "$upgraded_packages" ]; then
                  echo "[$TIMESTAMP] Packages upgraded: $upgraded_packages" >> "$LOG_FILE"
              fi
          fi
      fi

      # Check system status after upgrades
      echo "[$TIMESTAMP] Checking system status..." >> "$LOG_FILE"

      # Check for broken packages
      if command -v dpkg >/dev/null 2>&1; then
          broken_packages=$(dpkg -l | grep -c "^[a-zA-Z][^ ]* [^ ]* [^ ]* [^ ]*$" || echo "0")
          if [ "$broken_packages" -gt 0 ]; then
              echo "[$TIMESTAMP] WARNING: $broken_packages broken packages detected" >> "$LOG_FILE"
          fi
      fi

      # Check disk space
      disk_usage=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
      if [ "$disk_usage" -gt 90 ]; then
          echo "[$TIMESTAMP] WARNING: Root filesystem $disk_usage% full" >> "$LOG_FILE"
      fi

      echo "[$TIMESTAMP] Monitor check completed" >> "$LOG_FILE"
    usr/local/bin/unattended-upgrades-status: |
      #!/bin/bash
      # Unattended Upgrades Status Script
      # Provides comprehensive status information about unattended upgrades

      echo "=== Unattended Upgrades Status ==="
      echo

      # Check if unattended-upgrades is installed
      echo "1. Package Status:"
      if dpkg -l | grep -q unattended-upgrades; then
          echo "   ‚úÖ unattended-upgrades package installed"
      else
          echo "   ‚ùå unattended-upgrades package not installed"
      fi

      # Check service status
      echo
      echo "2. Service Status:"
      if systemctl is-active --quiet unattended-upgrades 2>/dev/null; then
          echo "   ‚úÖ unattended-upgrades service is active"
      else
          echo "   ‚ö†Ô∏è  unattended-upgrades service is not active"
      fi

      if systemctl is-enabled unattended-upgrades >/dev/null 2>&1 2>/dev/null; then
          echo "   ‚úÖ unattended-upgrades enabled on boot"
      else
          echo "   ‚ö†Ô∏è  unattended-upgrades not enabled on boot"
      fi

      # Check timer status
      echo
      echo "3. Timer Status:"
      if systemctl is-active --quiet unattended-upgrades.timer 2>/dev/null; then
          echo "   ‚úÖ unattended-upgrades.timer is active"
      else
          echo "   ‚ö†Ô∏è  unattended-upgrades.timer is not active"
      fi

      # Check configuration
      echo
      echo "4. Configuration:"
      config_file="/etc/apt/apt.conf.d/50unattended-upgrades"
      if [ -f "$config_file" ]; then
          echo "   ‚úÖ Main config exists: $config_file"

          # Check if unattended upgrades are enabled
          if grep -q "Unattended-Upgrade::Update-Package-Lists" "$config_file" 2>/dev/null; then
              echo "   ‚úÖ Package list updates enabled"
          fi

          if grep -q "Unattended-Upgrade::Unattended-Upgrade" "$config_file" 2>/dev/null; then
              echo "   ‚úÖ Unattended upgrades enabled"
          fi
      else
          echo "   ‚ùå Main config not found"
      fi

      # Check custom configurations
      echo
      echo "5. Custom Configurations:"
      custom_configs=(
          "/etc/apt/apt.conf.d/97unattended-upgrades-distrobox"
          "/etc/apt/apt.conf.d/98unattended-upgrades-ssh"
          "/etc/apt/apt.conf.d/99unattended-upgrades-docker"
      )

      for config in "${custom_configs[@]}"; do
          if [ -f "$config" ]; then
              echo "   ‚úÖ $config exists"
          else
              echo "   ‚ö†Ô∏è  $config not found"
          fi
      done

      # Check log files
      echo
      echo "6. Log Files:"
      log_files=(
          "/var/log/unattended-upgrades/unattended-upgrades.log"
          "/var/log/unattended-upgrades/unattended-upgrades-shutdown.log"
      )

      for log in "${log_files[@]}"; do
          if [ -f "$log" ]; then
              size=$(du -h "$log" 2>/dev/null | cut -f1)
              echo "   ‚úÖ $log exists (size: $size)"
          else
              echo "   ‚ö†Ô∏è  $log not found"
          fi
      done

      # Check recent activity
      echo
      echo "7. Recent Activity:"
      if [ -f /var/log/unattended-upgrades/unattended-upgrades.log ]; then
          last_run=$(grep "Starting unattended upgrades" /var/log/unattended-upgrades/unattended-upgrades.log 2>/dev/null | tail -1 | cut -d' ' -f1-3 || echo "Never")
          if [ "$last_run" != "Never" ]; then
              echo "   üìÖ Last run: $last_run"
          else
              echo "   üìÖ No previous runs found"
          fi

          # Count recent upgrades
          recent_upgrades=$(grep -c "Packages that will be upgraded:" /var/log/unattended-upgrades/unattended-upgrades.log 2>/dev/null || echo "0")
          echo "   üì¶ Total upgrade operations: $recent_upgrades"
      else
          echo "   üì≠ No log file available"
      fi

      # Check for pending upgrades
      echo
      echo "8. Pending Upgrades:"
      if command -v apt >/dev/null 2>&1; then
          pending=$(apt list --upgradable 2>/dev/null | grep -c "upgradable" || echo "0")
          echo "   üìã Pending packages: $pending"

          if [ "$pending" -gt 0 ]; then
              echo "   üìã Upgradable packages:"
              apt list --upgradable 2>/dev/null | grep "upgradable" | head -5 | sed 's/^/      /'
          fi
      else
          echo "   apt not available"
      fi

      # Check monitoring scripts
      echo
      echo "9. Monitoring Scripts:"
      monitor_scripts=(
          "/usr/local/bin/unattended-upgrades-status"
          "/usr/local/bin/unattended-upgrades-monitor"
          "/usr/local/bin/unattended-upgrades-cockpit-notify"
          "/usr/local/bin/unattended-upgrades-ssh-restart"
          "/usr/local/bin/unattended-upgrades-docker-restart"
          "/usr/local/bin/unattended-upgrades-distrobox-restart"
      )

      for script in "${monitor_scripts[@]}"; do
          if [ -x "$script" ]; then
              echo "   ‚úÖ $script available"
          else
              echo "   ‚ö†Ô∏è  $script not available"
          fi
      done

      echo
      echo "=== Recommendations ==="
      echo "‚Ä¢ Check logs: tail -f /var/log/unattended-upgrades/unattended-upgrades.log"
      echo "‚Ä¢ Force run: unattended-upgrade -d"
      echo "‚Ä¢ Edit config: nano /etc/apt/apt.conf.d/50unattended-upgrades"
      echo "‚Ä¢ Test config: unattended-upgrade --dry-run"
    etc/profile.d/unattended-upgrades-status.sh: |
      # Unattended Upgrades status profile for bash
      # This file is sourced by /etc/profile.d/ to show unattended upgrades status on login

      # Only show status if running interactively and not in scripts
      if [[ $- == *i* ]] && [ -z "${UNATTENDED_UPGRADES_STATUS_SHOWN:-}" ]; then
          export UNATTENDED_UPGRADES_STATUS_SHOWN=1

          # Check if unattended-upgrades is available
          if command -v unattended-upgrade >/dev/null 2>&1; then
              echo "üîÑ Unattended Upgrades:"

              # Check if service is enabled
              if systemctl is-enabled unattended-upgrades.timer >/dev/null 2>&1 2>/dev/null; then
                  echo "   ‚úÖ Automatic upgrades enabled"
              else
                  echo "   ‚ö†Ô∏è  Automatic upgrades disabled"
              fi

              # Check for pending upgrades
              if command -v apt >/dev/null 2>&1; then
                  pending=$(apt list --upgradable 2>/dev/null | grep -c "upgradable" || echo "0")
                  if [ "$pending" -gt 0 ]; then
                      echo "   üì¶ $pending packages pending upgrade"
                  fi
              fi

              echo
          fi
      fi
