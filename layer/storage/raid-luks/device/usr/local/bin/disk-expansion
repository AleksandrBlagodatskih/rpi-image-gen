#!/bin/bash
set -euo pipefail

# Function for error handling
die() {
    echo "ERROR: $*" >&2
    exit 1
}

SCRIPT_NAME="disk-expansion"
LOG_FILE="/var/log/${SCRIPT_NAME}.log"
FLAG_FILE="/var/lib/${SCRIPT_NAME}.done"
[ -f "$FLAG_FILE" ] && exit 0
echo "$(date '+%Y-%m-%d %H:%M:%S') Starting disk expansion" | tee "$LOG_FILE"

# ============================================================================
# DEVICE DISCOVERY FUNCTIONS
# ============================================================================

# Get SSD devices from mdadm configuration
get_ssd_devices() {
    local devices=()
    if [ -f /etc/mdadm/mdadm.conf ]; then
        # Try to get devices from mdadm.conf
        while read -r line; do
            if [[ "$line" =~ ^ARRAY.*devices=(.*)$ ]]; then
                local devs="${BASH_REMATCH[1]}"
                IFS=',' read -ra devices <<< "$devs"
                break
            fi
        done < /etc/mdadm/mdadm.conf
    fi

    # If not found in config, try /proc/mdstat
    if [ ${#devices[@]} -eq 0 ] && [ -f /proc/mdstat ]; then
        while read -r line; do
            if [[ "$line" =~ ^md[0-9]+.*raid1.*([^ ]+)$ ]]; then
                local raid_devices="${BASH_REMATCH[1]}"
                # Extract device names (remove [number] suffixes)
                devices=($(echo "$raid_devices" | sed 's/\[[0-9]\]//g'))
                break
            fi
        done < /proc/mdstat
    fi

    echo "${devices[@]}"
}

# Validate SSD devices
validate_devices() {
    local devices=("$@")
    [ ${#devices[@]} -eq 2 ] || die "Need 2 SSD devices, found: ${devices[*]}"

    for dev in "${devices[@]}"; do
        [ -b "$dev" ] || die "Device $dev not found"
    done
}

# ============================================================================
# SIZE CALCULATION FUNCTIONS
# ============================================================================

# Get device size in bytes
get_device_size() {
    local device="$1"
    blockdev --getsz "$device" 2>/dev/null || die "Failed to get size for $device"
    local sectors=$(( $(blockdev --getsz "$device" 2>/dev/null) * 512 ))
    echo "$sectors"
}

# Calculate optimal partition size
calculate_partition_size() {
    local size_a="$1" size_b="$2"
    local target_size
    [ "$size_a" -lt "$size_b" ] && target_size="$size_a" || target_size="$size_b"
    local new_sectors=$(( (target_size - 16896) / 512 ))
    echo "$new_sectors"
}

# ============================================================================
# CONFIGURATION PARSING FUNCTIONS
# ============================================================================

# Get crypt device name from crypttab
get_crypt_device() {
    local crypt_name=""
    if [ -f /etc/crypttab ]; then
        while read -r line; do
            # Skip comments and empty lines
            [[ "$line" =~ ^[[:space:]]*# ]] && continue
            [[ -z "$line" ]] && continue

            # Parse crypttab line: name device key options
            read -r name device key options <<< "$line"
            if [ -n "$name" ] && [[ "$options" == *luks* ]]; then
                crypt_name="$name"
                break
            fi
        done < /etc/crypttab
    fi

    # Default fallback
    [ -z "$crypt_name" ] && crypt_name="cryptroot"
    echo "$crypt_name"
}

# Get root filesystem type from fstab
get_root_fs_type() {
    local fs_type=""
    if [ -f /etc/fstab ]; then
        while read -r line; do
            # Skip comments and empty lines
            [[ "$line" =~ ^[[:space:]]*# ]] && continue
            [[ -z "$line" ]] && continue

            # Parse fstab line: device mountpoint fstype options dump pass
            read -r device mountpoint fstype options dump pass <<< "$line"
            if [ "$mountpoint" = "/" ]; then
                fs_type="$fstype"
                break
            fi
        done < /etc/fstab
    fi
    echo "$fs_type"
}

# ============================================================================
# MAIN EXPANSION LOGIC
# ============================================================================

# Initialize expansion environment
init_expansion() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') Starting disk expansion" | tee "$LOG_FILE"

    # Discover and validate devices
    local devices=($(get_ssd_devices))
    validate_devices "${devices[@]}"

    DEVICE_A="${devices[0]}"
    DEVICE_B="${devices[1]}"
    CRYPT_DEVICE=$(get_crypt_device)
}

# Calculate new disk geometry
calculate_geometry() {
    SIZE_A=$(get_device_size "$DEVICE_A")
    SIZE_B=$(get_device_size "$DEVICE_B")
    NEW_PARTITION_SECTORS=$(calculate_partition_size "$SIZE_A" "$SIZE_B")
}

# Stop RAID and LUKS services
stop_services() {
    echo "Stopping RAID and LUKS services..." >> "$LOG_FILE"
    [ -b /dev/md0 ] && mdadm --stop /dev/md0
    [ -b "/dev/mapper/$CRYPT_DEVICE" ] && cryptsetup close "$CRYPT_DEVICE"
}

# Resize partitions on both devices
resize_partitions() {
    echo "Resizing partitions..." >> "$LOG_FILE"
    for dev in "$DEVICE_A" "$DEVICE_B"; do
        local start_sector
        start_sector=$(parted -s "$dev" unit s print | awk '/^ 1/{print $2}' | sed 's/s//')
        [ -n "$start_sector" ] && parted -s "$dev" resizepart 1 "${NEW_PARTITION_SECTORS}s"
    done
}

# Reassemble RAID and resize LUKS container
reassemble_and_resize() {
    echo "Reassembling RAID array..." >> "$LOG_FILE"
    mdadm --assemble --scan

    # Wait for RAID to become active (conditional delay)
    local retries=30
    while [ $retries -gt 0 ] && [ ! -b /dev/md0 ]; do
        sleep 1
        ((retries--))
    done

    [ -b /dev/md0 ] || die "RAID array /dev/md0 did not become active"

    echo "Resizing LUKS container..." >> "$LOG_FILE"
    cryptsetup resize "$CRYPT_DEVICE"
}

# Resize filesystem based on detected type
resize_filesystem() {
    local fs_type
    fs_type=$(get_root_fs_type)
    [ -z "$fs_type" ] && die "Could not determine root filesystem type"

    echo "Resizing $fs_type filesystem..." >> "$LOG_FILE"
    case "$fs_type" in
        ext4) resize2fs "/dev/mapper/$CRYPT_DEVICE" ;;
        btrfs) btrfs filesystem resize max / ;;
        f2fs) resize.f2fs "/dev/mapper/$CRYPT_DEVICE" ;;
        *) die "Unsupported filesystem type: $fs_type" ;;
    esac
}

# Finalize expansion and update configuration
finalize_expansion() {
    echo "Updating RAID configuration..." >> "$LOG_FILE"
    mdadm --detail --scan > /etc/mdadm/mdadm.conf

    touch "$FLAG_FILE"
    echo "$(date '+%Y-%m-%d %H:%M:%S') Disk expansion completed" >> "$LOG_FILE"
}

# ============================================================================
# MAIN EXECUTION
# ============================================================================

init_expansion
calculate_geometry
stop_services
resize_partitions
reassemble_and_resize
resize_filesystem
finalize_expansion
