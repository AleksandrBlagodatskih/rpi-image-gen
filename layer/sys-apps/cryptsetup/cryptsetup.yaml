# METABEGIN
# X-Env-Layer-Name: cryptsetup
# X-Env-Layer-Category: sys-apps
# X-Env-Layer-Desc: Linux Unified Key Setup (cryptsetup) with initramfs support for LUKS encrypted filesystems
# X-Env-Layer-Version: 1.0.0
# X-Env-Layer-Requires: essential
# X-Env-Layer-Provides: luks-support
# X-Env-Layer-Conflicts: rpi-essential-base (provides basic cryptsetup)
#
# X-Env-VarPrefix: cryptsetup
#
# X-Env-Var-enable: n
# X-Env-Var-enable-Desc: Enable cryptsetup with initramfs support for LUKS encrypted filesystems
# X-Env-Var-enable-Required: n
# X-Env-Var-enable-Valid: bool
# X-Env-Var-enable-Set: immediate
#
# X-Env-Var-initramfs_integration: y
# X-Env-Var-initramfs_integration-Desc: Enable cryptsetup integration with initramfs for boot-time LUKS support
# X-Env-Var-initramfs_integration-Required: n
# X-Env-Var-initramfs_integration-Valid: bool
# X-Env-Var-initramfs_integration-Set: immediate
#
# X-Env-Var-keyscript_support: n
# X-Env-Var-keyscript_support-Desc: Enable keyscript support for automatic LUKS unlocking (requires keyfiles)
# X-Env-Var-keyscript_support-Required: n
# X-Env-Var-keyscript_support-Valid: bool
# X-Env-Var-keyscript_support-Set: immediate
#
# X-Env-Var-secure_key_storage: y
# X-Env-Var-secure_key_storage-Desc: Enable secure key storage with proper permissions and backup warnings
# X-Env-Var-secure_key_storage-Required: n
# X-Env-Var-secure_key_storage-Valid: bool
# X-Env-Var-secure_key_storage-Set: immediate
#
# X-Env-Var-encryption_algorithm: aes-xts-plain64
# X-Env-Var-encryption_algorithm-Desc: Default encryption algorithm for new LUKS containers
# X-Env-Var-encryption_algorithm-Required: n
# X-Env-Var-encryption_algorithm-Valid: string
# X-Env-Var-encryption_algorithm-Set: immediate
#
# X-Env-Var-key_size: 512
# X-Env-Var-key_size-Desc: Key size in bits for LUKS encryption (256, 512, or 1024 recommended)
# X-Env-Var-key_size-Required: n
# X-Env-Var-key_size-Valid: int
# X-Env-Var-key_size-Set: immediate
# METAEND
---
mmdebstrap:
  # cryptsetup уже установлен в essential слое, добавляем только дополнительные компоненты
  packages:
    - cryptsetup-initramfs  # Для интеграции с initramfs
  customize-hooks:
    # Настройка cryptsetup с поддержкой initramfs интеграции
    - |
      if [ "${IGconf_cryptsetup_enable}" = "y" ]; then
        echo "Configuring cryptsetup LUKS support..."

        # Добавление необходимых модулей ядра для полной поддержки LUKS
        echo "# cryptsetup: LUKS support modules" >> $1/etc/initramfs-tools/modules
        echo "dm_crypt" >> $1/etc/initramfs-tools/modules
        echo "dm_mod" >> $1/etc/initramfs-tools/modules

        # Криптографические модули для различных алгоритмов шифрования
        echo "aes_generic" >> $1/etc/initramfs-tools/modules
        echo "aesni_intel" >> $1/etc/initramfs-tools/modules  # Аппаратное ускорение AES (если доступно)
        echo "cbc" >> $1/etc/initramfs-tools/modules
        echo "ecb" >> $1/etc/initramfs-tools/modules
        echo "lrw" >> $1/etc/initramfs-tools/modules
        echo "xts" >> $1/etc/initramfs-tools/modules

        # Хэширование и криптография
        echo "sha256_generic" >> $1/etc/initramfs-tools/modules
        echo "sha512_generic" >> $1/etc/initramfs-tools/modules
        echo "ghash_generic" >> $1/etc/initramfs-tools/modules  # Для GCM режима

        # Дополнительные необходимые модули
        echo "crypto_null" >> $1/etc/initramfs-tools/modules
        echo "af_alg" >> $1/etc/initramfs-tools/modules  # Криптографический API ядра

        # Настройка cryptsetup-initramfs для загрузки с LUKS
        if [ "${IGconf_cryptsetup_initramfs_integration}" = "y" ]; then
          if [ -f $1/etc/cryptsetup-initramfs/conf-hook ]; then
            # Включение cryptsetup в initramfs hooks
            sed -i 's|^#CRYPTSETUP=|CRYPTSETUP=y|' $1/etc/cryptsetup-initramfs/conf-hook
          fi

          # Создание базовой конфигурации crypttab для примера
          mkdir -p $1/etc/cryptsetup-initramfs/conf.d
          cat > $1/etc/cryptsetup-initramfs/conf.d/cryptsetup << 'EOF'
# cryptsetup-initramfs configuration
# This file is used by cryptsetup-initramfs to configure LUKS support during boot

# Enable cryptsetup in initramfs
CRYPTSETUP=y

# Use keyscript for automatic unlocking (если настроены ключи)
#CRYPTKEYSCRIPT=unlock

# Timeout for password prompt (в секундах)
#CRYPTTIMEOUT=30
EOF
        fi

        # Перегенерация initramfs с полной поддержкой LUKS
        echo "Regenerating initramfs with LUKS support..."
        chroot $1 update-initramfs -u -k all

        # Создание примеров конфигурации для пользователя
        mkdir -p $1/usr/share/doc/cryptsetup/examples

        # Пример crypttab
        cat > $1/usr/share/doc/cryptsetup/examples/crypttab.example << 'EOF'
# Пример /etc/crypttab для зашифрованных разделов
# Формат: <name> <device> <password> <options>

# Корневой раздел с паролем из файла
cryptroot UUID=12345678-1234-1234-1234-123456789012 /boot/luks-key luks,keyscript=/bin/cat,discard

# Домашний раздел с запросом пароля
crypthome UUID=87654321-4321-4321-4321-210987654321 none luks,discard

# Дополнительные опции:
# - discard: включить TRIM для SSD
# - keyscript=/bin/cat: использовать ключ из файла
# - timeout=30: таймаут ожидания пароля
# - header=/path/to/header: внешний LUKS header
EOF

        # Пример keyscript для автоматического разблокирования с улучшенной безопасностью
        if [ "${IGconf_cryptsetup_keyscript_support}" = "y" ]; then
          cat > $1/usr/share/doc/cryptsetup/examples/keyscript.example << 'EOF'
#!/bin/bash
# Пример keyscript для автоматического разблокирования LUKS
# Разместите в /lib/cryptsetup/scripts/ и сделайте исполняемым

# Получаем имя устройства из параметра
device="$1"

# Получаем UUID устройства
uuid=$(blkid -s UUID -o value "$device")

# Проверка существования ключа (если настроено безопасное хранение)
if [ "${IGconf_cryptsetup_secure_key_storage}" = "y" ]; then
  # Проверяем права доступа к ключевым файлам
  if [ -f /boot/luks-key ]; then
    stat -c "%a" /boot/luks-key | grep -q "^[0-6]00$" || {
      echo "WARNING: Key file permissions are not secure" >&2
    }
  fi
fi

case "$uuid" in
  "12345678-1234-1234-1234-123456789012")
    # Корневой раздел - используем ключ из защищенного хранилища
    if [ -f /boot/luks-key ]; then
      echo -n "$(cat /boot/luks-key)"
    else
      echo "ERROR: Key file not found for root partition" >&2
      exit 1
    fi
    ;;
  "87654321-4321-4321-4321-210987654321")
    # Домашний раздел - запрос пароля с таймаутом
    echo -n "Enter passphrase for $device: "
    read -s -t 30 passphrase
    echo
    if [ -z "$passphrase" ]; then
      echo "ERROR: Passphrase timeout or empty" >&2
      exit 1
    fi
    echo -n "$passphrase"
    ;;
  *)
    # Неизвестное устройство - отказываем в доступе
    echo "ERROR: Unknown encrypted device $device" >&2
    exit 1
    ;;
esac
EOF

          chmod +x $1/usr/share/doc/cryptsetup/examples/keyscript.example
        fi

        # Создание примера конфигурации для безопасного хранения ключей
        if [ "${IGconf_cryptsetup_secure_key_storage}" = "y" ]; then
          cat > $1/usr/share/doc/cryptsetup/examples/secure-key-setup.sh << 'EOF'
#!/bin/bash
# Пример скрипта для безопасного создания и хранения LUKS ключей

set -e

echo "Setting up secure LUKS key storage..."

# Создание директории для ключей (если не существует)
mkdir -p /boot/keys

# Генерация случайного ключа
dd if=/dev/urandom of=/boot/keys/luks-key bs=64 count=1

# Установка безопасных прав доступа
chmod 600 /boot/keys/luks-key
chown root:root /boot/keys/luks-key

# Добавление ключа в LUKS контейнер
cryptsetup luksAddKey /dev/sdX /boot/keys/luks-key

echo "Secure key setup completed."
echo "WARNING: Backup your key file and LUKS header before rebooting!"
echo "Backup commands:"
echo "  cryptsetup luksHeaderBackup /dev/sdX --header-backup-file luks-header.backup"
echo "  cp /boot/keys/luks-key /secure/location/luks-key.backup"
EOF

          chmod +x $1/usr/share/doc/cryptsetup/examples/secure-key-setup.sh
        fi

        # Создание скрипта для тестирования LUKS конфигурации
        cat > $1/usr/local/bin/test-luks-setup << 'EOF'
#!/bin/bash
# Скрипт для тестирования LUKS конфигурации

echo "=== LUKS Configuration Test ==="

# Проверка доступности cryptsetup
if ! command -v cryptsetup >/dev/null 2>&1; then
  echo "ERROR: cryptsetup not found"
  exit 1
fi

# Проверка модулей ядра
echo "Checking kernel modules..."
for module in dm_crypt dm_mod aes_generic; do
  if lsmod | grep -q "$module"; then
    echo "✓ $module module loaded"
  else
    echo "⚠ $module module not loaded (will be loaded by initramfs)"
  fi
done

# Проверка initramfs интеграции
if [ -f /etc/cryptsetup-initramfs/conf-hook ]; then
  echo "✓ cryptsetup-initramfs configuration found"
  grep -q "CRYPTSETUP=y" /etc/cryptsetup-initramfs/conf-hook && \
    echo "✓ CRYPTSETUP enabled in initramfs" || \
    echo "⚠ CRYPTSETUP not enabled in initramfs"
else
  echo "⚠ cryptsetup-initramfs not configured"
fi

# Проверка примеров конфигурации
echo "Checking example configurations..."
if [ -f /usr/share/doc/cryptsetup/examples/crypttab.example ]; then
  echo "✓ crypttab.example found"
fi

if [ -f /usr/share/doc/cryptsetup/examples/keyscript.example ]; then
  echo "✓ keyscript.example found"
fi

if [ "${IGconf_cryptsetup_secure_key_storage}" = "y" ]; then
  if [ -f /usr/share/doc/cryptsetup/examples/secure-key-setup.sh ]; then
    echo "✓ secure-key-setup.sh found"
  fi
fi

echo "=== Test completed ==="
EOF

        chmod +x $1/usr/local/bin/test-luks-setup

        echo "cryptsetup configuration completed successfully"
        echo "Run 'test-luks-setup' to verify your LUKS configuration"
      else
        echo "cryptsetup layer enabled but cryptsetup_enable is disabled"
      fi
