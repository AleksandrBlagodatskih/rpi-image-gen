# ==========================================
# SSL/TLS SECURITY HARDENING LAYER
# ==========================================
# Hardening SSL/TLS конфигураций для безопасного шифрования
# Включает: cipher suites, protocols, certificates

# БЛОК МЕТАДАННЫХ (METADATA BLOCK)
# ==========================================
# METABEGIN
# X-Env-Layer-Name: ssl-tls-hardening
# X-Env-Layer-Category: base
# X-Env-Layer-Desc: SSL/TLS hardening with secure cipher suites and protocols
# X-Env-Layer-Version: 1.0.0
# X-Env-Layer-Requires: base
# X-Env-Layer-Provides: ssl-tls-hardening

# X-Env-VarPrefix: ssl

# X-Env-Var-disable_weak_protocols: y
# X-Env-Var-disable_weak_protocols-Desc: Disable SSLv3, TLSv1.0, TLSv1.1
# X-Env-Var-disable_weak_protocols-Required: n
# X-Env-Var-disable_weak_protocols-Valid: keywords:y,n
# X-Env-Var-disable_weak_protocols-Set: y

# X-Env-Var-enable_secure_ciphers: y
# X-Env-Var-enable_secure_ciphers-Desc: Enable only secure cipher suites
# X-Env-Var-enable_secure_ciphers-Required: n
# X-Env-Var-enable_secure_ciphers-Valid: keywords:y,n
# X-Env-Var-enable_secure_ciphers-Set: y

# X-Env-Var-enable_hsts: y
# X-Env-Var-enable_hsts-Desc: Enable HTTP Strict Transport Security
# X-Env-Var-enable_hsts-Required: n
# X-Env-Var-enable_hsts-Valid: keywords:y,n
# X-Env-Var-enable_hsts-Set: y

# METAEND
# ==========================================

---
mmdebstrap:
  packages:
    - openssl
    - ca-certificates
    - ssl-cert
    - certbot

  customize-hooks:
    # SSL/TLS hardening configuration
    - |
      set -eu
      mkdir -p $1/etc/ssl/certs $1/etc/ssl/private $1/etc/ssl/openssl

      # Создание безопасной конфигурации OpenSSL
      cat << 'EOF' > $1/etc/ssl/openssl/ssl-hardening.cnf
      # ==========================================
      # OPENSSL HARDENING CONFIGURATION
      # ==========================================

      # System-wide SSL/TLS configuration
      openssl_conf = openssl_init

      [openssl_init]
      ssl_conf = ssl_sect

      [ssl_sect]
      system_default = system_default_sect

      [system_default_sect]
      # Secure cipher suites only
      CipherString = ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA

      # Minimum TLS version
      MinProtocol = TLSv1.2

      # Maximum TLS version
      MaxProtocol = TLSv1.3

      # Secure options
      Options = ServerPreference,PrioritizeChaCha,Compression

      # Curves for ECDHE
      Curves = X25519:P-521:P-384:P-256

      # Certificate verification
      VerifyMode = Require
      VerifyDepth = 3
      EOF

      # Настройка системных переменных SSL
      if [[ "${ssl_disable_weak_protocols:-y}" == "y" ]] || [[ "${ssl_enable_secure_ciphers:-y}" == "y" ]]; then
        cat << EOF >> $1/etc/environment
      # ==========================================
      # SSL/TLS ENVIRONMENT VARIABLES
      # ==========================================

      # OpenSSL configuration
      OPENSSL_CONF=/etc/ssl/openssl/ssl-hardening.cnf

      # Certificate directories
      SSL_CERT_DIR=/etc/ssl/certs
      SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt
      EOF
      fi

      # Создание безопасного шаблона для сертификатов
      cat << 'EOF' > $1/etc/ssl/openssl/cert-template.cnf
      # ==========================================
      # SECURE CERTIFICATE TEMPLATE
      # ==========================================

      [req]
      distinguished_name = req_distinguished_name
      req_extensions = v3_req
      prompt = no

      [req_distinguished_name]
      C = [COUNTRY]
      ST = [STATE]
      L = [CITY]
      O = [ORGANIZATION]
      OU = [ORGANIZATIONAL_UNIT]
      CN = [COMMON_NAME]

      [v3_req]
      keyUsage = keyEncipherment, dataEncipherment
      extendedKeyUsage = serverAuth
      subjectAltName = @alt_names

      [alt_names]
      DNS.1 = [DOMAIN]
      DNS.2 = www.[DOMAIN]
      IP.1 = [IP_ADDRESS]
      EOF

      # Настройка системного доверия сертификатам
      cat << 'EOF' > $1/etc/ca-certificates.conf
      # ==========================================
      # CA CERTIFICATES CONFIGURATION
      # ==========================================

      # Mozilla CA certificates (recommended)
      mozilla/Verisign_Universal_Root_Certification_Authority.crt
      mozilla/DigiCert_Global_Root_CA.crt
      mozilla/GlobalSign_Root_CA_-_R3.crt
      mozilla/ISRG_Root_X1.crt
      mozilla/Starfield_Root_Certificate_Authority_-_G2.crt

      # Additional trusted CAs (uncomment if needed)
      # local/My_Internal_CA.crt
      EOF

      # Создание скрипта для проверки SSL/TLS конфигурации
      cat << 'EOF' > $1/usr/local/bin/ssl-check
      #!/bin/bash
      # SSL/TLS configuration checker

      set -e

      echo "========================================="
      echo "SSL/TLS CONFIGURATION CHECK"
      echo "========================================="

      # Check OpenSSL version
      echo "OpenSSL version:"
      openssl version

      # Check available ciphers
      echo -e "\nSecure cipher suites:"
      openssl ciphers -v 'ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256' | head -5

      # Check certificate expiry
      echo -e "\nChecking system certificates..."
      find /etc/ssl/certs -name "*.pem" -exec openssl x509 -checkend 0 -in {} \; 2>/dev/null | head -5

      # Check TLS protocols
      echo -e "\nTesting TLS protocols:"
      if command -v openssl >/dev/null 2>&1; then
          echo "TLS 1.2 support: $(openssl s_client -connect localhost:443 -tls1_2 </dev/null 2>&1 | grep -q "SSL handshake has read" && echo "YES" || echo "NO")"
          echo "TLS 1.3 support: $(openssl s_client -connect localhost:443 -tls1_3 </dev/null 2>&1 | grep -q "SSL handshake has read" && echo "YES" || echo "NO")"
      fi

      echo -e "\nSSL/TLS check completed"
      EOF

      chmod +x $1/usr/local/bin/ssl-check

      # Настройка certbot для автоматического обновления сертификатов
      cat << 'EOF' > $1/etc/cron.weekly/cert-renewal
      #!/bin/bash
      # Automatic certificate renewal

      set -e

      # Check if certbot is installed
      if command -v certbot >/dev/null 2>&1; then
          # Renew certificates
          certbot renew --quiet

          # Reload web services
          if systemctl is-active --quiet nginx; then
              systemctl reload nginx
          fi

          if systemctl is-active --quiet apache2; then
              systemctl reload apache2
          fi

          log_success "SSL certificates renewed"
      fi
      EOF

      chmod +x $1/etc/cron.weekly/cert-renewal

      log_success "SSL/TLS hardening настроен"
