Этап,Время,Компоненты,Файлы,Результат
1. Инициализация,1-2 сек,"Bash + Python","bin/ig, lib/cli.sh, lib/common.sh, lib/dependencies.sh, rpi-image-gen","Подготовка окружения"
2. Параметры,2-5 сек,"Bash + Python","config/*.yaml, bin/ig, site/config_loader.py, rpi-image-gen","Конфигурация сборки"
3. Слои,3-10 сек,"Bash + Python","layer/*/*.yaml, device/*/*.yaml, bin/ig, site/layer_manager.py, rpi-image-gen","Порядок сборки"
4. Подготовка,5-15 сек,"Bash + Python","scripts/*.sh, layer/*/*.yaml, site/config_loader.py, rpi-image-gen, keydir/*","Конфигурация bdebstrap"
5. ФС,30 сек-10 мин,"Bash + bdebstrap + podman","layer-hooks/*.sh, bin/runner, scripts/*.sh, layer-hooks/bdebstrap/*.sh, rpi-image-gen, site/sbom_generator.py","Файловая система"
6. Образы,1-5 мин,"Bash + genimage + podman","layer-hooks/*.sh, image/*/*.cfg, rpi-image-gen, layer-hooks/*.sh","Дисковые образы"
7. Deploy,1-2 сек,"Bash","scripts/deploy.sh, rpi-image-gen","Готовые артефакты"
Команда config,"parameter_assembly → CLI","config","bin/ig config, site/config_loader.py","Обработка конфигураций"
Команда layer,"parameter_assembly → collect_layers → CLI","layer","bin/ig layer, site/layer_manager.py","Управление слоями"
Команда metadata,"parameter_assembly → CLI","metadata","bin/ig metadata, site/metadata_handler.py","Работа с метаданными"
Команда clean,"parameter_assembly → collect_layers → Очистка","clean","rpi-image-gen (clean_worktree)","Очистка артефактов"
config/,✅ Основная,✅ , ,✅ , , , "Определяет общую конфигурацию"
device/, ,✅ Основная, ,✅ , , , "Определяет аппаратную конфигурацию"
layer/, ,✅ Основная, ,✅ , , , "Определяет программные компоненты"
layer-hooks/, , , ,✅ ,✅ , "Выполняются на этапах сборки"
scripts/, , ,✅ Основная,✅ , , "Функциональные хуки"
site/,✅ ,✅ ,✅ ,✅ ,✅ ,✅ , "Ядро Python системы"
lib/,✅ ,✅ ,✅ ,✅ ,✅ ,✅ , "Вспомогательные функции"
bin/,✅ , ,✅ , ,✅ ,✅ , "Исполняемые утилиты"
templates/,🔄 ,🔄 ,🔄 ,🔄 ,🔄 ,🔄 , "Генерация файлов"
test/,🔄 ,🔄 ,🔄 ,🔄 ,🔄 ,🔄 , "Валидация результатов"
examples/,📋 ,📋 ,📋 ,📋 ,📋 ,📋 , "Референсные материалы"
