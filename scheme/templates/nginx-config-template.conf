# ============================================================================
# ШАБЛОН КОНФИГУРАЦИИ NGINX ДЛЯ RPI-IMAGE-GEN
# ============================================================================

# [NGINX_CONFIG_DESCRIPTION]

# Общее описание:
# - [ОПИСАНИЕ 1]
# - [ОПИСАНИЕ 2]
# - [ОПИСАНИЕ 3]

# Функции:
# - [ФУНКЦИЯ 1]
# - [ФУНКЦИЯ 2]

# Тестирование:
# nginx -t -c [CONFIG_PATH]

# ============================================================================
# ГЛОБАЛЬНЫЕ НАСТРОЙКИ
# ============================================================================

# Пользователь и группа
user [USER] [GROUP];

# Рабочие процессы
worker_processes [WORKER_PROCESSES];
worker_rlimit_nofile [RLIMIT_NOFILE];

# PID файл
pid [PID_FILE];

# События
events {
    worker_connections [WORKER_CONNECTIONS];
    use [CONNECTION_PROCESSING_METHOD];
    multi_accept [MULTI_ACCEPT];
}

# ============================================================================
# HTTP БЛОК
# ============================================================================

http {
    # Логи
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log [ACCESS_LOG_PATH] main;
    error_log [ERROR_LOG_PATH] [ERROR_LOG_LEVEL];

    # Основные настройки
    sendfile [SENDFILE];
    tcp_nopush [TCP_NOPUSH];
    tcp_nodelay [TCP_NODELAY];
    keepalive_timeout [KEEPALIVE_TIMEOUT];
    types_hash_max_size [TYPES_HASH_MAX_SIZE];
    server_tokens [SERVER_TOKENS];

    # MIME типы
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # SSL настройки
    ssl_protocols [SSL_PROTOCOLS];
    ssl_prefer_server_ciphers [SSL_PREFER_SERVER_CIPHERS];
    ssl_ciphers [SSL_CIPHERS];
    ssl_session_cache [SSL_SESSION_CACHE];
    ssl_session_timeout [SSL_SESSION_TIMEOUT];

    # Gzip сжатие
    gzip [GZIP];
    gzip_vary [GZIP_VARY];
    gzip_min_length [GZIP_MIN_LENGTH];
    gzip_proxied [GZIP_PROXIED];
    gzip_comp_level [GZIP_COMP_LEVEL];
    gzip_types [GZIP_TYPES];

    # Виртуальные серверы
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}

# ============================================================================
# ПРИМЕРЫ КОНФИГУРАЦИЙ ВИРТУАЛЬНЫХ СЕРВЕРОВ
# ============================================================================

# Пример 1: Простой статический сайт
server {
    listen [LISTEN_PORT];
    server_name [SERVER_NAME];
    root [DOCUMENT_ROOT];
    index [INDEX_FILES];

    location / {
        try_files $uri $uri/ =404;
    }
}

# Пример 2: Прокси на backend
server {
    listen [LISTEN_PORT] ssl http2;
    server_name [SERVER_NAME];

    ssl_certificate [SSL_CERTIFICATE];
    ssl_certificate_key [SSL_CERTIFICATE_KEY];

    location / {
        proxy_pass [PROXY_PASS_URL];
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# Пример 3: Load balancer
upstream backend {
    least_conn;
    server [BACKEND_SERVER_1] weight=3;
    server [BACKEND_SERVER_2] weight=2;
    server [BACKEND_SERVER_3] weight=1;
}

server {
    listen [LISTEN_PORT];
    server_name [SERVER_NAME];

    location / {
        proxy_pass http://backend;
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_connect_timeout [CONNECT_TIMEOUT];
        proxy_send_timeout [SEND_TIMEOUT];
        proxy_read_timeout [READ_TIMEOUT];
    }
}

# Пример 4: Сервер с SSL и редиректом
server {
    listen 80;
    server_name [SERVER_NAME];
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name [SERVER_NAME];

    ssl_certificate [SSL_CERTIFICATE];
    ssl_certificate_key [SSL_CERTIFICATE_KEY];

    root [DOCUMENT_ROOT];
    index [INDEX_FILES];

    location / {
        try_files $uri $uri/ =404;
    }
}

# ============================================================================
# КОНФИГУРАЦИИ ДЛЯ RASPBERRY PI
# ============================================================================

# Оптимизированная конфигурация для Raspberry Pi
worker_processes 1;
worker_rlimit_nofile 1024;

events {
    worker_connections 512;
    use epoll;
    multi_accept on;
}

http {
    # Оптимизации для ограниченных ресурсов
    client_max_body_size 16M;
    client_body_buffer_size 128k;
    large_client_header_buffers 4 16k;

    # Отключение ненужных модулей
    server_tokens off;
    more_clear_headers Server;

    # Кеширование
    open_file_cache max=1000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # Gzip для экономии трафика
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Логи для отладки
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
}

# ============================================================================
# БЛОКИ LOCATION
# ============================================================================

# Статические файлы
location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
    expires 1y;
    add_header Cache-Control "public, immutable";
    try_files $uri =404;
}

# PHP файлы
location ~ \.php$ {
    fastcgi_pass unix:[FASTCGI_SOCKET];
    fastcgi_index index.php;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    include fastcgi_params;
}

# Python приложения
location / {
    include uwsgi_params;
    uwsgi_pass unix:[UWSGI_SOCKET];
}

# Node.js приложения
location / {
    proxy_pass http://127.0.0.1:[NODE_PORT];
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
}

# ============================================================================
# БЕЗОПАСНОСТЬ
# ============================================================================

# Блокировка доступа к конфиденциальным файлам
location ~ /\. {
    deny all;
    access_log off;
    log_not_found off;
}

# Ограничение по IP
location /admin {
    allow [ALLOWED_IP];
    deny all;
}

# Rate limiting
limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
limit_req zone=api burst=20 nodelay;

# ============================================================================
# МОНИТОРИНГ И ОТЛАДКА
# ============================================================================

# Status страница
location /nginx_status {
    stub_status on;
    access_log off;
    allow 127.0.0.1;
    allow [MONITORING_IP];
    deny all;
}

# Health check
location /health {
    access_log off;
    return 200 "healthy\n";
    add_header Content-Type text/plain;
}

# ============================================================================
# ПЕРЕМЕННЫЕ NGINX
# ============================================================================

# Доступные переменные:
# $host - Имя хоста
# $server_name - Имя сервера
# $request_uri - URI запроса
# $remote_addr - IP клиента
# $http_user_agent - User Agent
# $http_referer - Referer
# $status - HTTP статус
# $body_bytes_sent - Отправлено байт
# $request_time - Время обработки запроса
# $upstream_response_time - Время ответа upstream

# ============================================================================
# ОТЛАДКА КОНФИГУРАЦИИ
# ============================================================================

# Проверка синтаксиса:
# nginx -t -c /etc/nginx/nginx.conf

# Тестирование конфигурации:
# nginx -T

# Просмотр подключений:
# ss -tlnp | grep nginx

# Мониторинг производительности:
# curl http://localhost/nginx_status

# ============================================================================
# ПРИМЕЧАНИЯ РАЗРАБОТЧИКА
# ============================================================================

# 1. Все пути должны быть абсолютными
# 2. Тестируйте конфигурацию перед перезагрузкой
# 3. Используйте reload вместо restart для обновления
# 4. Мониторьте логи на ошибки
# 5. Оптимизируйте настройки под нагрузку
# 6. Используйте SSL/TLS для безопасности
# 7. Настройте правильные права доступа
# 8. Документируйте все изменения
# 9. Используйте переменные для гибкости
# 10. Регулярно проверяйте безопасность

# ============================================================================
# ПРИМЕР ПОЛНОЙ КОНФИГУРАЦИИ
# ============================================================================

user www-data www-data;
worker_processes 1;
worker_rlimit_nofile 1024;
pid /var/run/nginx.pid;

events {
    worker_connections 512;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}
