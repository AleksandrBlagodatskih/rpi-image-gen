#!/bin/bash
# Unattended Upgrades Monitor Script
# This script monitors unattended upgrades and sends notifications

set -euo pipefail

LOG_FILE="/var/log/unattended-upgrades/monitor.log"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

echo "[$TIMESTAMP] Running unattended upgrades monitor" >> "$LOG_FILE"

# Check if unattended-upgrades ran recently
if [ -f /var/log/unattended-upgrades/unattended-upgrades.log ]; then
    # Get last run time
    last_run=$(grep "Starting unattended upgrades" /var/log/unattended-upgrades/unattended-upgrades.log 2>/dev/null | tail -1 | cut -d' ' -f1-3 || echo "")

    if [ -n "$last_run" ]; then
        echo "[$TIMESTAMP] Last unattended upgrades run: $last_run" >> "$LOG_FILE"

        # Check for errors in the last run
        errors=$(grep -A5 -B5 "ERROR" /var/log/unattended-upgrades/unattended-upgrades.log 2>/dev/null | tail -20 || echo "")
        if [ -n "$errors" ]; then
            echo "[$TIMESTAMP] ERRORS found in last run:" >> "$LOG_FILE"
            echo "$errors" >> "$LOG_FILE"

            # Send notification if available
            if command -v wall >/dev/null 2>&1; then
                echo "Unattended upgrades encountered errors. Check /var/log/unattended-upgrades/unattended-upgrades.log" | wall
            fi
        fi

        # Check for successful upgrades
        upgraded_packages=$(grep "Packages that were upgraded:" /var/log/unattended-upgrades/unattended-upgrades.log 2>/dev/null | tail -1 || echo "")
        if [ -n "$upgraded_packages" ]; then
            echo "[$TIMESTAMP] Packages upgraded: $upgraded_packages" >> "$LOG_FILE"
        fi
    fi
fi

# Check system status after upgrades
echo "[$TIMESTAMP] Checking system status..." >> "$LOG_FILE"

# Check for broken packages
if command -v dpkg >/dev/null 2>&1; then
    broken_packages=$(dpkg -l | grep -c "^[a-zA-Z][^ ]* [^ ]* [^ ]* [^ ]*$" || echo "0")
    if [ "$broken_packages" -gt 0 ]; then
        echo "[$TIMESTAMP] WARNING: $broken_packages broken packages detected" >> "$LOG_FILE"
    fi
fi

# Check disk space
disk_usage=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
if [ "$disk_usage" -gt 90 ]; then
    echo "[$TIMESTAMP] WARNING: Root filesystem $disk_usage% full" >> "$LOG_FILE"
fi

echo "[$TIMESTAMP] Monitor check completed" >> "$LOG_FILE"
